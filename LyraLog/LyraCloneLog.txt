Lyra 는 에픽게임즈에서 공식으로 배포하는 게임 프로젝트로 실제 현업수준의 거대한 프로젝트입니다. 
이 프로젝트는 언리얼 업데이트마다 그에 맞춰 업데이트되는 사실상 에픽게임즈에서 게임 제작 가이드라인의 역할을 하고 있고 
실제로 이 Lyra를 참조해 만든 게임들이 많다고 합니다. 

하지만 그만큼 내용이 방대하기 때문에 혼자 Lyra를 분석하기는 어렵습니다. 그래서 필요한 부분을 살펴보고 가져올 수 있는 방법이 있다면 가져와 사용하겠습니다. 

라이라 프로젝트는 모듈화가 잘 되어 있는 프로젝트입니다. 
이런 모듈화를 배워서 우리 프로젝트로 가져오는게 목표가 되겠습니다. 

#
에러 - 언리얼 5.5, 5.6 버전에서는 실행중 중단점이 호출되거나 빌드자체가 안되는데 5.4버전에서는 정상적으로 동작합니다. 
#

# 1 모듈 
언리얼 프로젝트에서 모듈이 뭔지를 정의하자면 비쥬얼 스튜디오로 연 언리얼 프로젝트의 소스디렉토리 아래의 폴더 하나하나를 모듈이라고 할 수 있습니다. 적어도 라이라 프로젝트에서는
그렇게 사용하고 있습니다. 그리고 프로젝트 아래의 플러그인 디렉토리와 그리고 프로젝트 파일까지 해서 
모듈, 플러그인, 프로젝트 3가지가 언리얼 3대 요소라고 합니다. 

이 3가지 요소의 개념을 정리하자면 
모듈의 구성요소는 cpp 파일과 h 파일입니다. 매번 클래스를 추가하면서 생기는 파일들이었습니다. 프로젝트의 uproject 파일을 열어보면 모듈을 지웠다 작성하는걸로 프로젝트에 포함할지를
정할 수 있습니다. 
플러그인은 무엇이냐면 모듈들을 모은 개념입니다. 그러면 또 모듈은 cpp와 h로 이루어 져있을 겁니다. 플러그인도 마찬가지로 uproject 파일에서 Enable 값을 ture, false 를 주는걸로 
포함 여부를 정할 수 있습니다. 

모듈과 플러그인이 비슷해 보이는데 그 차이가 뭔지 알아보자면 에픽게임즈에서 실험적인 기능들을 플러그인으로 넣고 테스트를 합니다. 
테스트를 하다가 이 플러그인이 안정성이 높고 유저들이 잘 사용한다 싶으면 그때 모듈로 옮기는 것입니다. 

그럼 프로젝트가 뭐냐면 모듈과 플러그인을 모두 들고 있을 수 있는 큰 개념이고 거기에 한가지 더 컨텐츠 폴더도 들고 있을 수 있어서 에셋들도 관리합니다. 

다시 쉽게 정리하자면 모듈은 이 프로젝트에서 안정적으로 사용할 수 있는 기능, 플러그인은 모듈들을 모아둔거지만 약간 외부에서 가져온 기능들로 안정성과 사용성이 모듈보다는 덜 
증명된 기능 묶음, 그리고 프로젝트는 모듈, 플러그인, 에셋들을 모두 포함한 개념 이라고 할 수 있습니다. 

새로만든 프로젝트를 보면 기본적으로 모듈이 하나 생성되어 있습니다. 
프로젝트명.cpp, 프로젝트명.h 가 그것들인데 여기의 상단에는 IMPLEMENT_PRIMARY_GAME_MODULE 이라는 define이 있습니다. 이 define 함수는 게임모듈을 정의 하고 등록하는데 
이때 인자로 FDefaultGameModuleImpl 을 주면 디폴트 모듈로 LC_5_4 로 등록합니다. 

클래스를 만들면서 FDefaultGameModuleImpl 를 상속받게 되면 기본 모듈을 상속받은 나만의 커스텀 모듈을 만들 수 있습니다. 
이때 중요한것은 지금 만든 모듈을 엔진에 사용하라고 명시를 해줘야합니다. 

IMPLEMENT_PRIMARY_GAME_MODULE의 인자로 FDefaultGameModuleImpl 대신에 지금 새로 만든 커스텀 모듈을 넣어주는 것으로 새 커스텀 모듈을 사용하도록 명령을 한것입니다. 
이 모듈을 만들고 사용하도록 하는 기술을 라이라에서 사용하고는 있지 않지만 일단 모듈에 대해 알기 위해서 실습을 해봅니다. 
새 모듈의 StartModule 멤버 함수를 만들어 중단점을 걸고 실행해보면 언리얼 에디터가 완전 실행되기전에 중단점에 걸립니다. 

주의해야할 점이 있습니다. 
라이라 프로젝트에서 지금 배운 IMPLEMENT_PRIMARY_GAME_MODULE 부분을 확인할건데 라이라 프로젝트는 소스 폴더에서도 라이라 게임과 라이라 에디터모듈 두개로 나뉘어 있습니다. 
그 중에 라이라 게임 모듈 cpp 파일에서 IMPLEMENT_PRIMARY_GAME_MODULE 함수를 사용하고 라이라 에디터 모듈에서는 IMPLEMENT_MODULE 로 설정하고 있습니다. 

IMPLEMENT_PRIMARY_GAME_MODULE는 이름에서 알 수 있듯이 프로젝트에서 딱 하나만 설정할 수 있습니다. 두개의 모듈을 설정하면 실행이 되지 않습니다.
거기에 에러가 이상하게 뜨기 때문에 문제를 알기도 힘듭니다. 
그렇기 때문에 라이라 프로젝트처럼 라이라 게임에서 IMPLEMENT_PRIMARY_GAME_MODULE을 사용했다면 라이라 에디터에서 IMPLEMENT_MODULE를 사용해도록 해줘야합니다. 

가장 중요한 기초 모듈에 IMPLEMENT_PRIMARY_GAME_MODULE를 하고 그 외의 모듈에서는 IMPLEMENT_MODULE를 호출해 줘야합니다. 

LC 프로젝트에서 새로 만든 모듈에 로그를 하나 찍어서 테스트를 해봅니다. 여기까지 실습으로 모듈이 뭔지에 대한 개념 그리고 커스텀 모듈이 잘 설정되었는지를 확인할 수 있습니다. 

# 2 로그 
앞으로 디버깅을 하면서 로그를 많이 찍어볼건데 언리얼에서 로그를 커스텀 할 수 있게 지원을 해줘서 디버깅에 필요한 로그들을 가독성 있게 볼 수 있도록 할것입니다. 
LC 프로젝트를 실행하고 C++ 클래스를 생성하는데 None을 선택해서 아무것도 상속받지 않고 생성을 해주는데 기본생성되는 클래스는 지워주겠습니다. 

헤더 파일에 두가지 헤더를 추가해주는데 Containers/UnrealSting.h 와 Logging/LogMacros.h 입니다. 
그리고 나서 
DECLARE_LOG_CATEGORY_EXTERN(LogLC, Log, All);
이런 매크로를 사용해주게 되면 LogLC 라는 새 로그 카테고리를 만들게 되는겁니다. 그런데 헤드에만 선언하면 안되고 
cpp 파일에서 다시 
DEFINE_LOG_CATEGORY(LogLC);
이렇게 정의 해줘야합니다.

새로 만든 로그 카테고리를 어떻게 사용하냐면 이전에 로그를 찍을때 LogTemp 를 사용했던 부분을 LogLC 로 바꿔주면 이 카테고리의 로그로 출력이 됩니다. 
앞으로 로그를 찍을때 카테고리로 나눠서 사용하게 되면 출력 로그에서 검색해 확인 하기 편해집니다. 