
## MyPlayer Interacte Input 추가 

캐릭터 메쉬는 일단 언리얼에서 기본 제공하는 Manny를 사용하고 여기에 무료 무기 에셋을 추가하려고 합니다. 

캐릭터에 직업을 고정을 하기 보다는 한 캐릭터에 여러 무기를 장착할때 마다 그에 맞는 액션을 할 수 있게 만들고 싶습니다. 
그러기 위해서 일단 어떤 무기를 선택할지 입력키가 필요했습니다. 이 키는 앞으로 여러 상황에 다 대응할 수 있는 상호작용 키로 사용할 예정입니다. 

이때 처음으로 언리얼엔진 enhanced input 을 추가해봅니다 
공식문서를 보면 일단 언리얼엔진에서 입력 에셋을 추가해야합니다. 

총 4가지 주요 부품으로 이루어진 컨셉인데 입력액션, 입력 매핑 컨텍스트, 입력 모디파이어, 입력 트리거로 이루어져있습니다. 

입력액션은 언리얼엔진에서 추가->입력에서 추가 할 수 있습니다. 입력액션은 각 파일 하나 마다 어떤 행동을 담당하는 식입니다. 
예를 들어 IA_Move 라는 입력액션은  Axis2D(Vector2D) 라는 값 타입을 가지는 입력액션입니다. 파일의 이름과 값 타입만 일단 설정하고 
이 입력이 어떤 행동을 할지를 이름으로 표현합니다. 값 타입은 여러 종류가 있는데 true false 를 표현할 Digital(bool), Axis1D(float), 
Axis2D(FVector2D), Axis3D 등이 있습니다. Aixs1D 는 앞과 뒤쪽을 float를 표현합니다. Axis2D는 앞뒤좌우 방향의 float 입니다. 
제가 추가할 입력은 상호작용키로 on/off 만 사용할 것이기 때문에 Digital(bool) 값 타입을 가진 입력액션을 만들면 됩니다. 

또 트리거 스테이트가 있는데 입력이 트리거 된 시점, 트리거 중간, 트리거를 땔때 와 같은 스테이트를 말합니다. 
상호작용의 경우는 눌림과 해제됨을 추가했습니다. 

입력 리스너 라고 하는 이 입력이 감지 되었을때 어떤 기능을 할지를 바인드 해주는 것이 있습니다. 
블루프린트와 C++ 둘다 가능한테 블루프린트는 만든 입력을 배치하고 노드를 이어서 기능을 연결하면 되고 
C++의 경우에는 InputComponent를 가져와 BindAction 함수를 통해 키와 콜백함수를 바인트 합니다. 

두번째 부품인 매핑 컨텍스트 가 뭐냐면 입력 액션들을 모아둔겁니다. 예를 들어 어떤 플레이어가 지상에 있을때, 운전을 할때, 수영을 할때 
각각 입력액션 세트가 다를텐데 이 한 뭉치를 매핑 컨텍스트라고 합니다. 
기존 매핑 컨텍스트에 상호작용 입력액션을 추가합니다. 
이 매핑에 추가할때 어떤 키와 입력액션을 매핑합니다. 이동을 WASD, 점프를 Spacebar, 시야를 마우스 XY 2D 축, 상호작용을 F 키로 매핑했습니다. 
향상된 입력 로컬 플레이어 서브시스템 을 통해 하나 이상의 매핑 컨텍스트를 로컬 플레이어에게 적용할 수 있다고 합니다. 

매핑 컨텍스트도 역시 블루프린트 말고 C++ 에서도 추가할 수 있습니다. 

	// 매핑 컨텍스트를 헤더 파일에 프로퍼티로 노출합니다...
	UPROPERTY(EditAnywhere, Category="Input")
	TSoftObjectPtr<UInputMappingContext> InputMapping;
	 
	 
	// cpp에서...
	if (ULocalPlayer* LocalPlayer = Cast<ULocalPlayer>(Player))
	{
		if (UEnhancedInputLocalPlayerSubsystem* InputSystem = LocalPlayer->GetSubsystem<UEnhancedInputLocalPlayerSubsystem>())
		{
			if (!InputMapping.IsNull())
			{
				InputSystem->AddMappingContext(InputMapping.LoadSynchronous(), Priority);
			}
		}
	}


다음 부품인 입력 모디파이어는 키보드나 게임패드 같은 입력장치에서 오는 원시 입력값을 입력 트리거로 변경하는 프리 프로세서입니다. 
입력 모디파이어는 민감도나 여러 프레임에 거쳐 입력을 스무딩하는 것에 유용합니다. 

이 기능은 아직 제 프로젝트에는 적용하지 않았습니다. 입력을 정교하게 깍아야 한다면 그때 추가하겠습니다. 

네번째 부품 입력 트리거는 매핑 컨텍스트내의 입력들과 실제 입력값들을 분석해 최소 발동값을 확인해 검증을 합니다. 
입력 트리거는 세가지 유형이 있습니다. 
명시(Explicit) : 입력 트리거가 성공하면 입력이 성공
암시(Implicit) : 입력 트리거와 모든 암시 유형 입력 트리거가 성공할때 입력성공
블로커(Blocker) : 입력 트리거가 성공하면 입력 실패

일단 Enhanced Input 은 이정도 알아보고 프로젝트에 어떻게 적용했냐면 
IA_Interacte 라는 입력 액션을 추가하고 Digital을 받아주고 트리거는 눌림 해제됨 두개를 만들었습니다. 
이 입력액션을 언리얼엔진의 Third Person 입력의 매핑컨텍스트 IMC_Default 에 추가합니다. 키보드 F 키와 매핑을 합니다. 
그리고 입력을 받는 객체인 BP_MyPlayer 의 입력 옵션에서 Interacte Action 에 IA_Interacte 를 바인드합니다. 

그러면 VS 로 가서 OR_MyPlayer.h 에서 

	/** Interacte Input Action */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = "true"))
	class UInputAction* InteracteAction;

이걸 추가해보면 VS 에서 1개의 청사진에서 변경됐다고 포착이 됩니다. 

그리고 OR_MyPlayer::SetPlayerInputComponent 멤버 함수에 Interate를 바인드 해줍니다. 

void AOR_MyPlayer::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	// Set up action bindings
	if (UEnhancedInputComponent* EnhancedInputComponent = CastChecked<UEnhancedInputComponent>(PlayerInputComponent)) {

		//Jumping
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Triggered, this, &ACharacter::Jump);
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Completed, this, &ACharacter::StopJumping);

		//Moving
		EnhancedInputComponent->BindAction(MoveAction, ETriggerEvent::Triggered, this, &AOR_MyPlayer::Move);
		EnhancedInputComponent->BindAction(MoveAction, ETriggerEvent::Completed, this, &AOR_MyPlayer::Move);

		//Looking
		EnhancedInputComponent->BindAction(LookAction, ETriggerEvent::Triggered, this, &AOR_MyPlayer::Look);

		//Interate
		EnhancedInputComponent->BindAction(InteracteAction, ETriggerEvent::Triggered, this, &AOR_MyPlayer::Interacte);
		EnhancedInputComponent->BindAction(InteracteAction, ETriggerEvent::Completed, this, &AOR_MyPlayer::Interacte);
	}

}

이러면 F 입력으로 AOR_MyPlayer::Interate 함수로 연결이 됩니다. 
AOR_MyPlayer::Interate 함수의 정확한 기능은 아직 구현하지 않았고 나중에 제대로 추가해줄겁니다. 

void AOR_MyPlayer::Interacte(const FInputActionValue& Value)
{
	bool bInteratePressed = Value.Get<bool>();

	if (Controller != nullptr)
	{
		if (bInteratePressed)
		{
			// Interate
			GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("Interacte Input Down...")));

		}
		else
		{
			// Stop Interate
			GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("Interacte Input Up...")));

		}
	}
}

이렇게 일단 로그만 찍어줘서 확인만 합니다. 
