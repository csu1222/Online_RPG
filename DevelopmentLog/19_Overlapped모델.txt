


Overlapped 모델은 실제 프로젝트에 사용하게될 모델입니다. 


그 전에 먼저 용어 정리부터 하겠습니다. 

블로킹 <-> 논블로킹

동기 <-> 비동기

이 4개의 용어를 정리하겠습니다. 

동기화 여부, 블로킹 여부를 합쳐서 한가지 함수의 방식으로 사용하게 됩니다. 예를 들어서 동기화-블로킹 방식, 비동기화-논블로킹 방식 이런식입니다. 

먼저 블로킹, 논블로킹에 대해 알아보겠습니다. 
이 둘의 차이는 제어권을 누가 가지느냐에 있습니다. 

블로킹 : A함수에서 B함수를 호출하면 B함수에 제어권이 넘어가 B함수가 완료되어 반환될때까지 A함수는 진행이 되지 않습니다. 
논블로킹 : A함수에서 B함수를 호출해도 A함수가 제어권을 가지고 자신의 코드를 진행한다 이때 B함수는 병렬적으로 실행됩니다. 이때 A함수에서 B 함수가 완료되었는지 아닌지를 모르는데 
        그래서 수시로 B함수가 완료되었는지를 체크하게 됩니다. 

그러면 동기, 비동기의 차이점을 알아보겠습니다. 
중요하게 봐야할 점은 안에서 호출한 함수의 완료 여부를 신경쓰는지 입니다. 

동기화 : A함수에서 B함수를 호출했을때 A함수에서 B함수의 리턴값이 바로 필요한 경우입니다. 그래서 B함수의 완료여부를 신경쓰면서 최대한 빨리 그 리턴을 기다립니다. 

비동기화 : A함수에서 B함수를 호출했어도 그 결과값이 바로 필요한것이 아니라서 완료 통지가 올때 까지 신경을 쓰지 않는 것입니다. 
        완료 통지는 어떻게 받냐면 비동기화 함수는 인자로 콜백함수도 같이 받아서 B 함수가 완료되었을때 콜백함수를 통해 A함수에 연락을 하게 됩니다.
        콜백함수 방식말고 완료통지를 받는 또 한가지 방법은 이벤트 객체를 사용해서 커널쪽에 완료 통지를 줘서 받는 방법이 있습니다. 
        


이런 용어들을 알아 봤는데 

이번에 알아볼 Overlapped 모델에서 사용할 입출력 함수 WSASend, WSARecv 함수들은 비동기 방식으로 동작하게 될것입니다. 


----- GameServer

enum
{
	BUF_SIZE = 1000
};

// 입출력에 필요한 데이터 들을 모아둠
struct Session
{
	SOCKET socket = INVALID_SOCKET;
	char recvBuffer[BUF_SIZE] = {};
	int32 recvByte = 0;
	int32 sendByte = 0;
	WSAOVERLAPPED overlapped = {};
};

int main()
{
	// winsock 초기화는 공통적인 부분
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");

	// 논블로킹 소켓 생성 

	// IPv4, TCP 소켓
	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET)
		return 0;

	// 논블로킹으로 설정
	u_long on = 1;
	if (::ioctlsocket(listenSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;

	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = ::htonl(INADDR_ANY);
	serverAddr.sin_port = ::htons(7777);

	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		return 0;


	if (::listen(listenSocket, SOMAXCONN) == SOCKET_ERROR)
		return 0;

	cout << "Accept" << endl;

	// Overlapped IO (비동기-논블로킹)
	// - Overlapped 함수를 건다 (WSARecv, WSASend)
	// - Overlapped 함수가 성공했는지 확인 후 
	// -> 성공했으면 결과 얻어서 처리
	// -> 실패했으면 사유를 확인 
	
	// WSASend,WSARecv
	{
		// 인자목록
		// 1) 비동기 입출력 소켓
		// 2) WSABUF 배열의 시작주소 
		// 3) WSABUF 배열의 갯수
		{
			// WSABUF의 사용례
			//char sendBuffer[100];
			//WSABUF wsaBuf[2];
			//wsaBuf[0].buf = sendBuffer;
			//wsaBuf[0].len = 100;

			//char sendBuffer2[100];
			//wsaBuf[1].buf = sendBuffer2;
			//wsaBuf[1].len = 100;

			// 왜 WSABUF의 시작주소와 갯수를 받냐면 
			// Scatter-Gather 기법때문 
			// 쪼개져있는 버퍼들을 한번에 모아서 보내주는 기법
			// 이후 패킷을 보낼때 한번에 뭉쳐서 보낼 수 있습니다. 
		}
		// 4) 보내고 받은 바이트의 수
		// 5) 상세한 옵션인데 일단 0으로 주면 됩니다. 
		// 6) WSAOVERLAPPED 구조체의 주소값
		{
			// WSAOVERLAPPED 는 무엇인가
			// 내부 상세한 데이터중 Handle hEvent 라는 멤버 변수가 있는데 이것에 집중해야합니다. 
			// 이 hEvent에 어떤 방식으로 통지받을지 넣어주는데 여기에 Event 객체를 넣어주면 Event 방식으로 완료 통지를 받게 될것
			// WSAOVERLAPPED wsaOverlapped;
		}
		// 7) 입출력이 완료되면 OS가 호출할 콜백함수 (현재 버전에서는 이것 대신 Event 객체 방식을 사용할것)

		// WSASend()
	}

	// 이번 실습 진행순서 
	// - 비동기 입출력 지원하는 소켓 생성 + 통지 받기위한 이벤트 객체 생성
	// - 비동기 입출력 함수 호출 (위에서 만든 이벤트 객체도 넘겨줌)
	// - 비동기 작업이 바로 완료되지 않으면 , WSA_IO_PENDING 오류코드 가 올것
	// - 비동기 작업이 나중에 완료되면 운영체제에서 이벤트 객체를 signaled 상태로 만들어 완료 상태 알려줌
	// - 이벤트 객체의 signaled 여부를 확인하기 위한 WSAWaitForMultipleEvents 함수 호출 
	// -  WSAGetOverlappedResult 함수를 호출해 비동기 입출력 함수의 결과 확인 및 데이터 처리

	// 실습 시작 
	while (true)
	{	
		// 먼저 클라이언트 소켓을 받는 accept 함수를 호출합니다. 
		SOCKADDR_IN clientAddr;
		int32 addrLen = sizeof(clientAddr);
		SOCKET clientSocket;
		while (true)
		{
			clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
			if (clientSocket != INVALID_SOCKET)
				break;

			long acceptErrorCode = ::WSAGetLastError();
			if (acceptErrorCode == WSAEWOULDBLOCK)
				continue;

			cout << "accept Error Code : " << acceptErrorCode << endl;
			return 0;
		}

		// Session 구조체에서 WSAOVERLAPPED 멤버 변수를 추가했습니다. 
		Session session = Session{ clientSocket };
		// 위에서 할일중 하나인 완료통지를 받을 WSAEvent 객체를 만들어 Session의 멤버 변수 overlapped 에 세팅
		WSAEVENT wsaEvent = ::WSACreateEvent();
		session.overlapped.hEvent = wsaEvent;

		cout << "Client Accept" << endl;

		// 이제 클라이언트로부터 받은 데이터를 처리합니다. 
		while (true)
		{
			// 비동기-논블로킹 함수인 WSARecv 필요한 인자들을 만들어 넘겨줍니다. 
			WSABUF wsaBuf;
			wsaBuf.buf = session.recvBuffer;	// 이 session.recvBuffer 가 메모리 해제되지 안도록 해야합니다. 
			wsaBuf.len = BUF_SIZE;

			DWORD recvLen = 0;
			DWORD flags = 0;

			// 비동기-논블로킹 함수다 보니 함수를 호출하자마자 빠져나오기는합니다. 
			if (::WSARecv(clientSocket, &wsaBuf, 1, &recvLen, &flags, &session.overlapped, nullptr) == SOCKET_ERROR)
			{
				// 아직 데이터가 안왔으니 Pending 상태 
				// 완료통지를 받습니다.
				if (::WSAGetLastError() == WSA_IO_PENDING)
				{
					// Pending 중이면 이벤트를 통해 완료 통지를 기다립니다. 
					::WSAWaitForMultipleEvents(1, &wsaEvent, TRUE, WSA_INFINITE, FALSE);
					// 빠져나왔다면 어떤 네트워크 이벤트인지 체크 
					::WSAGetOverlappedResult(session.socket, &session.overlapped, &recvLen, FALSE, &flags);
				}
				else
				{
					// TODO : 문제상황 
					break;
				}
			}

			// 빠져나왔다면 WSARecv 가 성공했습니다. 
			cout << "Data Recv Len : " << recvLen << endl;
		}
		// 끝났다면 정리 
		closesocket(clientSocket);
		::WSACloseEvent(wsaEvent);
	}

	// winsock 종료
	::WSACleanup();
}



그리고 이번에는 클라이언트 쪽도 비동기-논블로킹 입출력함수인 WSASend 를 실습해보겠습니다. 

----- DummyClient


int main()
{
	this_thread::sleep_for(1s);

	// winsock 라이브러리 초기화  (ws2_32 라이브러리 초기화)
	// WORD 타입 윈속 버전과 윈속을 초기화 한 후의 데이터를 받아줄 WSAData 의 주소 
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		/* Tell the user that we could not find a usable */
		/* Winsock DLL.                                  */
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		/* Tell the user that we could not find a usable */
		/* WinSock DLL.                                  */
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");


	// IPv4, TCP 소켓
	SOCKET clientSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (clientSocket == INVALID_SOCKET)
		return 0;

	// 논블로킹으로 설정
	u_long on = 1;
	if (::ioctlsocket(clientSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;

	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	::inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);
	serverAddr.sin_port = ::htons(7777);

	// Connect
	while (true)
	{
		if (::connect(clientSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		{
			if (::WSAGetLastError() == WSAEWOULDBLOCK)
				continue;
			// connect는 WSAEISCONN 연결된 상태라면 브레이크 
			if (::WSAGetLastError() == WSAEISCONN)
				break;

			// Error
			break;
		}
	}

	cout << "Connected To Server" << endl;

	char sendBuffer[100] = "Hello World";
	// WSAEVENT 객체 생성 
	WSAEVENT wsaEvent = ::WSACreateEvent();
	WSAOVERLAPPED overlapped = {};
	overlapped.hEvent = wsaEvent;

	// Send
	while (true)
	{
		// 비동기-논블로킹 함수인 WSASend 필요한 인자들을 만들어 넘겨줍니다. 
		WSABUF wsaBuf;
		wsaBuf.buf = sendBuffer;
		wsaBuf.len = 100;

		DWORD sendLen = 0;
		DWORD flags = 0;

		// 비동기-논블로킹 함수다 보니 함수를 호출하자마자 빠져나오기는합니다. 
		if (::WSASend(clientSocket, &wsaBuf, 1, &sendLen, flags, &overlapped, nullptr) == SOCKET_ERROR)
		{
			// 아직 데이터가 안왔으니 Pending 상태 
			// 완료통지를 받습니다.
			if (::WSAGetLastError() == WSA_IO_PENDING)
			{
				// Pending 중이면 이벤트를 통해 완료 통지를 기다립니다. 
				::WSAWaitForMultipleEvents(1, &wsaEvent, TRUE, WSA_INFINITE, FALSE);
				// 빠져나왔다면 어떤 네트워크 이벤트인지 체크 
				::WSAGetOverlappedResult(clientSocket, &overlapped, &sendLen, FALSE, &flags);
			}
			else
			{
				// TODO : 문제상황 
				break;
			}
		}

		// 빠져나왔다면 WSARecv 가 성공했습니다. 
		cout << "Send Len : " << sendLen << endl;

		this_thread::sleep_for(10ms);
	}

	// 소켓 리소스 반환 
	::closesocket(clientSocket);
	
	// winsock 종료
	::WSACleanup();
}


Overlapped 모델을 알아보면 이전 Select, WSAEVentSelect 모델처럼 하나의 함수에 64개의 소켓밖에 처리 못하는것보다는 클라이언트마다 세션은 만들고 그 갯수를 넣으면되기 때문에 
더 낫기는 하지만 아직 부족합니다. 


############################################

Overlapped 콜백함수 버전 

위에서는 이벤트 버전을 실습 해봤는데 
이번에는 콜백함수 버전을 실습해보겠습니다. 

이벤트 버전의 Overlapped 모델은 
비동기화 소켓과 이벤트 객체를 준비하고 WSAOVERLAPPED 객체의 멤버 변수인 hEvent 에 준비한 이벤트를 저장한 다음 
비동기-논블로킹 입출력함수인 WSARecv, WSASend 를 사용하는 방식이었습니다. 이러면 이 비동기 논블로킹 입출력함수들이 알아서 코드를 진행하고 작업이 완료되었으면 
WSAOVERLAPPED 객체에 담긴 이벤트 객체를 signaled 상태로 만들고 이 시그널을 WSAWaitForMultipleEvents 로 기다려 완료통지를 받고 
WSAGetOverlappedResult 로 결과물을 받아 데이터를 처리했습니다.

콜백함수 버전은 이벤트 객체 대신 비동기 논블로킹 입출력 함수가 완료되면 콜백함수로 알려달라고 하는 방식입니다. 
이 방식이 이후 가장 중요하게 사용할 IOCP 방식과 밀접한 연관이 있습니다. 


enum
{
	BUF_SIZE = 1000
};

// 입출력에 필요한 데이터 들을 모아둠
struct Session
{
	SOCKET socket = INVALID_SOCKET;
	char recvBuffer[BUF_SIZE] = {};
	int32 recvByte = 0;
	int32 sendByte = 0;
	WSAOVERLAPPED overlapped = {};
};

// 완료 루틴 함수 
void CALLBACK RecvCallback(DWORD error, DWORD recvLen, LPWSAOVERLAPPED overlapped, DWORD flags)
{
	// TODO 

	cout << "Data Recv Len Callback = " << recvLen << endl;

	// 만약 에코 서버를 만든다면 여기서 WSASend 호출 
}

int main()
{
	// winsock 초기화는 공통적인 부분
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");

	// 논블로킹 소켓 생성 

	// IPv4, TCP 소켓
	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET)
		return 0;

	// 논블로킹으로 설정
	u_long on = 1;
	if (::ioctlsocket(listenSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;

	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = ::htonl(INADDR_ANY);
	serverAddr.sin_port = ::htons(7777);

	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		return 0;


	if (::listen(listenSocket, SOMAXCONN) == SOCKET_ERROR)
		return 0;

	cout << "Accept" << endl;


	// Overlapped 모델 (Completion Routine 콜백 기반) 이번 실습 진행순서 
	// - 비동기 입출력 지원하는 소켓 생성 , 콜백을 위한 함수(완료 루틴)를 만듬
	// - 비동기 입출력 함수 호출 (완료 루틴의 시작주소를 넘겨줌)
	// - 비동기 작업이 바로 완료되지 않으면 , WSA_IO_PENDING 오류코드 가 올것
	// - 비동기 입출력 함수 호출한 쓰레드가 완료루틴을 받을 상태라면 -> Alertable Wait 함수로 만듭니다. 
	//  ex) WaitForSingleObjectEx, WaitForMultipleObjectEx, SleepEx, WSAWaitForMultipleEvents 등으로 Alertable Wait 상태로 만듬
	// - 비동기 작업이 나중에 완료되고 비동기 입출력 함수를 호출한 쓰레드가 Alertable Wait 상태라면 
	//		운영체제에서 완료루틴 호출 그런데 이 완료 루틴 호출 시점이 문제 
	// - 완료 루틴 호출이 모두 끝나면, 쓰레드는 Alertable Wait 상태에서 빠져나온다

	// 실습 시작 
	while (true)
	{	
		// 먼저 클라이언트 소켓을 받는 accept 함수를 호출합니다. 
		SOCKADDR_IN clientAddr;
		int32 addrLen = sizeof(clientAddr);
		SOCKET clientSocket;
		while (true)
		{
			clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
			if (clientSocket != INVALID_SOCKET)
				break;

			long acceptErrorCode = ::WSAGetLastError();
			if (acceptErrorCode == WSAEWOULDBLOCK)
				continue;

			cout << "accept Error Code : " << acceptErrorCode << endl;
			return 0;
		}

		// Session 구조체에서 WSAOVERLAPPED 멤버 변수를 추가했습니다. 
		Session session = Session{ clientSocket };
		WSAEVENT wsaEvent = ::WSACreateEvent();
		// WSAOVERLAPPED 객체에 이벤트를 연동하는 부분이 없어집니다. 
		// session.overlapped.hEvent = wsaEvent;

		cout << "Client Accept" << endl;

		// 이제 클라이언트로부터 받은 데이터를 처리합니다. 
		while (true)
		{
			// 비동기-논블로킹 함수인 WSARecv 필요한 인자들을 만들어 넘겨줍니다. 
			WSABUF wsaBuf;
			wsaBuf.buf = session.recvBuffer;	// 이 session.recvBuffer 가 메모리 해제되지 안도록 해야합니다. 
			wsaBuf.len = BUF_SIZE;

			DWORD recvLen = 0;
			DWORD flags = 0;

			// WSARecv의 마지막 인자에 콜백함수를 넣어줄겁니다. 
			//void
			//(CALLBACK * LPWSAOVERLAPPED_COMPLETION_ROUTINE)(
			//	IN DWORD dwError,
			//	IN DWORD cbTransferred,
			//	IN LPWSAOVERLAPPED lpOverlapped,
			//	IN DWORD dwFlags
			//	);
			//  이런 시그니처의 함수를 받아주고 있습니다. 
			if (::WSARecv(clientSocket, &wsaBuf, 1, &recvLen, &flags, &session.overlapped, RecvCallback) == SOCKET_ERROR)
			{
				// 아직 데이터가 안왔으니 Pending 상태 
				if (::WSAGetLastError() == WSA_IO_PENDING)
				{
					// Pending 중이면 쓰레드를 Alertable Wait 상태로 바꿔 줘야 합니다. 
					::SleepEx(INFINITE, TRUE);
					// 빠져나왔다면 어떤 네트워크 이벤트인지 체크 
					//::WSAGetOverlappedResult(session.socket, &session.overlapped, &recvLen, FALSE, &flags);
				}
				else
				{
					// TODO : 문제상황 
					break;
				}
			}
			else
			{
				cout << "Data Recv Len : " << recvLen << endl;
			}

		}
		// 끝났다면 정리 
		closesocket(clientSocket);
		::WSACloseEvent(wsaEvent);
	}

	// winsock 종료
	::WSACleanup();
}

이런방식입니다. 이 원리를 좀 더 알아보면 쓰레드마다 APC 큐 라는 메모리가 있는데 WSARecv다 실행한 후의 RecvCallback 가 이 APC 큐에 들어옵니다. 
이후 SleepEx 나 다른 Alertable Wait 상태로 들어올수 있는 함수가 실행되면 그동안 APC 큐에 쌓인 일감들을 모두 처리하고 다음으로 진행을 하게 됩니다.
만약 여러 콜백함수가 APC 큐에 들어와있다면 Alertable Wait 상태를 각각 한번씩 진입해야하는것이 아닌 한번 진입하면 쌓인 콜백함수를 모두 소모하고 빠져나옵니다. 


이벤트 방식과 콜백 방식의 차이점을 알아보겠습니다. 
이벤트 방식의 연동에서는 소켓 하나당 이벤트 객체를 하나씩 연동시켜줘서 사용했어야 합니다. 콜백함수 방식에서는 한번에 다수의 클라이언트(WSARecv 의 한계인 64개까지)
의 콜백함수를 ACP 큐에 쌓아두고 Alertable Wait 전환을 한번만 해도 일을 처리할 수 있습니다. 클라 갯수가 64개가 넘어가면 쓰레드를 늘려서 어떻게든 사용한다던가 하면 될것입니다. 

그리고 또 한가지 콜백 방식에서는 이코드에서는 RecvCallback 이라는 이름의 완료루틴 함수를 WSARecv 가 완료되면 ACP 큐에 넣어주고 있는데 
RecvCallback 의 인자에서도 이 함수와 연동된 세션이 어디 소속인지를 알수 있는 방법은 WSAOVERLAPPED 타입 인자 밖에 없습니다. 
그런데 이 WSAOVERLAPPED 코드를 열어보면 운영체제에서 사용할 데이터 말고는 hEvent 밖에 없는데 이것도 콜백 방식에서는 사용하지 않습니다. 
어떻게 어느 클라이언트 소켓 대상으로 콜백이 호출되었는지 알 수 있을까요 WSARecv 의 인자로 6번째 WSAOVERLAPPED 를 넘겨줄때 Session 의 멤버 함수인 overlapped 를 넘겨주고 있습니다. 
이 overlapped 가 Session 의 첫번째 멤버 변수이기때문에 이 overlapped 의 첫 주소가 Session 의 시작주소가 됩니다. 
그래서 RecvCallback 에 넘겨준 overlapped 는 바로 Session 타입으로 캐스팅할 수 있습니다. 그래서 이 콜백 함수에서 세션을 복원해 사용할 수 있습니다. 


---------------

요약을 해보겠습니다. 

지금껏 알아본 입출력 모델은 

Select 모델
	- 장점) 윈도우 / 리눅스 공통	(리눅스 가능은 큰 장점이 될 수 있슴, 윈도우 PC 이외의 안드로이드 환경 같은 곳의 클라이언트에서 사용가능)
	- 단점) 성능 최하 (매번 소켓세트 등록), 64개 제한
WSAEventSelect 모델
	- 장점) 비교적 단순 나은 성능
	- 단점) 64개 제한
Overlapped(이벤트 기반)
	- 장점) 성능
	- 단점) 64제한
Overlapped(콜백 기반)
	- 장점) 성능
	- 단점) 64 제한, 모든 비동기 소켓 함수에서 사용할 수는 없습니다. (ex. AcceptEx 에는 콜백함수 파라미터가 없다.) , Alertable Wait 를 빈번히 하는것도 성능상 불이익, ACP 큐도 일감을 쓰레드에 할당하는것이다 보니
	멀티스레드적으로 처리 불가능 
이렇게 알아 봤었습니다. 

여기에 더해서 WSAAsyncSelect 모델이라는것이 있습니다. 이 모델은 소켓 이벤트를 윈도우 메세지형태로 처리합니다. 모든 윈도우의 입력들도 윈도우 메세지로 처리가 됩니다. 
그러다 보니 네트워크 입출력 뿐만 아니라 다른 메세지도 같이 처리해야 해서 성능상으로 불이익이 있다고합니다. 

여기까지 배운 모델들 말고 왜 IOCP 모델로 가야하는가도 궁금할 수 있습니다. 


추가로 용어를 하나 더 알아가면 

Reactor Pattern (~뒤늦게)
	- 논블로킹소켓, 소켓 상태 확인 후 -> 뒤늦게 recv, send 호출 
Proactor Pattern (~미리)
	- Overlapped, WSA~ 계열 함수로 미이 입출력 함수를 호출해 두는것