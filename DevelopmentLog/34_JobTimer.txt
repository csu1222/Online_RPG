


지난 코드에서 한가지 수정사항이 있습니다. 
shared_ptr을 활용하기 시작했는데 참조 카운트를 사용하기 때문에 유효하지 않은 메모리를 건드리거나 댕글링포인터를 방지할 수 있습니다.
대신에 참조카운트가 0이 되지 않는 경우가 생겨 메모리 릭이 발생할 수 있습니다. 

메모리 릭과 댕글링 포인터중 뭐가 더 위험한지는 선택인데 보통은 shared_ptr을 사용하는 쪽을 선택할겁니다. 

그래서 shared_ptr를 사용하면서 지금 코드에서 메모리 릭이 발생하고 있다는건데 어느 부분이냐면 이전에 GameSession 클래스의 소멸자에서 ~GameSession 이라는 
로그를 찍도록 했었는데 언제부턴가 이 로그가 찍히지 않았습니다. 이게 메모리 릭이 일어나고 있다는것입니다. 
지금은 코드량이 많지 않다보니 어디서 릭이 일어나는지 알 수 있습니다. 

Gamesession 이 어디선가 순환 참조를 하면서 릭이 나는건데 GameSession 이 PlayerRef를 Vector 로 들고 있고 
또 Player 클래스를 보면 자기자신의 owner 인 GameSession을 shared_ptr로 들고 있어서 순환 사이클이 생깁니다. 

GameSession::OnDisConnected 에서 연결이 끊겼을때 GGameSessionManager.Remove 로 자기자신을 지우고 있는데 PlayerRef는 삭제해주고 있지 않기 때문에 GmaeSession의 참조카운터가 
0이 되지 않습니다. 
거기에 Player도 Room 에서도 들고 있도록 했는데 여기도 빠져나오도록 해줘야합니다. 

어딜 수정해야할지 코드 흐름을 다시 집어보자면 서버를 띄우고 클라이언트가 접속하면서 C_LOGIN 패킷을 보내고 플레이어의 데이터를 생성하던지 DB 에서 가져오던지 해서 
C_ENTER_GAME 패킷으로 게임에 접속할 캐릭터를 골라 보내면 해당 캐릭터가 게임의 Room에 입장합니다. 
이때 Room에서 Player의 참조카운트를 늘리게 되는데 나중에 Room에서 나갈때 이 참조 카운트를 줄여줘야합니다. 
그러기 위해서 GameSession 에서 어떤 플레이어가 어떤 룸에 들어가있는지를 알면 그걸로 Room에서 플레이어를 꺼내줄 수 있을겁니다. 

GameSession 에서 _currentPlayer 라는 PalyerRef 를 변수로 들고 있어서 현재 접속중인 플레이어를 가지고 있고 weak_ptr 로 Room 을 하나 잡고 있을겁니다. weak_ptr 로 가지고 있어야 사이클이 안일어 날겁니다. 
    그러면 ClientPacketHandler::Handle_C_ENTER_GAME 에서 플레이어가 게임에 들어갈때 _currentPlayer 와 _room 을 채워주도록 합니다. 
    이렇게 들고 있다라 GameSession::OnDisConnected 에서 연결을 끊을때 이것을 가지고 룸에서 퇴장을 시켜야 겠습니다. 


------------------------


다시 돌아와서 JobTimer 에 대한 작업을 할건데 

Job을 만들고 DoAsync 함수를 통해 Job을 JobQueue에 넣고 가장 먼저 Push 하거나 다른 JobQueue를 작업하고 있지 않은 쓰레드를 일정 시간동안 Job 을 처리하도록 했습니다. 
이 작업을 할때 서버에서는 어떤 스킬을 쓰건 아니면 어떤 AI 코드건 무한대로 루프를 돌면서 실행하는 경우는 많이 없습니다. 
클라이언트야 계속 루프를 돌면서 렌더링을 해야하기 때문에 모든 성능을 처리에 사용하겠지만 서버에서는 클라이언트 처럼 성능을 콘텐츠에 모두 쏟을 이유가 없습니다. 

그래서 서버에서 1초에 한번씩 AI 계산을 한다고 하면 1초의 쿨타임을 계산하기 위해 예전에는 GetTickCount 같은 함수로 틱 카운트를 가져와 계산을 하는데 
이것도 while 루프를 돌면서 현재 틱을 체크하는 방식입니다. 이 루프에도 성능을 사용하기에는 MMORPG 게임 서버는 그렇게 하기 어렵습니다. 

결론적으로 서버에서 이런 1초 쿨타임을 재기위해서는 일종의 예약 시스템이 필요한데 이 것이 JobTimer 가 될겁니다. 

지금까지는 Job을 DoAsync로 Push 할때 그때 그때 필요할때 즉흥적으로 밀어 넣었습니다. 
그런데 이제 다른 케이스로 일감을 넣는걸 예약해야한다면 일감들을 예약하고 1초마다 처리를 한다고 할때 사용합니다. 

사용할 방법은 중앙 통제를 하는 방식입니다. 
JobTimer 를 통해 푸시 하기 전에 필요한 일감들 Job 을 예약하는 컨테이너가 있을겁니다. 이 컨테이너에 모이는 Job 들은 전체 코드에서 모이는 일감들일 테니까 
중앙에서 모아 처리하는 방식을 사용할겁니다. 

JobTimer 라는 클래스파일과 헤더를 만들고 두가지 구조체를 만들건데 JobData 라는 구조체는 JobRef와 이 잡이 속하는 JobQueue를 weak_ptr 로 들고 있을겁니다. 
그리고 TimerItem 구조체는 uint64 타입의 Tick 을 들고 있을거고 거기에 JobData를 들고 있을겁니다.
거기에 < 연산자 오버로딩을 선언해서 자신의 Tick 값과 인자로 받은 다른 TimerItem 의 Tick 값을 비교합니다. 

이제 JobTimer 클래스를 만들면 되는데 멤버 변수로 일단 락을 사용할 것이고 TimerItem 들을 우선순위 큐로 들고 있을것이고 아토믹 타입 불리언으로 한번에 한개의 스레드만 일감 분배를 
맡을것이라는 변수 _distributing 을 들고 있을겁니다. 
멤버 함수는 예약 Reserve, TimerItem 들의 우선순위 큐에 들어 있는 일감을 배분해주는 Distribute, 비우는 Clear 도 만들겁니다. 

JobTimer 는 서버 전체에서 하나 전역으로 들고 사용할겁니다. 
Reserve 에서는 인자로 몇초뒤에 실행할지, 분배할 Job들이 어느 JobQueue에 있었는지, Job 그 자체를 받을겁니다. 
현제 Tick 값에 몇초 뒤에 실행할지 더해 실행할 Tick 값을 만들고 JobQueue와 Job 을 가지고 JobData를 만듭니다. 만든 JobData를 TimerItem 로 만들어 TimerItem 의 우선순위 큐 _items에 넣습니다. 
_items 에 push 하는 동작은 쓰레드 세이프 하지 않기 때문에 락을 걸고 진행합니다. 

Distribute 함수에서는 일단 한번에 한 쓰레드만 작업하도록 아까 아토믹 불리언 _distributing 을 exchange 와 if 문으로 거릅니다. 
임시로 TimerItem의 벡터를 만들고 이 임시 벡터로 _items 의 내용물들을 담아주는데 이때 현재  Tick 값과 실행틱을 비교해 그 전까지 동작하도록 합니다. 
임시벡터에 담은 내용물들을 각자의 JobQueue에 Job들을 Push 해줍니다. 

Clear 함수는 _items 를 순회하며 텅 빌때 까지 아이템들을 꺼내는 함수입니다. 


위에서 JobQueue에 Job 들을 Push 함수를 호출하는데 이부분이 에러가 납니다. private 로 닫아 놨기 때문인데 public 으로 열겠습니다. 
거기에 이전에 Push에 넘겨주는 JobRef를 보편참조로 넘겨줬는데 그냥 shared_ptr로 넘겨주도록 수정하겠습니다. 
또 한가지 Push에 수정할 것은 bool 인자를 하나 더 넘겨주면서 기본값은 false로 합니다. 그리고 이 값에 따라 Execute 까지 할지 않할지 정할겁니다. 
왜 이러냐면 이제는 매 틱 push 한 job 을 다 execute 하는게 아니라 globalqueue 에 넣고 JobTimer 에 따라 실행을 해줄것입니다. 

이 코드를 어떻게 사용할거냐면 CoreGlobal에서 전역객체를 만들어 줍니다. 
그리고 전역 JobTimer 를 어떻게 사용할거냐면 JobQueue 에서 DoAsync 로 바로 Push 하고 있는데 이거 대신 DoTimer 라는 함수로 타이머를 사용해 job을 처리하도록 합니다. 


테스트 코드를 만들어 보자면 GameServer.cpp 에서 쓰레드들에게 DoWorkerJob 이라는 함수를 일감으로 줬습니다. 
여기서 LEndTickCount 와 IocpCore->Dispatch, DoGlobalQueueWork 를 해주고 있었는데 이제 JobTimer를 사용하는 함수도 만들건데 ThreadManager에 만들겁니다. 
JobTimer 의 Distribute 하는 함수를 하나 만들어주고 DoGlobalQueueWork 전에 호출해줍니다. 


