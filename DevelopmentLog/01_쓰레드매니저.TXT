

쓰레드 매니저를 추가하겠습니다. 

그 전에 자주 사용할 내용을 ServerCore 프로젝트 Types.h 에 추가합니다. 

----- ServerCore
---- Types.h

#pragma once
#include <mutex>    // 추가
#include <atomic>   // 추가

using BYTE = unsigned char;
using int8 = __int8;
using int16 = __int16;
using int32 = __int32;
using int64 = __int64;
using uint8 = unsigned __int8;
using uint16 = unsigned __int16;
using uint32 = unsigned __int32;
using uint64 = unsigned __int64;

template<typename T>                    // 이 아래로 추가
using Atomic = std::atomic<T>;
using Mutex = std::mutex;
using CondVar = std::condition_variable;
using UniqueLock = std::unique_lock<std::mutex>;
using LockGuard = std::lock_guard<std::mutex>;

그리고 또 ServerCore 프로젝트에 새로 몇가지 클래스추가를 합니다. 
CoreGlobal 이라는 전역으로 사용할만한 것들, CoreTLS 라고 말그대로 TLS를 구상할 클래스
그리고 항목추가로 CoreMacro.h 라는 헤더만 하나더 추가해줍니다. 

---- CorePch
--- 헤더
#pragma once

#include "Types.h"
#include "CoreTLS.h"
#include "CoreMacro.h"
#include "CoreGlobal.h"

#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>

#include <iostream>
using namespace std;


추가한 헤더들을 CorePch.h 에 추가해줘야하는데 
Types 헤더를 추가한 아래로 포함시켜주겠습니다. 


---- CoreTLS 
--- 헤더 
#pragma once

extern thread_local uint32 LThreadId;

--- cpp
#include "pch.h"
#include "CoreTLS.h"

thread_local uint32 LThreadId = 0;

먼저 쓰레드각각의 로컬 저장소인 TLS입니다. 
일단 쓰레드의 아이디를 직접 부여하도록 LThreadId 를 만들었습니다.
이 부분은 앞으로 필요할때마다 점점 추가하면됩니다. 


---- CoreMacro
---헤더
#pragma once

/*
		Crash 임의로 크래시를 내고싶을때 
*/

#define CRASH(cause)										\
{															\
	uint32* crash = nullptr;								\
	__analysis_assume(crash != nullptr);					\
	*crash = 0xDEADBEEF;									\
}															

/*
		ASSERT_CRASH 인자의 조건이 거짓이라면 크래시를 냅니다.
*/
#define ASSERT_CRASH(expr)									\
{															\
	if (!(expr))											\
	{														\
		CRASH("ASSERT_CRASH");								\
		__analysis_assume(expr);							\
	}														\
}														

CoreMacro 에서는 서버코어에서 자주사용할 매크로들을 만들어 놨습니다.
CRASH 매크로는 일부러 크래시를 내고 싶을때 사용하고 이 CRASH 를 활용해 조건을 체크해 거짓이라면 크래시를 내는 ASSERT_CRASH 매크로도 만들었습니다. 


---- CoreGlobal
--- 헤더
#pragma once

extern class ThreadManager* GThreadManager;

class CoreGlobal
{
public:
	CoreGlobal();
	~CoreGlobal();
};


--- cpp
#include "pch.h"
#include "CoreGlobal.h"
#include "ThreadManager.h"

ThreadManager* GThreadManager = nullptr;

CoreGlobal::CoreGlobal()
{
	GThreadManager = new ThreadManager();
}

CoreGlobal::~CoreGlobal()
{
	delete GThreadManager;
}


전역으로 사용할 클래스들을 이곳에서 관리할것입니다. 
지금은 ThreadManager 한개 뿐이지만 나중에 전역으로 관리할 클래스가 많아지면 생성순서와 소멸순서를 여기서 맞춰줄 수 있을겁니다.

---- ThreadManager
--- 헤더 
#pragma once
#include <thread>
#include <functional>

class ThreadManager
{
public:
	ThreadManager();
	~ThreadManager();

	void Launch(function<void(void)> callback);
	void Join();

	static void InitTLS();
	static void DestroyTLS();

private:
	Mutex			_lock;
	vector<thread>	_threads;
};

기본적으로 쓰레드매니저에서는 쓰레드와 콜백함수를 사용하기 위한 functional 라이브러리르 추가합니다. 멤버 변수는 Mutex _lock과 쓰레드들의 벡터인 _threads 를 들고 있을겁니다. 

멤버 함수는 기본적인 생성자, 소멸자, 쓰레드들을 생성하는 Launch, 쓰레드들의 join을 관리해줄 Join, TLS를 초기화 하는 InitTLS, 쓰레드가 소멸할때 TLS를 삭제할 
DestroyTLS 를 가지고 있을겁니다. 
--- cpp
#include "pch.h"
#include "ThreadManager.h"
#include "CoreTLS.h"        // CoreTLS 와 CoreGlobal 을 추가
#include "CoreGlobal.h"

ThreadManager::ThreadManager()      // 메인 쓰레드의 초기화
{
	// Main Thread
	InitTLS();              
}

ThreadManager::~ThreadManager()     // 쓰레드 매니저가 소멸할때 join을 하고 소멸
{
	Join();
}

void ThreadManager::Launch(function<void(void)> callback)
{
    // 락가드를 잡고 쓰레드를 _threads 에 밀어 넣고 있는데 이전 실습과 다른점은 시작할때 초기화와 끝날때 소멸을 해준다 
	LockGuard guard(_lock);

	_threads.push_back(thread([=]()
		{
			InitTLS();
			callback();
			DestroyTLS();
		}));
}

void ThreadManager::Join()
{
    // _threads 를 순회해 조인할수 있는 스레드들을 모두 조인후 _threads 를 비웁니다. 
	for (thread& t : _threads)
	{
		if (t.joinable())
			t.join();
	}

	_threads.clear();
}

void ThreadManager::InitTLS()
{
    // 지금은 별 다른 초기화 거리는 없고 전역 아토믹 uint32 SThreadId 를 1씩 증가하면서 아이디를 발급합니다.
	static Atomic<uint32> SThreadId = 1;

	LThreadId = SThreadId.fetch_add(1);
}

void ThreadManager::DestroyTLS()
{
    // 지금은 여기서 따로 소멸시킬데이터가 없지만 나중에 TLS에 동적할당하는 데이터가 생기면 여기서 소멸시킬것
}


이렇게 만든 쓰레드매니저를 싱글톤패턴으로 관리 할 수도 있겠지만 서버 엔진에서 게임서버에서 사용할 쓰레드들도 한번에 관리할 수 있으면 좋겠습니다.



쓰레드매니저를 만들어 보고 또 전역으로 관리할 수 있게끔 만들었습니다.

이것을 게임서버에서 사용한다고 하면 
----- GameServer
---- GameServer
--- cpp
#include "pch.h"
#include <iostream>
#include "CorePch.h"
#include <thread>
#include <atomic>
#include <mutex>
#include <windows.h>
#include <future>


// ThreadManager

#include "CoreMacro.h"
#include "ThreadManager.h"

CoreGlobal Core;

void ThreadMain()
{
	while (true)
	{
		cout << "Hello I am Thread ... : " << LThreadId << endl;
		this_thread::sleep_for(1s);
	}
}
int main()
{
	for (int32 i = 0; i < 5; i++)
	{
		GThreadManager->Launch(ThreadMain);
	}

	GThreadManager->Join();
}

이런식으로 사용하면 될겁니다. 기존에 배웠던 내용들을 사용하기 편하게 랩핑해 본 시간이었습니다.