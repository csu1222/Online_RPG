

실제로 스마트포인터를 대체할 상위 클래스에 참조 카운팅을 사용하는방법을 채용한 프로젝트들이 꽤 있다고 합니다. 

그래도 역시 항상 좋은 점만 있는것은 아닐것이기 때문에 상속 클래스에서 참조 카운트를 사용하는 방법의 단점을 알아보겠습니다. 


1. 이미 만들어진 클래스 대상으로는 사용이 불가하다 
    클래스의 상속 관계를 활용한 참조 카운트 이다보니 따로 만들어진 클래스는 이 방식이 사용불가능합니다. 
    다른 클래스마저 이 상속 관계아래로 넣으면 되지 않을까 싶지만 프로그램을 만들때 모든 코드를 직접만드는것은 쉽지 않고 다른 라이브러리를 가져와 사용해야할텐데 
    그 중에는 코드를 마음대로 수정할 수 없는 라이브러리도 있을겁니다. 이런 상황에서 사용하기 어렵습니다. 

2. 순환(Cycle) 문제가 있습니다. 
    상속 관계의 자식 클래스 객체끼리 서로를 참조해야한다면 서로 자신과 상대가 참조하기 때문에 참조카운트가 0이 되지 않습니다. 스스로 소멸하려고 해도 상대가 나를 참조하고 있기 때문에 
    참조 카운트가 남아서 소멸자가 호출되지 않습니다. 락끼리의 데드락상황과 비슷합니다. 

그런데 이런 문제는 표준 shared_ptr 에서도 나타나는 문제입니다. 

이런 문제를 해결하기 위해 3종의 스마트포인터를 잘 사용해야합니다. 

unique_ptr : 유니크 포인터는 그냥 생 포인터와 거의 차이가 없을텐데 유일하게 다른점은 복사 연산자를 막아두어서 이 포인터는 딱 하나만 존재할 수 있습니다.
            만약 다른 포인터변수로 정 넘기고 싶으몬 std::move 를 통해 모든 소유권을 넘겨야합니다. 거기에 추가로 생명주기가 끝나면 객체를 삭제해주는 기본적인 스마트 포인터 특성도 가지고 있습니다.

shared_ptr : 직점 상속관계에서 참조 카운트를 하는 방식과 다르게 이 쉐어드 포인터를 사용하면 상속관계상관없이 사용할 수 있습니다. 
            코드를 들어가보면 안에서 두가지 포인터를 같이 관리하고 있습니다. 실제 데이터를 가리키는 포인터와 _Ref_count_base 포인터로 실제 데이터와 상관없는 참조 카운트 베이스 포인처로 
            참조 카운트를 관리하고 있는겁니다. 
            쉐어드 포인터를 생성하는 방법은 두가지 있습니다. 
            shared_ptr<Knight> spr(new Knight());   이런 방법과 
            shared_ptr<Knight> spr = make_shared<Knight>();   이런 방법이 있습니다. 
            이 두 방법의 차이는 위의 방법은 Knight 객체 포인터와 참조 카운트 베이스 포인터를 두개로 나누어 가지고 있게 되는것이고 
            make_shared 방법은 내부적으로 Knight 데이터와 참조 카운트 베이스를 한번에 가지고 있게 되는것입니다. 
            그래서 메모리 할당을 할때 두번 할당을 하는지 한번에 할당을 하는지의 차이입니다.

weak_ptr : 이 위크 포인터를 사용하면 순환문제를 해결할 수 있습니다. 그렇지만 순환문제를 꼭 위크 포인터를 가지고 해결할 수 있는가 하면 그것은 또 아닙니다. 
            먼저 위크 포인터는 shared_ptr를 그냥 복사해 만들 수도 있습니다. 
            weak_ptr<Knight> wpr = spr;     이런식으로 사용할 수 있습니다.
            그리고 일반 포인터처럼 바로 사용할 수는 없고 weak_ptr 이 가리키는 객체가 실제로 존재하는지를 체크하고 사용할 수 있습니다. 
            bool expired = wpr.expired();   
            이렇게 유효성을 체크하던지 아니면 
            shared_ptr<Knight> spr2 = wpr.lock(); 
            lock() 함수로 쉐어드포인터로 바꾸어 사용할 수 있습니다. 

그런데 _Ref_count_base 는 어떤 정보를 들고 있을까가 궁금해 질 수 있습니다. 
코드를 타고 들어가보면 _Atomic_counter_t 타입으로 _Uses, _Weaks 두가지 정수를 관리하고 있습니다.
카운트 하나만 가지고 있을거 같은데 두가지를 가지고 있습니다. 그래서 두개의 카운팅을 하고 있는겁니다. shared_ptr 로 참조하고 있는 카운트와 weak_ptr 로 참조하고 있는 카운트로 
나뉘는데 첫번째는 기존에 알고 있던 참조카운트처럼 이 값이 0이 아니면 삭제하지 않고 0이 되면 그제서야 삭제가 가능해지는 방식입니다. 
shared 카운트가 0이 되면 데이터인 Knight 부분의 데이터는 날리는데 뒤의 _Ref_count_base 부분은 날리지 않을겁니다. 이 _Ref_count_base 는 weak 카운트가 0이 되었을때 날릴겁니다. 

그래서 weak_ptr은 _Ref_count_base 의 삭제여부에는 영향을 주지만 정작 실제 사용하는데이터 부분은 영향을 주지 못하는 스마트 포인터입니다. 
실제 데이터부분의 존재 여부에는 영향을 주지 않기 때문에 스마트포인터끼리의 순환문제는 해결할 후 있습니다. 