
서버에서 패킷을 만들어 보내고 받는 기능은 완성이 됐지만 아직 그 과정에서 비효율이 있는 상황입니다. 

부분부분 락을 잡고 동작하는 부분 때문에 아무리 서버에서 멀트 쓰레드로 병렬작업을 하려고 해도 락에 걸리면서 비효율이 발생합니다. 

이것을 방지하기 위해 간단한 방법중 하나로 Job을 사용하는 것입니다. 

Job 이라는 상위 클래스를 하나 만들고 여기서 실행하는 멤버 함수 Execute 를 가상함수로 만들어서 이 Job 을 상속받은 하위 클래스들이 각 역할에 맞는 데이터를 들고 있다
Execute 를 호출하는 시점에 처리를 하도록 합니다. 

지금 이런 원시적인 Job 방식은 직관적이긴 합니다. 
Job 이라는 클래스에서 할 동작을 멤버 함수로 들고 있고 거기에 필요한 인자들을 멤버 변수로 들고 있습니다. 
이 방식의 단점이라고 한다면 필요한 일감의 종류가 늘 수록 그때 마다 클래스를 하나 씩 늘려줘야한다는 것입니다. 

일단 여기서 템플릿문법을 사용해 관리하기 보다는 현재 방법으로 조금 실습해봤습니다. 
먼저 Job 을 순차적으로 처리할 수 있게끔 해줘야하는데 그러기 위해서 컨테이너에 담아야합니다. 

컨테이너에 담을때 shared_ptr 로 관리해야 복사비용이 줄것입니다. 

JobQueue를 새로 클래스로 만드는데 멤버변수로 일단 락을 사용하고 상위 클래스 Job의 shared_ptr 로 queue를 들고 있을겁니다. 
Push, Pop 두가지 기능이 있는데 락을 잡고 Queue에 job을 넣고 빼는것입니다. 

이 방식으로 Room 의 기능도 Job 으로 만들수 있습니다. Enter, Leave, Broadcast 를 Job 으로 만들어 주는데 
그냥 호출하면 되는데 굳이 Job 으로 만드는 이유는 JobQueue 에서만 락을 걸고 Enter, Leave, Broadcast 에서는 락을 안걸어 주기 위함입니다. 
JobQueue 한곳만 락을 잡으면 여기를 처리하는 쓰레드만 묵이고 나머지는 자유롭게 동작할 수 있습니다. 

이렇게 수정하면 GRoom 에서 Enter 나 Broadcast 같은걸 호출하던 부분을 PushJob 을 하도록 수정해주면 될것입니다. 

일감을 밀어 넣었으면 쌓인 Job 을 실행시켜줘야하는데 간단하게 GameServer.cpp 의 메인 쓰레드에서 초에 한번씩 처리해주도록 하겠습니다. 

이 원시적인 JobQueue 방식의 의미를 요약하자면 락을 거는 부분을 줄이는 것입니다. 컨텐츠 코드마다 락을 걸기 보다는 JobQueue 에 넣고 빼는 잠깐씩만 락을 걸고 
일감을 처리할때도 한 쓰레드만 락을 거는것입니다. 
개선할 부분은 Job 클래스들을 매번 직접 만드는 것을 피하는것일겁니다. 