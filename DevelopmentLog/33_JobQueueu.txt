
서버에서 패킷을 만들어 보내고 받는 기능은 완성이 됐지만 아직 그 과정에서 비효율이 있는 상황입니다. 

부분부분 락을 잡고 동작하는 부분 때문에 아무리 서버에서 멀트 쓰레드로 병렬작업을 하려고 해도 락에 걸리면서 비효율이 발생합니다. 

이것을 방지하기 위해 간단한 방법중 하나로 Job을 사용하는 것입니다. 

Job 이라는 상위 클래스를 하나 만들고 여기서 실행하는 멤버 함수 Execute 를 가상함수로 만들어서 이 Job 을 상속받은 하위 클래스들이 각 역할에 맞는 데이터를 들고 있다
Execute 를 호출하는 시점에 처리를 하도록 합니다. 

지금 이런 원시적인 Job 방식은 직관적이긴 합니다. 
Job 이라는 클래스에서 할 동작을 멤버 함수로 들고 있고 거기에 필요한 인자들을 멤버 변수로 들고 있습니다. 
이 방식의 단점이라고 한다면 필요한 일감의 종류가 늘 수록 그때 마다 클래스를 하나 씩 늘려줘야한다는 것입니다. 

일단 여기서 템플릿문법을 사용해 관리하기 보다는 현재 방법으로 조금 실습해봤습니다. 
먼저 Job 을 순차적으로 처리할 수 있게끔 해줘야하는데 그러기 위해서 컨테이너에 담아야합니다. 

컨테이너에 담을때 shared_ptr 로 관리해야 복사비용이 줄것입니다. 

JobQueue를 새로 클래스로 만드는데 멤버변수로 일단 락을 사용하고 상위 클래스 Job의 shared_ptr 로 queue를 들고 있을겁니다. 
Push, Pop 두가지 기능이 있는데 락을 잡고 Queue에 job을 넣고 빼는것입니다. 

이 방식으로 Room 의 기능도 Job 으로 만들수 있습니다. Enter, Leave, Broadcast 를 Job 으로 만들어 주는데 
그냥 호출하면 되는데 굳이 Job 으로 만드는 이유는 JobQueue 에서만 락을 걸고 Enter, Leave, Broadcast 에서는 락을 안걸어 주기 위함입니다. 
JobQueue 한곳만 락을 잡으면 여기를 처리하는 쓰레드만 묵이고 나머지는 자유롭게 동작할 수 있습니다. 

이렇게 수정하면 GRoom 에서 Enter 나 Broadcast 같은걸 호출하던 부분을 PushJob 을 하도록 수정해주면 될것입니다. 

일감을 밀어 넣었으면 쌓인 Job 을 실행시켜줘야하는데 간단하게 GameServer.cpp 의 메인 쓰레드에서 초에 한번씩 처리해주도록 하겠습니다. 

이 원시적인 JobQueue 방식의 의미를 요약하자면 락을 거는 부분을 줄이는 것입니다. 컨텐츠 코드마다 락을 걸기 보다는 JobQueue 에 넣고 빼는 잠깐씩만 락을 걸고 
일감을 처리할때도 한 쓰레드만 락을 거는것입니다. 
개선할 부분은 Job 클래스들을 매번 직접 만드는 것을 피하는것일겁니다. 


------------


1 세대 Job 방식을 알아봤습니다. 일감의 종류마다 직접 클래스를 만들어 Job으로 사용하는 방식이었습니다. 그나마 장점은 직관적으로 코드를 읽기가 쉽다는 것입니다. 
두번째 방식은 공용 클래스로 만들어 일감을 관리하는 방법입니다. 

위에서 알아 봤던 Job 은 어떤 역할을 하는 클래스를 사용하는 방법이었고 사실 이것이 함수자 Functor 입니다. 

예를 들어 타겟에게 어떤 값만큼 힐링을 하는 기능을 함수로 만들고 이 함수를 Job 으로 만드는 것이 목표라고 하겠습니다. 
그러면 새로 클래스를 만들어 () 오퍼레이터 오버로딩을 정의해 들고 있는 함수를 실행하는것이 함수자였습니다. 
함수자로 사용할 함수가 인자를 받을때가 문제가 되는데 이것을 템플릿으로 받게 되면 먼저 함수의 반환 값 타입, 인자들을 받아줘야합니다. 

그런데 함수마다 인자의 갯수가 다른게 문제입니다. 
인자가 없는 함수부터 인자의 수가 N개 인 함수 까지 템플릿을 각각 만들어 주는것은 어렵습니다. 

템플릿 문법에서 인자 갯수만큼 틀을 만들면서 typename 을 똑같게 쓰면 에러가 난다고 합니다. 
이럴때 사용하는 템플릿 문법이 

template<typename... Args> 입니다. 

이 Args 를 펑터에서 멤버변수로 들고 있어야 할때 사용하는게 std::tuple<Args...> 입니다. 이 타입으로 변수를 만들어 주면 됩니다. 

또 Job 을 만들때 함수를 함수포인터로 넘겨줘 변수로 들고 있고 실행할때는 C++17 에서 추가된 
std::apply(func, tuple) 을 호출하면 됩니다. 

이 apply 라는 것이 어떤 원리인지를 잠깐 알아보자면 

// C++11 apply
template<int... Remains>
struct seq
{};

template<int N, int... Remains>
struct gen_seq : gen_seq<N - 1, N - 1, Remains...>
{};

template<int... Remains>
struct gen_seq<0, Remains...> : seq<Remains...>
{};

template<typename Ret, typename... Args>
void xapply(Ret(*func)(Args...), std::tuple<Args...>& tup)
{
	xapply_helper(func, gen_seq<sizeof...(Args)>(), tup);
}

template<typename F, typename... Args, int... ls>
void xapply_helper(F func, seq<ls...>, std::tuple<Args...>& tup)
{
	(func)(std::get<ls>(tup)...);
}

template<typename T, typename Ret, typename... Args>
void xapply(T* obj, Ret(T::* func)(Args...), std::tuple<Args...>& tup)
{
	xapply_helper(obj, func, gen_seq<sizeof...(Args)>(), tup);
}

template<typename T, typename F, typename... Args, int... ls>
void xapply_helper(T* obj, F func, seq<ls...>, std::tuple<Args...>& tup)
{
	(obj->*func)(std::get<ls>(tup)...);
}

어떤 내용인지 하나도 이해가 안갈 수 있는데 풀어서 설명해보겠습니다. 

일단 tuple 이라는 컨테이너가 뭘하는것이냐면 여러 데이터들을 모아두는 것입니다. 
설명이 막연한데 예를 들면 

auto tup = std::tuple<int, int>(1, 2);

이렇게 <> 안에 넣은 타입대로 값을 저장합니다. tuple 에 저장한 값을 꺼내려면 std::get<index>(tuple) 로 하면됩니다. 위의 tup 을 예시로 하면 
auto val0 = std::get<0>(tup) // 1 추출
auto val1 = std::get<1>(tup) // 2 추출

이런 tuple 과 get 을 통해서 variadic template 가변길이 템플릿을 통해 Job 에서 사용할 인자들을 저장하고 꺼냅니다. 
xapply_helper 를 보면 func 를 호출한 () 안에서 tup의 내용물들을 꺼내서 호출하고 있습니다. 
이때 seq 라는 struct 로 ls 인자를 받고 있습니다. 


auto s = gen_seq<3>(); 
이런 gen_seq 가 있다고 하겠습니다. 두번째 gen_seq 오버라이드에 따라 
gen_seq<2, 2> 가 있다고 볼 수 있습니다. 그러면 뒤의 2 가 다시 Remains 로 인식되어 
gen_seq<1, 1, 2> 로 확장이 되고 다시 1 이 N 이 되고 1, 2 가 Remains 이 되어 
gen_seq<0, 0, 1, 2> 로 확장되는데 이게 가장 근사한 버전이 0 과 Remains 을 받는 버전입니다. 
여기로 들어오면 seq<Remains> 만 상속받고 끝나기 때문에 결국 
seq<0, 1, 2> 가 나옵니다. 

그러면 이 gen_seq 가 사용된 부분을 보면 xapply 에서 xapply_helper 를 호출할때 sizeof(Args)을 gen_seq 에 들어갑니다. 그러면 호출할 함수의 인자수 만큼
seq<0, 1, 2, 3 ... > 이 xapply_helper 에 인자로 들어가고 0, 1, 2, 3 .. 부분이 get<ls>(tup) 의 ls 부분에 들어갑니다. 

이러면 다시 (func)(get<0>(tup), get<1>(tup), get<2>(tup) ...) 이렇게 호출됩니다. 

결국 템플릿을 잘 사용하게되면 인자도 알아서 함수 포인터에 넘겨주게 됩니다. 


이때 한가지 문제는 지금 사용한 함수포인터의 타입을 보면 

	using FuncType = Ret(*)(Args...);

이런 형태인데 이 버전이 모든 함수 타입을 받아 줄 수는 없습니다. 
다른 클래스 내부에 있는 멤버 함수같은 경우가 그렇습니다. 
이 경우를 커버하기 위해 MemberJob 이라는 클래스를 만듭니다. 
템플릿 타입을 T 로 하나 더 받아주고 이것을 멤버 함수가 있는 클래스 타입을 받아줍니다. 


template<typename T, typename Ret, typename... Args>
class MemberJob : public IJob
{
	using FuncType = Ret(T::*)(Args...);

public:
	MemberJob(T* obj, FuncType func, Args... args) : _obj(obj), _func(func), _tuple(args...)
	{

	}

	virtual void Execute() override
	{
		//std::apply(_func, _tuple); // C++17
		xapply(_obj, _func, _tuple);
	}

private:
	T* _obj;
	FuncType	_func;
	std::tuple<Args...> _tuple;
};

오브젝트를 받는 타입의 xapply, xapply_helper 도 추가하면됩니다. 

직접 apply 를 구현해 봤는데 C++ 17 이후에서는 그냥 사용할 수 있는 기능입니다. 

위의 첫번째 Job 방식에서 바뀐것은 이제 EnterJob, LeaveJob 같은 클래스를 매번 만드는게 아니라 사용할 함수를 넣어 재사용하는 방법이 되었습니다. 


------------------------------------------


다음 버전으로 넘어가면시 지금까지 만든 Job 코드들은 다 폐기 할것입니다. 
새로만드는 Job 은 ServerCore에 만들어 공용으로 사용하겠습니다. 

새로 만들 Job은 Lambda 식을 활용하는것입니다. 
거기에 functional 을 조합하는데 functional 이라는 헤더를 추가하고 std::function<void()> 이런 걸 사용할 수 있는데 온갖 형식의 함수를 다 받을 수 있습니다. 
위의 예시에서는 반환과 매개변수가 둘다 void 타입인 함수를 받아 줍니다. 

PlayerRef player = make_shared<Player>();
std::function<void()> func = [=]()
{
	GRoom.Enter(player);
}

이렇게 간편한 문법으로 이전 그 Functor 를 대체 할 수 있습니다. 

하지만 람다가 장점만 있는것은 아닙니다. 람다는 [] 안에 = & 중 무엇을 넣는가에 따라 람다 밖 데이터를 복사 방식으로 가져올지 참조방식으로 가져올지 정할 수 있습니다. 
이것은 위의 Functor 방식에서 tuple 로 인자를 저장하는것과 같은 효과를 냅니다. 

캡쳐가 이런 기능인것과 C++ 과 안어울린다는 말이 나오냐면 
지금 Job을 사용하는 방법이 어떤 일감을 Job으로 만들고 JobQueue에 넣어놓고 나중에 한번에 처리하는 방식을 취할건데 람다식에 참조방식으로 인자를 넘겨줬다면 
나중에 Execute 를 할때 넘겨줬던 인자가 삭제되기라도 한다면 유효하지 않은 메모리를 건드리게 됩니다. 
그래서 객체를 참조로 넘겨줄때는 생명주기를 확보해줘야합니다. 

참조로 준 객체의 생명주기 외에도 신경을 쓸 부분이 있는데 클래스에서 멤버 함수 내에서 같은 클래스의 멤버 변수를 캡쳐해 Job을 만든다고 했을때 
위험해집니다. 왜냐하면 클래스 내부에서 멤버 변수를 캡쳐하게 되면 그냥 변수를 캡쳐하는게 아닌 클래스 자신을 this 포인터를 가져와서 멤버변수를 꺼내 캡쳐하는것입니다. 
그러다 보니 자기 자신 주소값이라는것은 자신 객체의 주소가 유효해야하는데 Job 은 한번 만들어 놓으면 이후 또 유효하지 않은 주소를 건드리게 될 수 있습니다. 
또 만약 이 객체를 shared_ptr 로 만들었다면 this 를 사용하는것도 안됩니다. 
이럴때는 enable_shared_from_this<class> 를 상속받고 명시적으로 shared_from_this() 를 캡쳐해 사용하는것입니다. 

---------------------------------------------


이제 Job 을 람다를 활용해 일감을 JobQueue 에 쌓고 메인 쓰레드에서 FlushJob 으로 처리를 하고 있습니다. 
소규모 게임에서는 이것도 가능하지만 게임에 따라 Job 을 처리하는 주체의 수가 천차만별이 될 수 있습니다. 예를 들어 심리스 MMORPG의 경우는 각 객체마다 FlushJob 을 해야
할 수 있습니다. 

그러면 Job을 어디서 처리를 해줘야할지 고민이 되는데 조금 소규모라면 조건 변수를 사용해 준비가 되면 그때 활성화 되어 잠깐 처리하는 식으로 해도 되겠지만 
몇만 단위의 객체들이 Job 을 처리해야한다면 이것도 말이 안됩니다. 

한가지 방법으로 Job을 Push 하는 곳에서 처리까지 한번에 담당하는법이 있습니다. 
이전 네트워크에서도 네트워크 입출력 이벤트를 처리할때 가장 처음 도착한 쓰레드가 처리까지 담당하고 그 중간에 쌓인 이벤트는 일하는 중인 쓰레드가 마저 처리하는 식이었습니다. 
Job도 이런식으로 수정할것입니다. 

Job들을 락걸고 Queue 에 담았던 JobQueue를 같은 방식으로 다른 것들도 담을 수 있게 template 로 타입을 받아 LockQueue 이름으로 수정합니다. 
LockQueue는 Util 필터로 이동합니다. 

기존 JobQueue를 사용하던 부분들을 LockQueue 로 바꿔 주고 템플릿으로 타입을 지정할 수 있게 해줍니다. 

이전 JobSerializer 라는 클래스에서는 함수로 래핑해 Job을 JobQueue 에 넣던 클래스가 있는데 여기서 JobQueue 사용하던 부분을 LockQueue 로 수정하고 LockQueue<JobRef> 를 들고 있게 합니다.
jobCount를 관리해서 처음 Job을 넣은 쓰레드가 Execute 까지 처리하도록 만들어 줍니다. 

컨텐츠 쪽 코드를 수정하자면 Room 에서 이제 JobSerializer 의 이름이 JobQueue 가 되었고 FlushJob 도 없애줄겁니다. 
GameServer.cpp 도 FlushJob 하던 부분을 삭제합니다. 
ClientPacketHandler 에서 PushJob 을 DoAsync 로 바꿉니다. 

이 방식의 문제가 Execute 를 하는 쓰레드가 계속 Job 이 밀려 쭉 담당해 처리하게 되는 수가 있습니다. 
이 처리 방법을 이 다음에 알아보겠습니다. 


------------------------------------------------


일감이 너무 빨리 몰려서 처리하는것보다 빠른 상태, Execute 를 따라 가다 보니 다른 JobQueue에 일감을 밀어 넣는 코드가 있다면 여러 JobQueue 의 Execute를 한 쓰레드가 담당하게 될 수 있습니다. 
이런 상황이 일어나지 않고 모든 쓰레드가 균등하게 일감을 나눠 처리하는것을 원합니다. 

JobQueue 의 Push 에서 중첩으로 Execute를 담당하지 않게 하기 위해 자신이 지금 Execute를 하나 이상 하고 있는지를 알고 있으면 좋겠습니다. 
그러기 위해서 GlobalQueue 라는 클래스파일을 추가하는데 기능은 그냥 JobQueue를 담아둘 LockQueue 입니다. 
이렇게 하면 JobQueue 를 저장하고 있다가 다른 쓰레드가 JobQueue를 이어받아 실행하도록 하는 것입니다. 
GlobalQueue 는 이름에서 알 수 있듯이 전역으로 들고 있을겁니다. CoreGlobal에 추가합니다 .

그리고 각 쓰레드가 자신이 어떤 JobQueue를 실행하고 있는지를 들고 있기 위해 CoreTLS 에 JobQueue를 하나 들고 있게 합니다. 
이게 nullptr면 담당하고 있는 JobQueue가 없는겁니다. 

준비가 됐으면 JobQueue::Push 에서 LCurrentJobQueue 라는 이름의 TLS 에서 들고 있는 JobQueue 가 유효한지를 체크합니다. 만약 유효하다면 다른 쓰레드가 실행하도록 GlobalQueue 에 넘기고 
아니라면 Execute를 실행합니다. 
그 후 Execute를 실행해 job들을 다 처리했을 경우는 LCurrentJobQueue 을 nullptr 로 밀어 줘야 다음 JobQueue를 잡을지 체크가 됩니다. 

여기에 한가지 더 조건을 걸건데 Tick 을 세면서 JobQueue를 처리하는 최대 시간을 정해 주는 것입니다. 
먼저 ThreadManager 에서 DoGlobalQueueWork 라는 함수를 만들어줍니다. 이 함수는 무한 루프를 돌면서 매 틱마다 값을 구해 어떤 값과 비교해 시간을 재줄겁니다. 
이 값은 TLS 영역에 만들어주는데 LEndTickCount 라는 이름으로 만듭니다. 쓰레드 마다 이 값을 가지고 비교해야 전역 변수 비슷하게 사용할 수 있을겁니다. 
LEndTickCount 와 ThreadManager::DoGlobalQueueWork 의 틱값을 비교하고 LEndTickCount 보다 현재 틱이 크다면 루프를 깨고 아니라면 GGlobalQueue 에서 JobQueue를 꺼내서 Execute를 합니다. 
없다면 루프를깹니다. 

이때 JobQueue에 Execute 를 호출할때 이게 private 라서 호출이 안되는데 public 으로 열어줍니다. 

다시 흐름을 정리해보자면 JobQueue::DoAsync 를 통해 Job을 Push 하게 되면 LCurrentJobQueue 가 유효한지 안한지에 따라 Execute를 호출하던지 아니면 GGlobalQueue 에 JobQueue를 넣습니다.
Execute로 들어갔다면 LCurrentJobQueue 에 this 를 넣어 설정합니다. 이후 JobQueue에 일감이 없거나 최대 시간이 지나면 LCurrentJobQueue 를 nullptr로 밀어줍니다. 이러면 
여러 JobQueue를 중첩해서 들어가지 않고 너무 오래 붙잡고 있지도 않을 겁니다. 
이것을 JobQueue::DoAsync 를 호출했을때도 실행되고 ThreadManager::DoGlobalQueueWork 을 호출해도 될것입니다. 

DoGlobalQueueWork 을 어디서 호출해줄것이냐면 GameServer.cpp 로 가봐야 합니다. 
이전에는 그냥 GameServer.cpp 의 메인스레드가 FlushJob 이라는 함수를 계속 호출하면서 JobQueue를 도맡아 처리하고 있었습니다. 
이러면 균등하게 일감을 분배할 수 없기 때문에 이런 방법을 취할겁니다. 

먼저 DoWorkerJob 이라는 함수를 만들건데 ServerServiceRef 를 매개변수로 받습니다. 
내용은 무한루프를 돌면서 LEndTickCount 값을 설정할건데 현재 틱에서 일정 수를 더해 설정할건데 그 값은 따로 enum으로 빼서 WORKER_TICK = 64 로 정했습니다. 
이러면 매 틱 메인 쓰레드의 LEndTickCount 이 현재 틱카운트에서 64가 더한 값이 될겁니다. 

그러면 현재 GameServer 에서는 Service 를 만들고 워커 쓰레드를 5개 만들어 IOCP Core 의 Dispatch 를 하고 있었습니다. 
이 Dispatch 는 네트워크 패킷을 주고 받으면서 입출력 이벤트가 실행 준비가 될때 까지 기다렸다가 실행 준비가 되면 빠져나와 Session의 Dispatch 로 이어져 패킷의 데이터를 
가져와 컨텐츠 코드가 진행 되었습니다. 
네트워크 입출력 처리와 인게임 로직 처리까지 이어서 진행하고 있었던겁니다. 이것도 DoWorkerJob 에서 LEndTickCount 를 설정하는코드 다음에 이어 작성하고 이어서 ThreadManager::DoGlobalQueueWork 를 
호출해줍니다. 

이 DoWorkerJob 함수를 워커 쓰레드와 메인쓰레드가 호출하게 하면 모든 쓰레드가 모두 LEndTickCount 를 설정, Dispatch, DoGlobalQueueWork 까지 호출을 해주게 됩니다. 
이때 Service의 Dispatch 를 호출할때 uint32 타입의 값을 넣어주면 그 값만큼 Dispatch 를 대기하다 지나면 빠져나옵니다. 이전에는 Dispatch 만 하기 때문에 대기를 무한정 했지만 지금은 
DoGlobalQueueWork 까지 골고루 해야하기 때문에 타임아웃을 설정합니다. 
온라인게임에서는 DoGlobalQueueWork 말고도 이어서 호출할 컨텐츠 함수들이 많을것입니다. 

