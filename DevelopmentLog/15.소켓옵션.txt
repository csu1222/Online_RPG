

일단 실습했던 UDP 코드는 다 날려주겠습니다. 

그리고 이번 주제인 소켓의 옵션에 대해 알아보겠습니다. 

클라이언트나 서버나 동일하게 소켓을 만드는 순간 커널단에서 RecvBuffer, SendBuffer 가 생성이 됩니다. 
그리고 이 버퍼들의 크기를 옵션을 통해 조절할 수 있습니다. 

그 뿐만 아니라 더 다양한 옵션들을 조절할 수 있습니다. 

하는 방법은 간단한데 
::setsockopt();
로 소켓 옵션을 설정하고 
::getsockopt();
로 소켓 옵션을 가져와 확인할 수 있습니다. 

::setsockopt 의 시그니처를 살펴보겠습니다. 

int WSAAPI setsockopt(
  [in] SOCKET     s,
  [in] int        level,
  [in] int        optname,
  [in] const char *optval,
  [in] int        optlen
);

인자들을 하나씩 살펴보자면 

SOCKET s 는 말그대로 소켓입니다. 

int level 은 문서에서는 옵션이 정의된 수준(예: SOL_SOCKET)이라고 합니다. 옵션을 넣어줄때 그 옵션을 해석하고 처리할 주체라고 합니다. 
            만약 소켓이 처리하는거라고 하면 SOL_SOCKET을 넣어주게 되고 아니면 IPv4가 처리한다면 IPPROTO_IP, 아니면 TCP 프로토콜이 처리해야 한다면 IPPROTO__TCP 같이
            그에 맞는 주체를 넣어주면 됩니다. 

int optname 은 위에서 레벨을 정해준 뒤 그 레벨중에서도 어떤 옵션을 수정할지를 정해줍니다. 
            옵션들의 이름은 공식문서에 정리되어 있는데 자주 쓰이는 몇가지를 꼽자면  SO_KEEPALIVE(주기적으로 연결상태를 확인 할 지 여부(TCP Only))
            SO_LINGER(동작중인 소켓의 일감이 있는 중간에 소켓을 닫을때 이 작업을 완료를 하고 닫을것인지 바로 닫을것인지 여부)
            SO_SNDBUF(송신버퍼 크기), SO_RCVBUF(수신버퍼 크기) getsockopt 으로 이 버퍼들의 기본 크기를살펴보면 64k byte 일것입니다 이 것을 필요에 따라 크기조절 할 수 있습니다.
            SO_REUSEADDR(IP주소, port번호 재사용여부)서버를 내렸다가 다시올릴때 이전에 사용하던 주소를 다른 곳에서 사용하게 되면 서버가 다시 안올라가집니다. 이걸 방지하기위해 주소를 다시 사용할거라고
            예약을 걸어두는것입니다. 
            IPPROTO_TCP쪽에도 TCP_NODELAY(네이글 알고리즘 작동 여부) 라는 옵션을 알아두면 좋습니다. 간단히 설명해보면 데이터가 충분히 크면 보내고, 그렇지 않으면 충분히 쌓일때까지 대기한다 입니다. 
            장점은 작은패킷이 불필요하게 많이 생성되는 것을 방지하고 단점은 통신 반응시간에 손해를 볼것입니다. 그래서 온라인게임에서는 이 옵션을 꺼주는것이 좋습니다. 

const char *optval 은 옵션이름마다 다른 실제 조절할 그 옵션값입니다. 옵션 이름마다 이 인자의 크기나 타입이 다른데 이것은 공식문서에 정리되어있습니다. 

int optlen 은 optval 의 사이즈를 주면 됩니다. 