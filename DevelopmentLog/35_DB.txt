
## DB Connection

데이터 베이스 연동을 해볼겁니다. 

데이터 베이스는 여러 제품군이 있지만 각각 연동 방법이 다르면 사용하기 매우 힘들겠습니다. 
이것을 ODBC 라는 것을 사용해 DB에 접근해 데이터를 쓰거나 읽을것이고 연동 자체는 각 DB 제조사에서 알아서 맡을겁니다.

ServerCore 에 DB 필터를 만들어 여기에 코드를 만들겠습니다. DBConnection 이라는 DB 연결을 하는 클래스와 이 DBConnection을 관리하게될
DBConnectionPool을 만들겁니다. 
이코드들은 너무 자세히 알지는 않아도 되고 필요할때 찾아서 사용하면 되는 정도입니다. 

대략 어떻게 동작하는지를 보겠습니다. 

먼저 DBConnection에서 sql.h, sqlext.h 두가지 헤더를 추가합니다. 
그 후 DBConnectionPool 에서 DBConnection 을 추가합니다. 이후 DBConnectionPool에 락을 사용할것이고 SQLHENV 라는 타입의 변수를 들고 있을겁니다. 
SQLHENV는 sql.h, sqlext.h 헤더를 추가해서 사용가능해졌습니다. SQLHENV 가 무슨 의미냐면 SQL 은 DB 이름이고 H는 핸들 ENV 는 환경입니다. 
그래서 SQL의 환경을 담당하는 핸들이라는 뜻입니다. 이 타입 변수 이름을 _environment 라고 하고 값을 SQL_NULL_HANDLE이라고 주겠습니다.
또 DBConnection 을 가지고 있을 Vector 도 _connections 라는 이름으로 들고 있을겁니다. 

멤버함수로는 연결하는, 즉 DBConnectionPool을 만들어주는 Connect 함수를 사용할건데 인자로 먼저 몇개의 DBConnection 을 사용할지를 int32 로 받아줄것이고 
또 const WCHAR* 타입으로 connectionString 을 받아주는데 이 문자열은 어떤 DB 랑 어떤 환경, 조건으로 연결할지를 받아줄겁니다. 
다음으로 Clear 함수, DBConnection을 꺼내는 Pop 함수, 밀어 넣는 Push 함수를 만들어 줄겁니다. 
Pop, Push 에서 Shared_ptr 을 쓰지 않고 그냥 생 포인터를 쓸건데 왜 참조 카운터 없이 사용하냐면 DB를 사용할때 DB의 내용을 지울일은 사실상 없고 
바로 꺼내 내용을 참조하고 다시 곧바로 넣어둘거라 그렇습니다. 이 경우가 특별한 경우 입니다. 

Connect, Clear, Pop, Push 함수의 내용을 채워줄겁니다. 여기서 사용하는 함수들의 자세한 내용을 다 외울 필요는 없고 대강 어떤 일을 하는지만 알고 넘어갑니다.
Connect 에서는 처음에 서버가 뜰때 한번만 호출해줄겁니다. 일단 락을 걸고 SQLAllocHandle 이라는 함수를 호출하는데 여러 필요 인자를 넣고 
그 반환값이 SQL_SUCCESS 인지 체크해 아니라면 false 로 리턴합니다. 
다음으로 SQLSetEnvAttr 함수를 호출합니다. 다음이 중요한데 인자로 받은 DBConnection 갯수만큼을 for 루프를 돌면서 
DBConnection 객체를 만들고 이후 만들어줄 DBConnection::Connect 함수를 _environment , connectionString 을 인자로 줄겁니다. 
이후 _connections 에 push_back 합니다. 

Clear 는 그냥 SQLFreeHandle 함수로 정리를 해줍니다. 그리고 _connections 도 하나씩 꺼내서 DBConnection 객체들을 다 delete 해줍니다. 
이 Clear는 따로 호출하지는 않고 DBConnectionPool의 소멸자에서 호출할겁니다. 

Pop은 _connections 가 비었는지 체크 후 하나 꺼내줄꺼고 
Push 함수에서도 인자를 받아서 _connections 에 넣어줄겁니다.

다음 클래스 DBConnection 을 만들겠습니다. 
멤버 변수 부터보면 SQLHDBC 타입 SQL 핸들인데 데이터베이스 커넥션의 약자입니다. 값을 SQL_NULL_HANDLE 로 줍니다. 
SQLHSTMT 도 있는데 이건 SQL Statement의 핸들입니다. DBConnection 을 DB와 연결할때 statement에 인자를 넣어서 연결하는겁니다. 

사용할 멤버 함수는 Connect, Clear, Execute, Fetch, GetRowCount, Unbind, BindParam, Bindcol, HandleError 입니다. 
각각 역할을 보자면 
Connect 는 DBConnection 객체에서 서버와 DB를 실제 연결해주면서 SQL 쿼리를 줍니다.
Clear는 연결한 핸들을 삭제합니다. 
Execute는 연결후 SQL 쿼리를 인자를 DB에 입력합니다. 
Fetch는 _statement 의 값대로 SQLFetch를 합니다. 
GetRowCount는 DB의 Row 의 카운트를 가져옵니다. 
이런식으로 각각 함수의 이름대로 동작을 합니다. 


이제 어떻게 사용할거냐면 DBConnectionPool 을 전역으로 하나 들고 있을 겁니다. 어떤 스레드이건 DB에 접근할지 모르기 때문에 전역으로 관리하는겁니다.
전역 객체는 CoreGlobal에서 관리하고 있었으니 거기에 만들겠습니다. 

DB를 사용할지 안할지는 모르지만 글로벌 객체로 만든이유는 사용할때만 DBConnectionPool:Connect 를 호출해 사용하면 되기 때문입니다. 
DB를 사용하는 흐름은 GDBConnectionPool을 Connect로 원하는 DBConnection 갯수만큼과 connectString을 가지고 연결해주고
그 다음 Pop을 해 DBConnection 하나 꺼내 BindParam, BindCol 을 이용해 인자와 Column 을 세팅해 Execute 를 때립니다. 받아올 결과를 Fetch로 받아오게 됩니다. 

다음은 어떤 DB를 사용할지를 정해야하는데 기본적으로 어떤 DB든 다 지원을 하지만 VisualStudio가 기본적으로 지원하는 SQLServer로 실습하겠습니다.

SQLServer 탐색기를 열고 데이터베이스 필터 아래에 새 데이터 베이스 추가를 해서 ServerDB를 추가합니다. 
속성을 열어서 연결 문자열을 확인해보면 Data Source 와 Catalog 가 뭔지 알고 있으면 됩니다. 

실습은 이어서 GameServer.cpp 에서 할건데 
DBConnectionPool 을 만들어야하는데 GDBConnectionPool->Connect 함수로 만들겁니다. 이때 인자가 만들 DBConnection 갯수와 Connection String 입니다. 
odbc connection string 이라고 검색해보면 마이크로 소프트 SQL 서버 커넥션 스트링이 있는 사이트가 나올건데 기본적으로 아이디와 패스워드를 입력하는 버전을 사용할건지 
아니면 신뢰가능한 연결 버전으로 아이디 패스워드를 생략하는 버전이 있습니다. 
지금은 테스트 용이고 로컬에서만 사용할것이다 보니 신뢰가능한 연결 버전을 사용합니다. 

Driver={SQL Server};Server=myServerAddress;Database=myDataBase;Trusted_Connection=Yes;

이런 문자열인데 Driver 는 사용하는 SQL 서버의 버전을 입력해줍니다. 
그리고 Server 에는 아까 ServerDB의 연결문자열의 Data Source 부분을 적어줍니다. 그리고 myDataBase 는 사용할 DB인 ServerDB를 적어줍니다. 
지금은 이 문자열을 하드코딩으로 적었지만 나중에는 여기에 들어가는 내용들을 다 옵션으로 꺼내 읽어서 접근하는 식으로 만들어야합니다. 

서버에 접속했으면 DB 쿼리로 작업을 시작합니다. 
먼저 테이블 쿼리를 변수로 만들고 이 쿼리를 가지고 DBConnection 을 GDBConnectionPool 에서 Pop 하고 이 DBConnection의 Execute 의 인자로 쿼리를 넘겨주면 됩니다. 
다 사용하면 DBConnection 을 다시 GDBConnectionPool 에 Push 합니다. 

다음으로 DB에 데이터를 추가하려면 다시 GDBConnectionPool 에서 Pop 해 DBConnection 을 꺼내온 다음 Unbind 를 한번 해줘서 혹시 이전에 Bind 된 데이터를 날립니다. 
넘길 데이터 인자들을 변수로 만들고 DBConnection 에 BindParam 으로 바인딩해줍니다. 바인딩한 인자를 테이블에 어떻게 넣냐면 Execute로 쿼리를 통해 넣어 줄 수 있는데 
어떤 테이블에 어떤 데이터를 넣을지 쿼리를 작성하고 바인드한 인자는 (?) 부분에 들어가게 됩니다. 

그리고 이제 DB의 내용을 읽어오는 방법은 역시 DBConnection 을 꺼내서 찾을 데이터를 위에서 넣은 인자로 BindParam 하고 
받아올 인자를 BindCol 을 한 후 Execute 에서 SELECT 문으로 찾아옵니다. 그 후 DBConnection->Fetch() 를 한 후 받아온 인자를 꺼내 확인합니다. 


이렇게 기본적인 DB와 서버 연결을 해봤는데 이렇게 사용하기에는 그 과정이 너무 지저분합니다. 



####################
## DB Bind



지금까지 DB와 연결하고 직접 쿼리와 Param, Column 을 바인딩후 넘겨주면서 DB를 사용했습니다. 
그런데 이 동작이 번거로워서 사용하며 실수도 많을 거 같기 때문에 이 함수들을 랩핑하겠습니다. 앞으로는 래핑된 함수를 사용할것이기 때문에 BindParam, BindCol, HandleError 함수는 private로 닫아주겠습니다. 

하지만 래핑함수로 어떤 타입의 데이터를 입력할지 모르니 각 타입마다 시그니쳐를 만들어줍니다. BindParam, BindCol 을 각각 만들어줍니다. 
조금 주의해야할 부분은 WCHAR 타입과 BYTE 타입입니다. WCHAR 의 경우는 총크기 4000 을 경계로 타입이 달라져서 조건문을 걸어 호출해야합니다. 
BYTE 도 8000을 경계로 합니다. 

이 코드들은 ServerCore의 DB 필터 아래에서 진행 됐고 빌드가 통과되면 됩니다. 

다음으로 GameServer 쪽 빌드를 해 바뀐 코드를 수정해야합니다. 바뀌는 부분은 GameServer.cpp 의 DB 테스트 코드입니다. 바뀐 버전의 시그니처를 사용해주면 되겠습니다. 

여기에 더해서 SQLLEN 이나 인자들을 넣어주는 것들을 처리해줄 클래스를 만들겠습니다.

DBBind 클래스를 추가해서 만들어 보겠습니다. 
먼저 템플릿으로 int32 두개를 받아서 몇개의 파라미터와 몇개의 컬럼을 사용할지 받을겁니다. 
멤버변수로는 DBConnection& 과 WCHAR* 의 쿼리를 받고 거기에 SELECT 나 INSERT 에 사용할 SQLLEN 들을 배열로 받아옵니다. 
이 배열을 어디까지 읽었는지를 기억하기 위한 비트 플레그도 파라미터 컬럼 각각 가지고 있을겁니다. 

생성자에서는 DBConnection 과 쿼리를 받아 저장하고 다른 멤버 변수들을 초기화 하고 DBConnection의 Unbind 이전에 바인드된 데이터가 있으면 밀어줍니다. 
나머지 멤버 함수로는 기본적으로 유효검사를 하는 Validate, 실행하는 Execute, 가져온 데이터를 저장하는 Fetch 가 기본일겁니다. 
Fetch, Execute 는 DBConnection 의 기능을 그대로 사용하면 될것인데 Execute 의 경우에는 그전에 Validate 를 체크할겁니다. 

그러면 이제 Validate 를 어떻게 할것인지 생각해보자면 DBBind 를 생성할때 받은 ParamCount와 ColCount 만큼 _paramFlag, _colFlag 가 채워져 있는지를 확인하는것입니다. 


바인딩하는 부분도 만들어줄겁니다. 템플릿을 사용하고 몇번째 인덱스에 어떤 값을 바인딩할것인지인데 위에서 만든 DBConnection::BindParam 을 활용해 바인딩하고 해당 인덱스의 데이터를 바인딩했는지 
기록하기 위해 아까 만든 비트플레그에 인덱스 만큼을 비트 쉬프트합니다. 
대부분은 템플릿을 사용한 이버전으로 챙길 수 있는데 
예외적으로 문자열, 바이트 배열, 포인터와 같은 타입의 데이터를 몇개 넣엇는지 같은 버전도 만듭니다. 
이작업을 BindCol 도 똑같이 합니다. 

DBBind를 사용하는 방법은 객체를 생성할때 템플릿에 주는 정수가 차례대로 인풋할 데이터수, 아웃풋할 데이터수 입니다. 
그래서 데이터를 추가 할때는 ParamCount 의 갯수를 주고 ColCount는 주지 않습니다. 그 갯수만큼의 데이터를 DBBind 객체의 BindParam 을 해주고 
DBConnection 과 INSERT 쿼리를 DBBind 생성때 넣어줄겁니다. 


######################
### XML Parser

데이터 베이스와 버전관리툴을 병용하기 시작하면 좀 애매해집니다. 그냥 C++ 코드는 버전관리툴로 관리가 되는데 여기에 데이터 베이스는 포함이 안됩니다. 
그렇다고 매번 서버를 실행할때마다 이전 데이터 베이스를 다 따로 저장해두고 필요한 시점으로 다시 데이터 베이스를 다시 짜올리는건 말이 안됩니다. 
데이터베이스에 저장된 정보들은 특히 더 중요한 데이터일 확률이 높습니다. 계정 정보나 아니면 인게임 재화같은 것들이 저장되어 있을것이기 때문입니다. 

그래서 DB와 버전관리툴을 같이 관리하기위해서 두가지 스타일이 있습니다. 
프로젝트에 직접 버전마다 쿼리를 저장하고 또 버전을 관리하는 테이블도 사용하는겁니다. 이러면서 버전마다 DB 파일을 하나씩 늘려줍니다. 
원래 서버에서는 서버 포트, 아이피 등 정보를 config 파일로 관리하는데 여기에 현재 버전에 사용할 DB버전도 같이 기입하는겁니다. 

이렇게 버전관리를 직접하는게 나쁘다는건 아니지만 번거롭습니다. 

두번째 스타일이 우리 프로젝트에 적용할 방법인데 일종의 간단한 ORM을 직접 만드는것입니다. 
ORM은 객체 관게 매핑 의 약자인데 객체지향 프로그래밍 언어에서 사용하는 객체와 관계형 데이터베이스에서 사용하는 테이블 간의 데이터를 
매핑하는 기술입니다. 이 기술로 SQL을 직접 작성하지 않고도 데이터베이스 작업을 수행 할 수 있습니다.

그래서 DB 원본 설계를 xml 파일로 설계를 하고 자동화 툴을 이용해 만들어 주면 Bind 계열 함수도 쉽게 만들어지고 버전 업데이트까지 하는 방법이 있습니다. 

먼저 ServerCore의 DB 필터아래에 GameDB.xml 파일을 만듭니다.
이 xml 파일에서 테스트 했던 테이블과 gold, name, datetime 을 주면서 골드 insert 프로시져와 select 프로시저를 만듭니다. 
현재 이렇게 설계한 것을 ORM으로 만들어주겠습니다. 


이번 작업을 하기 위해 rapidxml 이라는 라이브러리가 필요합니다. 
rapidxml.hpp, rapidxml_iterators.hpp, rapidxml_print.hpp, rapidxml_utils.hpp 네가지 파일을 프로젝트에 추가합니다. 
그리고 FileUtils 라는 이름의 파일 입출력 유틸 클래스와 XmlParser 라는 이름의 ORM을 담당할 클래스를 추가합니다. 


FileUtils 에서는 filesystem 라이브러리를 통해 파일 입출력을 하게 될것이고 XmlParser는 ORM을 담당합니다. 
filesystem 은 C++17부터 지원이 되었습니다. 

FileUtils 에서는 두가지 함수를 사용할건데 ReadFile 과 Convert 입니다. 
ReadFile은 인자로 받은 Path 를 가지고 그 경로에서 파일을 BYTE 벡터로 가져옵니다. 이 함수로 아까 만든 설계도인 GameDB.xml 을 가져오는데 
이 GameDB.xml 이 utf-8 로 작성되어 있어서 이것을 utf-16 으로 변환하는것이 Convert 함수입니다. 

Convert 함수도 이름그대로 utf-16 으로 변환하는 함수입니다. 


다음 XmlParser 클래스는 FileUtils 를 사용해 경로의 xml 파일을 읽고 WCHAR 로 변환한 후 rapidxml 에서 지원하는 xml_document 로 Parse 합니다. 
잘 파싱 되었으면 document의 first_node 를 XmlNode 함수에 넘겨주면 루트 노드가 나옵니다. 이 루트 노드를 인자의 root 에 담아 함수를 종료합니다. 
이 XmlParser 클래스를 위해 XmlNode 클래스에서 여러 타입에 대응하는 함수들을 가지고 있습니다. 


XmlParser 를 테스트할때는 이런 흐름이 될겁니다. 
먼저 두가지 객체를 만듭니다. 

	//
	XmlNode root;                                                       // 루트 노드가 됩니다. 
	XmlParser parser;                                                     
	if (parser.ParseFromFile(L"GameDB.xml", OUT root) == false)
		return 0;

	Vector<XmlNode> tables = root.FindChildren(L"Table");               // table 노드를 다 찾아서 tables로 관리 
	for (XmlNode& table : tables)
	{
		String name = table.GetStringAttr(L"name");                     // table 들의 name들을 가져옵니다. 
		String desc = table.GetStringAttr(L"desc");                     // desc는 주석 같은 느낌 

		Vector<XmlNode> columns = table.FindChildren(L"Column");        // column 들을 하나씩 추출
		for (XmlNode& column : columns)
		{
			String colName = column.GetStringAttr(L"name");
			String colType = column.GetStringAttr(L"type");
			bool nullable = !column.GetBoolAttr(L"notnull", false);
			String identity = column.GetStringAttr(L"identity");
			String colDefault = column.GetStringAttr(L"default");
			// Etc...
		}

		Vector<XmlNode> indices = table.FindChildren(L"Index");         // index도 추출
		for (XmlNode& index : indices)
		{
			String indexType = index.GetStringAttr(L"type");
			bool primaryKey = index.FindChild(L"PrimaryKey").IsValid();
			bool uniqueConstraint = index.FindChild(L"UniqueKey").IsValid();

			Vector<XmlNode> columns = index.FindChildren(L"Column");
			for (XmlNode& column : columns)
			{
				String colName = column.GetStringAttr(L"name");
			}
		}
	}

	Vector<XmlNode> procedures = root.FindChildren(L"Procedure");       // procedure 노드를 찾습니다.
	for (XmlNode& procedure : procedures)
	{
		String name = procedure.GetStringAttr(L"name");
		String body = procedure.FindChild(L"Body").GetStringValue();

		Vector<XmlNode> params = procedure.FindChildren(L"Param");
		for (XmlNode& param : params)
		{
			String paramName = param.GetStringAttr(L"name");
			String paramType = param.GetStringAttr(L"type");
			// TODO..
		}
	}

이렇게 해서 Xml 파일로 설계한 데이터 베이스 테이블을 읽어오는 것 까지 했고 다음은 읽어온 데이터를 서버에서 다시 사용하는 방법을 알아 봐야합니다. 


xml 파일을 토대로 테이블 설계를 긁어와 파싱하는 부분까지 했고 다음은 xml 파일을 토대로 데이터베이스를 업데이트 하는 부분까지 만들겠습니다. 
매번 모든 테이블을 만들 수도 있지만 xml 파일의 상태와 현재 데이터베이스 상태를 비교해 다른 점을 판단해 바뀐 부분만 업데이트하는 방법으로 진행하겠습니다.

테스트를 하면서 로그를 찍을때 좀더 가시성이 좋게 로그에 모양을 넣을 수 있는 클래스 ConsoleLog를 추가했습니다. 
이 ConsoleLog 객체는 전역객체로 사용해 어디서든 접근할 수 있도록 하겠습니다.
역시 CoreGlobal 에서 전역객체를 추가합니다. 

본격적으로 ORM 을 구현하기 위해 ServerCore의 DB 필터아래 두가지 클래스를 추가할겁니다. 
DBModel 이라고 해서 DB 정보를 모델링 하기위한 클래스와 DBSynchronizer 라고해서 DB의 싱크를 맞춰주는 클래스입니다. 

CoreMacro 에서 namespace를 쉽게 사용하도록 

#define NAMESPACE_BEGIN(name)	namespace name {
#define NAMESPACE_END			}
매크로를 추가했습니다. 

일단 지금 작업한 내용은 SQL Server 기준 코드입니다. 다른 DB를 사용하면 수정이 되어야 합니다.
대표적으로는 DataType 이라는 enum class 가 있는데 이 각 타입마다 준 정수들은 임의로 정한 값이 아니라 구글링을해 SQL Server 에서 사용하는 실제 오브젝트 
번호입니다. 

DBModel 클래스부터 분석하자면 위에서말한 DataType 이외에도 실제 DB에서 사용할 개념들을 다 클래스로 정의하고 있습니다. 
먼저 Column 클래스를 보면 Column 에서 들고 있을만한 정보를 들고 있습니다. _name, _columnId, _type 등등의 정보를 들고 있고 
CreateText 라는 멤버 함수도 가지고 있는데 가지고 있는 정보를 토대로 SQL 쿼리를 생성하는 함수입니다. 
이때 Helpers::Format 멤버 함수를 사용하는데 printf 와 비슷한 역할을 합니다. 

Index 클래스는 그 전에 IndexType 이라는 enum class가 필요한데 Clustered = 1, NonClustered = 2 라는 두가지 값이 있습니다. Clustered 라는 것은 키값을 기준으로 정렬을 할지 여부입니다.
Index 클래스에서도 필요한 변수들과 함수들이 들어있습니다. 

나머지 Table, Param, Procedure 도 마찬가지입니다. 

DBModel 은 이런 식으로 되어있습니다. 


실질적으로 DB 싱크를 맞춰주는 것이 DBSynchronizer 입니다. 이 클래스도 내용이 많은데 사용방법 자체는 단순합니다. 
DBSynchronizer 객체를 만들어 DBSynchronizer::Synchronizer 를 호출해주면 끝입니다. 
나머지 함수들은 Synchronizer 를 위한 함수들입니다. 

Synchronizer 에서는 내부에서 ParseXmlDB, GatherDBTables, GatherDBIndexes, GatherDBStoredProcedures, CompareDBModel, ExecuteUpdateQueries 함수들을 호출합니다. 
ParseXmlDB는 설계했던 GameDB.xml 파일을 파싱해서 구조를 분석해 메모리 상에 들고 있겠다라는 함수이고 
GatherDB 시리즈 함수들은 진짜로 DB에 접근해 쿼리를 통해 해당 데이터들을 가져옵니다. 
이제 ParseXmlDB 와 GatherDB류 함수를 한번씩 호출했으면 xml 파일과 DB 의 데이터들을 모두 긁어왔으니 다음으로 
CompareDBModel 함수에서 두 데이터를 비교하고 만약 다르다면 xml 파일의 형식에 맞게끔 DB를 업데이트하는 예약을 해주고 
실제 실행응 ExecuteUpdateQueries 함수에서 하게될겁니다. 

DBSynchronizer 클래스의 코드가 많기는하지만 결국 그 역할은 위와 같이 정리 할 수 있습니다. 