
Session 클래스를 좀 더 제대로 만들어 주겠습니다. 

이전 까지는 Accept 만 하도록 만들어 놨는데 이제 Recv, Send 등의 기능도 포함해야 할것입니다. 

Session 코드에 추가할 함수들은 이전까지는 RegisterAccept ProcessAccept 였는데 이것은 Listener 에서 가지고 있던 함수였습니다. 
Accept 자체가 리스너 소켓에서만 하고 그 이후 클라이언트 소켓을 만들면 Recv, Send 위주로 사용하게 될것입니다. 여기에 더해서 Connect 까지 추가를 할건데 
왜냐하면 나중에 이 세션을 그냥 클라이언트뿐만 아니라 서버끼리 접속을 시도할 수도 있기 때문에 해당 기능을 열어두는것입니다. 

또 이 함수들과 GetHandle, Dispatch 등을 private 로 만들어 줄것입니다. 외부에서 마음대로 접근하면 위험하기 때문인데 그러면 다른 클래스에서도 이 함수들을 호출하는데 
이런경우는 fried class 로 지정해주면 되었습니다. 

Session 을 상속받은 컨텐츠 세션에서 사용할 인터페이스로 OnConnected, OnRecv, OnSend, OnDisconnected 등의 버추얼 함수도 추가합니다. 

또 이전 Service 에서 세션도 들고 있었습니다. 서비스에서는 세션뿐만아니라 서버의 네트워크 어드레스, IocpCore 등을 가지고 있고 여기서 세션은 또 버퍼, 소켓, 클라이언트의 네트워크 어드레스를 
가지고 있습니다. 

서비스가 처음에 리스너라고 하는 listen 을 하는 세션같은 것을 만들어 Accept 를 하고 클라이언트가 연결되어 클라이언트의 세션을 만들어 또 서비스에서 들고 있게 될겁니다. 
그런데 클라이언트와 서비스의 연결에서 클라이언트도 연결 종료를 하려면 서비스 객체를 들고 있어야 그런 명령을 보낼 수 있을 것입니다. 
여기서 이미 서비스가 세션을 shared_ptr 로 들고 있으니 세션에서 서비스는 weak_ptr 로 들고 있어야 순환 에러가 나지 않습니다. 

그리고 외부에서 사용할 함수들은 DisConnect 세션에서 서비스에 연결을 끊는함수, GetService, SetService 정도 만들면 될것 같습니다. 

또 세션은 멀티스레드 환경에서 동작할 예정이라 락을 사용할것이고 또 네트워크 이벤트 객체를 재사용하기 위해 멤버 변수로 가지고 있으면 좋습니다. 

이제 세션도 서비스를 들고 있을것이기 때문에 서비스에서 CreateSession 을 할때 잊지 않고 Sessino::SetService 를 호출해줘야합니다. 
이때 생성한 세션은 아직 Accept 가 된것이 아니기 때문에 서비스에서 세션을 들고 있지는 않고 이어서 RegisterAccept 를 해 접속을 기다립니다. 

접속이 성공했으면 ProcessConnect 가 호출될건데 여기서 이제야 서비스에 세션을 등록합니다. 이때 아까 CreateSession 에서 세션에 물린 서비스를 GetService 로 가져와 AddSession 을 하면 됩니다. 
그 다음은 접속했을때 컨텐츠단에서 할일을 OnConnected 로 호출해도록하고 다음은 RegisterRecv 도 호출해 패킷수신을 예약해줍니다. 

여기 RegisterRecv 는 먼저 접속여부를 체크하고 WSARecv 를 호출하게됩니다. WSARecv 는 WSABUF 객체를 만들어 리시브 버퍼와 그 길이를 넣어주고 Recv 후 그 결과물을 리시브 버퍼에 받아오게 됩니다. 
다른 인자로는 DWORD numOfBytes, DWORD flags 라는 0값을 가진변수를 참조값으로 넣어주어 함수 완료일때 값을 받아오고 
마지막으로 Recv Event 를 넘겨주면 됩니다. 위에서 네트워크 이벤트 객체를 재사용하기 위해 멤버 변수로 가지고 있을 것이라 했는데 이걸 사용하는 방법도 있고 
좀 더 단순하게 생각하면 매 RegisterRecv 마다 새로 RecvEvent 객체를 만들어 사용하는 방법도 있을겁니다. 
나중에 IocpCore를 통해 WSARecv가 완료 된 후 ProcessRecv 가 호출되면 여기서 이벤트 객체를 삭제해주면 됩니다. 

이렇게 생각하면 이 리시브이벤트는 세션마다 하나씩 계속 사용할것 같습니다. 그렇다 보니 위에서 재사용을 한다고 한것입니다. 
네트워크 이벤트 객체의 오너를 자신으로 넣어주면 이제 이벤트가 세션을 참조하면서 참조 카운트가하나 올라 다른곳에서 삭제하려고 해도 이벤트가 다 끝난 다음에 삭제가 가능해집니다. 

WSARecv 의 결과로 에러코드가 Pending이면 괜찮지만 아니라면 에러 코드를 찍고 위에서 사용한 recvEvent 의 오너를 nullptr 로 밀어줘야 이 세션이 레퍼런스카운트가 릴리즈 되어 삭제가 됩니다. 

만약 WSARecv 가 바로 완료 되거나 조금 지연되어 완료가 되었다면 IocpCore::Dispatch 에서 GetQueuedCompletionStatus 함수에 동작 준비된 네트워크 이벤트를 반환 하게 되고 이 이벤트객체의 오너인 
IocpObject를 복원해 IocpObject->Dispatch 를 하게 됩니다. 이때 세션에서 예약한 이벤트였다면 세션의 Dispatch로 들어오게 됩니다.

Session의 Dispatch 에서는 동작을 시작한 네트워크 이벤트의 타입이 무엇인가에 따라 각 경우에 맞는 함수를 호출해주게 됩니다. 
이벤트 타입이 Recv 였다면 ProcessRecv, Send 였다면 ProcessSend, Connect 였다면 ProcessConnect 를 호출하게 되는건데 

각 프로세스 함수에 들어오면 먼저 해야할것은 네트워크 이벤트의 오너를 nullptr로 밀어서 릴리즈 레퍼런스를 해주는것입니다. 이제 프로세스함수까지 왔다면 입출력함수가 완료된 시점이기 때문입니다. 
프로세스 함수중 Recv, Send 함수는 인자로 numOfBytes 를 받는데 Recv 의 경우는 받은 데이터의 크기, Send 의 경우는 보낸 데이터의 크기를 받습니다. 
이 데이터 크기가 0이라면 연결이 끊겼다라는 것입니다. 
실제로 데이터를 받고 보낸다음 할 컨텐츠는 이후 컨텐츠 코드에서 작업하면 되고 일단 이 프로게스 함수가 끝나기 전에 레지스터 함수를 호출해 끊기지 않고 계속 입출력 함수를 예약을 하게 하면 됩니다. 


다음으로 세션의 틀을 좀 더 만들어 보자면 Send 를 만들어 볼것입니다. 

Send는 Recv와 정책이 완전히 반대입니다.

Recv 의 경우 Service 를 메인 함수에서 만들면서 Listener 도 만들고 Listener 에서는 StartAccept 를 호출하면서 클라이언트의 접속을 예약합니다.
이후 워커 쓰레드의 IocpCore::Dispatch 에서 호출완료된 AcceptEvent 를 통해 클라이언트 세션을 복구한 후 Session::ProcessConnect 를 호출하면서 RegisterRecv 를 하게 됩니다. 
RegisterRecv는 ProcessConnect 에서 한번 호출하게 되면 이후 ProcessRecv 에서 함수가 끝날때 재귀적으로 다시 호출하며 계속 데이터를 받아주게 됩니다. 

Send는 우리가 보낼 데이터가 있을때 예약을 걸어주게 될것이라 정책이 아예 다릅니다. 

Send가 만들때 어려운 부분이라고 합니다. 
버퍼관리 부분도 있고 SendEvent 를 단일로 관리할지 여러개를 관리할지 또 WSASend 는 중첩해서 사용할지 여부도 생각해야합니다. 

어떤의미냐면 Send는 언제 어디서 호출할지 알 수 없습니다. 플레이어가 주변의 몬스터를 사냥한다고 한다면 전투시작하자마자 전투 상태라는 데이터를 서버에 보내야 할것이고 
그 와중에 귓속말을 받게 되면 그 것도 일단 Recv 로 받아서 그 메세지를 화면에 띄웠다고 Send를 해야할것입니다. 
이런식으로 예상 할 수 없이 Send가 사용됩니다. 

그러면 _recvEvent 처럼 내부에서 딱 하나만 만들어 사용할 수 있을지가 문제라는것입니다. 

또 Send에 사용할 SendBuffer 도 생각해볼 문제가 이전 RecvBuffer 처럼 멤버 변수로 char 배열로 관리한다고 하면 예약한 WSASend 가 완료 처리 될때 까지 그 데이터가 유지되어야 
전송이 될건데 멀티쓰레드 환경이고 WSASend를 쓰는 이유도 비동기 논블로킹으로 성능을 끌어 올리려고 하는데 버퍼를 위해 락같은걸 걸어버리면 본말전도가 됩니다. 

아니면 아예 SendBuffer를 크게 잡고 앞의 영역부터 WSASend 를 호출할때 마다 나눠서 사용하고 버퍼의 끝에 도달하면 다시 맨앞으로 돌아와 사용 할 수도 있겠는데 이것이 순환 버퍼의 기초라고 합니다. 

일단 이 버퍼부분은 나중에 다시 다룰것이고
Session에서 Send 를 호출할때마다 SendEvent 를 새로 만들어 사용할것인데 이 SendEvent 에서 버퍼를 들고 있도록 맞기면 각 Send 일감마다의 버퍼가 생길것이니 일단은 이 방법으로 만들어 봅니다. 

세션의 Send 함수에서는 SendEvent를 생성하고 SendEvent가 들고 있는 버퍼에 보낼 데이터를 복사, 그 다음 RegisterSend에 이 SendEvent를 건내줘 WSASend를 보낼 수 있게 해줍니다. 
나중에 IocpCore::Dispatch 에서 타고타고 들어가 ProcessSend 가 호출되어 보낸후 처리를 해줍니다.  
ProcessSend는 다 사용한 SendEvent 를 삭제해주는 코드이고 만약 보낸 데이터의 크기가 0이라면 에러가 난것이니 예외처리를 해준 후 콘텐츠 단에서 사용할 OnSend 를 호출해주는 역할입니다. 


이제 문제는 WSASend 를 막 중첩해서 호출해도 되는가가 문제입니다. 
WSASend 가 쓰레드 세이프 한가는 공식문서를 보면 아는데 사실 쓰레드 세이프 하지 않다고합니다. 그래서 멀티 쓰레드 환경에서 사용할때 락을 걸고 호출해줘야 합니다. 

락을 걸고 호출한다고 하고 다음은 한번에 여러번 WSASend를 걸었을 경우 입니다. 
이 경우는 사실 괜찮은 부분인데 어떤 이유로 WSASend 의 에러코드가 WSA_IO_PENDING 이라면 그 이후 예약된 이벤트들도 다 팬딩 상태가 될거고 이후 처리가 될때는 예약순서대로 처리가 될것이긴합니다. 
하지만 이 데이터를 처리하는 IocpCore::Dispatch 함수를 통한 이후 코드는 쓰레드 세이프 하지 않습니다. 
그래서 이 부분이 공유 데이터를 건드리는 코드가 있다면 처리가 복잡해지고 아니라면 그나마 통과가 될것입니다. 


마지막으로 이전 SocketUtils 에서 가져온 비동기 IO 함수중 ConnectEx, DisConnectEx 는 아직 사용하지 않았습니다. 

먼저 DisConnectEx 는 말 그대로 세션클래스의 멤버 함수중 DisConnect 함수를 보면 현재 소켓의 연결을 끊을때 그냥 소켓을 닫아주고 있습니다. 
물론 이렇게 해도 소켓의 연결은 끊기 지만 그래도 DisConnectEx 를 사용하면 생기는 이점이 있는데 

소켓이라는 것이 사실 생성할때 생각보다 부담이 많이 가기 때문에 금방 다시 사용할것이라고 하면 재사용하는것이 성능에 더욱 좋습니다. 
소켓의 연결은 끊어주되 재사용가능하게 해주는것이 ConnectEx, DisConnectEx, AcceptEx 시리즈 함수들입니다. 

Connect 라는 멤버 함수도 추가해주고 여기서는 일단 RegisterConnect 를 호출해주겠습니다. 
RegisterConnect 함수에서는 연결여부 확인, 자신이 클라이언트 서비스 소속인지를 확인합니다. 클라이언트 소속인것은 일부러 Connect 를 호출하는것은 클라이언트일것이기 때문입니다. 
SetReuseAddress, BindAntAddress 옵션도 설정해줍니다. BindAntAddress 에서 주소부분을 0으로 넣어주면 자신이 가능한 아무 주소로 연결이 됩니다. 클라이언트기때문에 이렇게 할 수 있습니다. 
그리고 IocpCore 에 등록하기 위해서 ConnectEvent 도 필요한데 매번 생성하기보다는 세션에서 멤버 변수로 들고 있어도 될것입니다. 그 후 SocketUtils::ConnectEx 를 호출해줍니다. 
나중에 이 이벤트가 실행된 후에는 ProcessConnect 로 들어오게 될건데 이 함수에 _connectEvent.owner 만 nullptr 로 밀어주게되면 참조 카운트가 릴리즈 될것이고 나머지는 서버, 클라가 동일하게 사용합니다. 
하는 일이 컨텐트오버라이드 함수와 Recv 를 해주는것으로 똑같기 때문입니다. 

Disconnect 도 역시 DisconnectEvent가 필요하기 때문에 IocpEvent 파일에 추가해주겠습니다. 
그리고 Session 클래스에서도 RegisterDisconnect, ProcessDisconnect 를 만들어 줍니다. RegisterDisconnect 는 다른 예약함수와 비슷하게 DisconnectEvent 의 오우너를 세팅해 참조카운트를 늘려주고 
DisconnectEx 를 호출해줍니다. ProcessDisconnect 는 그냥 DisconnectEvent 의 오우너를 nullptr 로 밀어주는것 뿐입니다. 

Service 클래스에서 이전에 ClientService 의 Start를 그냥 비워뒀는데 이 부분을 채웁니다. 
내용은 Service::CanStart를 체크해 sessionFactory 가 있는지를 확인 후 최대 세션갯수 만큼 CreateSession, Connect 를 해줍니다. 

이렇게 만든 ClientService 를 활용해 DummyClient 의 내용을 다시 만들었습니다. 