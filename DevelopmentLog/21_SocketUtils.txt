

이제 배웠던 입출력 모델들 내용을 가지고 실제 사용할 라이브러리들을 만들어 볼것입니다. 

실습하면서 한 파일에 모두 사용했던 코드들을 각 기능에 따라 나누어 관리를할것입니다. 

먼저 소켓들을 초기화 하는 코드, 정리하는 코드들을 묶어 보겠습니다. 

기존 GameServer 파일이나 DummyClient 파일에서 사용하던 헤더, 라이브러리들 

#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

이 것들을 이제 서버 코어에서 관리하도록 할겁니다. 이런 전역적으로 관리할 헤더들은 CorePch.h 에서 관리 하고 있었습니다.

----- ServerCore

---- CorePch
#pragma once

#include "Types.h"
#include "CoreMacro.h"
#include "CoreTLS.h"
#include "CoreGlobal.h"
#include "Container.h"

#include <windows.h>
#include <iostream>
using namespace std;

// windows 헤더 밑에 위치했습니다. 
#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

#include "Lock.h"

#include "ObjectPool.h"
#include "TypeCast.h"
#include "Memory.h" // 메모리 헤더도 추가 


---- SocketUtils
이번에 만들어 볼것이 두가지 클래스가 있는데 그 중 하나 인 소켓 유틸즈입니다. 
--- 헤더 
#pragma once
#include "NetAddress.h"

/*
	Socket Utils
*/

class SocketUtils
{
public:
	// 비동기 커넥트 함수의 포인터가 될것입니다. 
	// 처음은 null 값이지만 이후 런타임에 함수를 가져올겁니다. 
	static LPFN_CONNECTEX		ConnectEx;
	static LPFN_DISCONNECTEX	DisConnectEx;
	static LPFN_ACCEPTEX		AcceptEx;

public:
	static void Init();
	static void Clear();

	static bool BindWindowsFunction(SOCKET socket, GUID guid, LPVOID* fn);
	static SOCKET CreateSocket();

	// 자주 세팅하는 소켓 옵션들
	static bool SetLinger(SOCKET socket, uint16 onoff, uint16 linger);
	static bool SetReuseAddress(SOCKET socket, bool flag);
	static bool SetRecvBufferSize(SOCKET socket, int32 size);
	static bool SetSendBufferSize(SOCKET socket, int32 size);
	static bool SetTcpNoDelay(SOCKET socket, bool flag);
	static bool SetUpdateAcceptSocket(SOCKET socket, SOCKET listenSocket);

	static bool Bind(SOCKET socket, NetAddress netAddr);
	static bool BindAnyAddress(SOCKET socket, uint16 port);
	static bool Listen(SOCKET socket, int32 backlog = SOMAXCONN);
	static void Close(SOCKET& socket);
};

// 소켓 옵션을 조정하는 함수에서 공용으로 쓸 함수 
template<typename T>
static inline bool SetSocketOpt(SOCKET socket, int32 level, int32 optName, T optVal)
{
	return SOCKET_ERROR != ::SetSocketOpt(socket, level, optName, reinterpret_cast<char*>(&optVal), sizeof(T));
}

--- cpp 
#include "pch.h"
#include "SocketUtils.h"

/*
	Socket Utils
*/

LPFN_CONNECTEX		SocketUtils::ConnectEx = nullptr;
LPFN_DISCONNECTEX	SocketUtils::DisConnectEx = nullptr;
LPFN_ACCEPTEX		SocketUtils::AcceptEx = nullptr;

void SocketUtils::Init()
{
	// WinSock 초기화 
	WSADATA wsaData;
	ASSERT_CRASH(::WSAStartup(MAKEWORD(2, 2), OUT & wsaData));

	/* 런타임에 주소 얻어오는 API
	더미 소켓, 가져오고 싶은 함수, 함수를 받을 포인터 순으로 인자를 넣습니다. */
	SOCKET dummySocket = CreateSocket();
	ASSERT_CRASH(BindWindowsFunction(dummySocket, WSAID_CONNECTEX, reinterpret_cast<LPVOID*>(&ConnectEx)));
	ASSERT_CRASH(BindWindowsFunction(dummySocket, WSAID_DISCONNECTEX, reinterpret_cast<LPVOID*>(&DisConnectEx)));
	ASSERT_CRASH(BindWindowsFunction(dummySocket, WSAID_ACCEPTEX, reinterpret_cast<LPVOID*>(&AcceptEx)));

	// 더미 소켓을 닫아줍니다. 
	Close(dummySocket);
}

void SocketUtils::Clear()
{
	::WSACleanup();
}

bool SocketUtils::BindWindowsFunction(SOCKET socket, GUID guid, LPVOID* fn)
{
	// 런타임에 비동기 입출력 함수들을 얻어오는 함수 
	DWORD bytes = 0;

	return SOCKET_ERROR  != ::WSAIoctl(socket, SIO_GET_EXTENSION_FUNCTION_POINTER, &guid, sizeof(guid), fn, sizeof(fn), OUT & bytes, NULL, NULL);
}

SOCKET SocketUtils::CreateSocket()
{
	// ::socket() 대신 Winsock 에서 사용하는 WSASocket();
	return ::WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);
}

bool SocketUtils::SetLinger(SOCKET socket, uint16 onoff, uint16 linger)
{
	LINGER option;
	option.l_onoff = onoff;
	option.l_linger = linger;
	return SetSocketOpt(socket, SOL_SOCKET, SO_LINGER, option);
}

bool SocketUtils::SetReuseAddress(SOCKET socket, bool flag)
{
	return SetSocketOpt(socket, SOL_SOCKET, SO_REUSEADDR, flag);
}

bool SocketUtils::SetRecvBufferSize(SOCKET socket, int32 size)
{
	return SetSocketOpt(socket, SOL_SOCKET, SO_RCVBUF, size);
}

bool SocketUtils::SetSendBufferSize(SOCKET socket, int32 size)
{
	return SetSocketOpt(socket, SOL_SOCKET, SO_SNDBUF, size);
}

bool SocketUtils::SetTcpNoDelay(SOCKET socket, bool flag)
{
	return SetSocketOpt(socket, SOL_SOCKET, TCP_NODELAY, flag);
}

// listenSocket 의 속성을 clientSocket 에 그대로 적용하는 옵션
bool SocketUtils::SetUpdateAcceptSocket(SOCKET socket, SOCKET listenSocket)
{
	return SetSocketOpt(socket, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT, listenSocket);
}

bool SocketUtils::Bind(SOCKET socket, NetAddress netAddr)
{
	return SOCKET_ERROR != ::bind(socket, reinterpret_cast<const SOCKADDR*>(&netAddr.GetSockAddr()), sizeof(SOCKADDR_IN));
}

bool SocketUtils::BindAnyAddress(SOCKET socket, uint16 port)
{
	SOCKADDR_IN myAddress;
	myAddress.sin_family = AF_INET;
	myAddress.sin_addr.s_addr = ::htonl(INADDR_ANY);
	myAddress.sin_port = ::htons(port);

	return SOCKET_ERROR != ::bind(socket, reinterpret_cast<const SOCKADDR*>(&myAddress), sizeof(myAddress));
}

bool SocketUtils::Listen(SOCKET socket, int32 backlog)
{
	return SOCKET_ERROR != ::listen(socket, backlog);
}

void SocketUtils::Close(SOCKET& socket)
{
	if (socket != INVALID_SOCKET)
		::closesocket(socket);
	socket = INVALID_SOCKET;
}


---- NetAddress
이번에 만들 두번째 클래스입니다. 역할은 네트워크 주소 구조체를 만들때 사용하는 여러 함수를 편하게 사용하기위한 래핑 클래스 

--- 헤더 
#pragma once

/*
	NetAddress
*/
// 네트워크 연결때 SOCKADDR_IN 을 편하게 사용할 수 있도록 

class NetAddress
{
public:
	NetAddress() = default;
	NetAddress(SOCKADDR_IN sockAddr);
	NetAddress(wstring ip, uint16 port);

	SOCKADDR_IN&	GetSockAddr() { return _sockAddr; }
	wstring			GetIpAddress();
	uint16			GetPort() { return ::ntohs(_sockAddr.sin_port); }

public:
	static IN_ADDR Ip2Address(const WCHAR* ip);

private:
	SOCKADDR_IN _sockAddr = {};
};


--- cpp
#include "pch.h"
#include "NetAddress.h"

NetAddress::NetAddress(SOCKADDR_IN sockAddr) : _sockAddr(sockAddr)
{
}

NetAddress::NetAddress(wstring ip, uint16 port)
{
	::memset(&_sockAddr, 0, sizeof(_sockAddr));
	_sockAddr.sin_family = AF_INET;
	_sockAddr.sin_addr = Ip2Address(ip.c_str());
	_sockAddr.sin_port = ::htons(port);
}

wstring NetAddress::GetIpAddress()
{
	WCHAR buffer[100];
	::InetNtopW(AF_INET, &_sockAddr.sin_addr, buffer, /*sizeof(buffer) / sizeof(WCHAR)*/ len32(buffer));
	return wstring(buffer);
}

IN_ADDR NetAddress::Ip2Address(const WCHAR* ip)
{
	IN_ADDR address;
	::InetPtonW(AF_INET, ip, &address);
	return address;
}


GetIpAddress 함수에서 사용된 len32 는 직접 만든 매크로입니다. buffer 라는 WCHAR 배열의 사이즈를 구할때 하드코딩을 하기보다는 연산이 되는 코드로 만드는게 좋은데 
그냥 sizeof(buffer) 라고 하면 WCHAR 타입의 크기까지 해서 200 이라는 수가 나오니 sizeof(buffer) / sizeof(WCHAR) 이렇게 코드를 넣어야하는데 이 부분이 실수 할 수 있으니 
매크로로 만든것입니다. 

----- Types

#define size16(val)		static_cast<int16>(sizeof(val))
#define size32(val)		static_cast<int32>(sizeof(val))
#define len16(arr)		static_cast<int16>(sizeof(arr) / sizeof(arr[0]))
#define len32(arr)		static_cast<int32>(sizeof(arr) / sizeof(arr[0]))

이런 매크로를 추가해놨습니다. 

소켓을 다룰때 자주사용할 기능, 네트워크 주소 구조체, 소켓의 옵션들을 쉽게 설정하도록 만든 SocketUtils, NetAddress 클래스 파일들이었습니다. 

SocketUtils 에서 Init 함수를 어디선가는 한번 호출해야 비동기 입출력 함수들을 직접 만든 함수포인터로 가져올 수 있는데 이 것을 굳이 서버에서 하는것 보다는 
서버코어의 CoreGlobal 에서 하도록 하겠습니다. 
---- CoreGlobal
--- cpp 
#include "pch.h"
#include "CoreGlobal.h"
#include "ThreadManager.h"
#include "Memory.h"
#include "DeadLockProfiler.h"
#include "SocketUtils.h"

ThreadManager*		GThreadManager = nullptr;
Memory*				GMemory = nullptr;
DeadLockProfiler*	GDeadLockProfiler = nullptr;

class CoreGlobal
{
public:
	CoreGlobal()
	{
		GThreadManager = new ThreadManager();
		GMemory = new Memory();
		GDeadLockProfiler = new DeadLockProfiler();
		SocketUtils::Init();
	}

	~CoreGlobal()
	{
		delete GThreadManager;
		delete GMemory;
		delete GDeadLockProfiler;
		SocketUtils::Clear();
	}
} GCoreGlobal;

다른 클래스들과 다르게 SocketUtils 는 전부 static 함수로 만들었기 때문에 전역 객체를 만들지 않고 바로 Init() Clear() 를 호출 할 수 있습니다. 

----- GameServer
GameServer 프로젝트에서 사용례를 보겠습니다. 
----GameServer.cpp

#include "SocketUtils.h"

int main()
{
	// SocketUtils 를 사용한 listenSocket 생성과 bind, listen 
	SOCKET listenSocket = SocketUtils::CreateSocket();

	SocketUtils::BindAnyAddress(listenSocket, 7777);

	SocketUtils::Listen(listenSocket);

	// 아직 비동기 입출력 함수는 사용하지 않습니다. 
	// 나중에 IOCP 까지 만들고 연동할것이기 때문

	NetAddress clientAddr;
	int32 clientAddrLen = sizeof(clientAddr.GetSockAddr());
	SOCKET clientSocket = ::accept(listenSocket, reinterpret_cast<SOCKADDR*>(&clientAddr.GetSockAddr()), &clientAddrLen);
	if (clientSocket == INVALID_SOCKET)
		return 0;

	cout << "client Connected" << endl;
}
1