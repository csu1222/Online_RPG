

네트워크 프로그래밍중 소켓프로그래밍을 알아보겟습니다. 

식당의 비유를 다시 들어보자면 

식당에서 고객의 문의 전화를 받아서 해당 서비스를 제공하고 싶습니다. 

고객의 문의 종류에 따라 적절한 곳으로 연결시켜주기도 합니다. 

식당입장에서 일단 직원을 고용해 안내원 역할을 맡길겁니다. 가장처음 고객의 문의 전화를 받고 문의 내용에 따라 해당 부서로 넘겨주는 역할입니다. 
연락을 받을 회사 대표 전화로 문의 전화를 받을겁니다. 

그리고 식당을 영업시작하게 되면 고객이 문의 전화를 하면 직원이 대표전화로 문의 전화를 받게 될겁니다. 용건에 따라 해당 업무를 하는 직원에게 토스를 하게 되면 
이제부터 고객과는 해당 업무 직원사이에서 직접 전화를 하게 됩니다. 

이것과 같은 이야기를 손님의 입장에서 얘기 하자면 
먼저 고객도 일단 전화를 걸려면 자신도 핸드폰이 필요합니다. 
그 다음 회사의 대표 전화번호를 찾아서 전화를 걸면 됩니다. 그러면 처음 안내하는 직원이 담당 직원으로 연결해주고 이제는 담당직원과 대화를 하면됩니다. 

이렇게 알아 봤는데 이 비유를 다시 소켓 프로그래밍으로 표현해보겠습니다. 

서버 입장에서는 Listener 소켓을 준비하고 Bind 를 하면서 통신을 시작할 준비를 하고 통신을 시작하는것이 Listen 그리고 연결확인이 되었다면 Accept 를합니다. 

클라이언트 입장에서는 통신을할 소켓을 준비하고 서버 주소로 Connect를 한 후 Accept가 될때 까지 기다린후 연결 성공했으면 통신을 시작합니다. 

대강 이런 개념이 네트워크 프로그래밍중 소켓 프로그래밍입니다. 


실습을 해보려면 클라이언트와 서버가 필요합니다. 

이전 환경설정을 할때 DummyClient 프로젝트도 만들었었고 또 GameServer 도 사용하고 있었으니 이 두 프로젝트를 사용하겠습니다. 


----- DummyClient 
DummyClient 에 윈도우에서 제공하는 소켓 라이브러리들을 추가해주겠습니다. 

winsock2.h, mssock.h, ws2tcpip.h 
를 추가하고 따로 ws2_32.lib 이라는 것을 가져와야합니다. 

#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

----- GameServer 

#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

GameServer 프로젝트도 똑같이 추가해줍니다.

----- DummyClient 
---- DummyClient.cpp

int main()
{
	// winsock 라이브러리 초기화  (ws2_32 라이브러리 초기화)
	// WORD 타입 윈속 버전과 윈속을 초기화 한 후의 데이터를 받아줄 WSAData 의 주소 
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		/* Tell the user that we could not find a usable */
		/* Winsock DLL.                                  */
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		/* Tell the user that we could not find a usable */
		/* WinSock DLL.                                  */
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");

	// TODO


	// winsock 을 다 사용하면 WSACleanUp 을 호출해야한다
	::WSACleanup();
}

winsock을 사용하려면 먼저 초기화를 해야하는데 ws2_32 라이브러리를 초기화 하는 코드입니다. 

// TODO 아래에 올 코드입니다. 

#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

int main()
{
	// winsock 라이브러리 초기화  (ws2_32 라이브러리 초기화)
	// WORD 타입 윈속 버전과 윈속을 초기화 한 후의 데이터를 받아줄 WSAData 의 주소 
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		/* Tell the user that we could not find a usable */
		/* Winsock DLL.                                  */
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		/* Tell the user that we could not find a usable */
		/* WinSock DLL.                                  */
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");

	// TODO
	// 클라이언트 소켓 만들기 
	// 인자는 총 3개 
	// int af : address family 주소 패밀리 주로 기억해야 하는 것은 AF_INET(IPv4), AF_INET6(IPv6)
	// int type : 새 소켓의 형식 사양 TCP 프로토콜에 사용되는 SOCK_STREAM 혹은 UDP 에 사용되는 SOCK_DGRAM 을 주로 사용한다.
	// int protocol : 사용할 프로토콜 사용할 통신의 세세한 종류에 따라 고를 수 있는데 0 값을 넣어주면 알아서 골라주게 됩니다. 
	// 반환값은 socket descripter 
	SOCKET clientSocket = ::socket(AF_INET, SOCK_STREAM, 0);

	// SOCKET 타입에 커서를 가져다 대면 UINT_PTR 입니다. 정수의 포인터인것인데
	// 운영체제가 이 해당 번호에 해당하는 소켓리소스를 통해 네트워크 통신을 할 수 있게 됩니다. 

	// 소켓을 생성하는데 실패한 예외 처리
	if (clientSocket == INVALID_SOCKET)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "Create Socket ErrorCode : " << errCode << endl;
		return 0;
	}

	// 접속할 서버의 주소를 기입
	SOCKADDR_IN serverAddr; // IPv4 에서 사용되는 주소객체
	::memset(&serverAddr, 0, sizeof(serverAddr));	// serverAddr를 0으로 밀기
	serverAddr.sin_family = AF_INET;	// 사용할 주소체계
	// serverAddr.sin_addr.s_addr = ::inet_addr("127.0.0.1");	// 접속할 주소 하지만 너무 오래되서 사용하는걸 권장하지 않는 방식 
	::inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);	// 현대적인 방식
	serverAddr.sin_port = ::htons(7777);	// 접속할 포트 번호 

	// 정해진 주소로 연결시도 
	// 인자는 순서대로 소켓, 주소 구조체, 주소구조체의 사이즈를 받습니다. 
	if (::connect(clientSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "Connect ErrorCode : " << errCode << endl;
		return 0;
	}

	// 연결성공 이 후로 데이터 송수신 가능 

	cout << "Connecte To Server" << endl;

	while (true)
	{
		// TODO

		this_thread::sleep_for(10ms);
	} 
	
	// 소켓 리소스 반환 
	::closesocket(clientSocket);
	
	// winsock 종료
	::WSACleanup();
}

여기까지 클라이언트에서 연결을 할 준비가 된것입니다. 

이제 서버쪽을 작업해보겠습니다. 

----- GameServer 


#include "winsock2.h"
#include "MSWSock.h"
#include "WS2tcpip.h"
#pragma comment(lib, "ws2_32.lib")

int main()
{
	// winsock 초기화는 공통적인 부분
	WORD wVersionRequestes;
	WSAData wsaData;

	int err;

	wVersionRequestes = MAKEWORD(2, 2);
	err = ::WSAStartup(wVersionRequestes, &wsaData);

	// err 가 0 이면 성공 아니면 실패
	if (err != 0)
	{
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}

	// wsaData.wVersion 의 상위 바이트는 부버전 하위 바이트는 주버전을 뜻함 
	// 아래 코드는 winsock 버전이 2.2 가 아닌경우의 예외 처리를 하고 있습니다. 
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
		printf("Could not find a usable version of Winsock.dll\n");
		WSACleanup();
		return 1;
	}
	else
		printf("The Winsock 2.2 dll was found okay\n");


	// 서버의 소켓 만들기 
	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);

	// 소켓을 생성하는데 실패한 예외 처리
	if (listenSocket == INVALID_SOCKET)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "Create Socket ErrorCode : " << errCode << endl;
		return 0;
	}

	// 서버는 연결할 목적지 주소가 아니라 서버 자신의 주소를 설정
	SOCKADDR_IN serverAddr; // IPv4 에서 사용되는 주소객체
	::memset(&serverAddr, 0, sizeof(serverAddr));	// serverAddr를 0으로 밀기
	serverAddr.sin_family = AF_INET;	// 사용할 주소체계
	serverAddr.sin_addr.s_addr = ::htonl(INADDR_ANY);	// 주소를 알아서 넣어달라 (고정주소를 넣어주면 딱 그 주소만 사용해야 하기 때문)
	serverAddr.sin_port = ::htons(7777);	// 접속할 포트 번호 

	// listen socket 에 서버 주소를 주고 bind
	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "Bind ErrorCode : " << errCode << endl;
		return 0;
	}

	// 연결준비 완료 
	// 인자로 소켓과 백로그라는 것을 받는데 백로그는 최대 연결 대기열 번호 
	if (::listen(listenSocket, 10) == SOCKET_ERROR)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "Listen ErrorCode : " << errCode << endl;
		return 0;
	}

	// 연결 성공 후 데이터 송수신 가능 

	while (true)
	{
		// 클라이언트가 connect 요청을 했다면 그것을 승락하는 accept
		
		SOCKADDR_IN clientAddr;	// 연결시도한 클라이언트의 주소를 받아줄 구조체
		::memset(&clientAddr, 0, sizeof(clientAddr));
		int32 addrLen = sizeof(clientAddr);

		// 클라이언트와 데이터를 주고 받을 소켓 
		SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
		if (clientSocket == INVALID_SOCKET)
		{
			int32 errCode = ::WSAGetLastError();
			cout << "Accept ErrorCode : " << errCode << endl;
			return 0;
		}

		// 클라이언트 입장
		// 클라이언트의 아이피를 찍어 보겠습니다. 
		char ipAddress[16];
		::inet_ntop(AF_INET, &clientAddr.sin_addr, ipAddress, sizeof(ipAddress));
		cout << "Client Connected! IP = " << ipAddress << endl;
	}

	// winsock 종료
	::WSACleanup();
}
