

패킷 직렬화란 

데이터를 납작하게 1열로 만드는 작업입니다. 

직렬화는 꼭 네트워크 통신에서만 사용하는 개념은 아니고 파일 입출력에서도 사용되는 개념입니다. 

어떤 게임을 로컬파일에 저장하기위해서 그 데이터 그대로를 세이브 파일로 만들고 다시 실행할때 그대로 로드해 실행한다고 해보겠습니다.
이러면 에러가 나게되는데 왜 이런 현상이 일어나나면 동적할당을 하게 되면 힙영역에 할당이 되고 그 주소를 포인터에 담게 됩니다. 

이 객체의 주소가 사실 가상주소라서 실제 메모리의 주소가 아니라 한번 러닝을 할때마다 바뀌는 주소값입니다. 
그래서 한번 실행했을때의 주소를 파일에 저장을해도 아무 소용이 없는것입니다. 

패킷직렬화 라는것은 이런 데이터들을 바이트배열로 납작하게 압축하는 작업이라고 할 수 있습니다. 


기존 코드를 가지고 정식으로 직렬화 해볼건데 Make_S_TEST 같은 함수를 예시로 들어볼것입니다. 
지금처럼 패킷에 하나하나 직접 넣어주는 방법도 소규모 프로젝트에서는 가능하지만 나중에는 데이터를 넣은 순서도 신경써야하고 패킷종류자체가 많아지면 더욱 관리가 어려워집니다.

그래서 자동화를 해주는것이 좋습니다. 자동화를 하기 위해 패킷 설계도를 만들어서 그 설계도 대로 패킷 수신, 송신 함수생성을 자동생성해주게 될겁니다. 

패킷 설계하는 확장자가 XML, JSON 등도 있고 아니면 많이 사용하는 구글 제공 Protobuf 형식의 패킷 설계도 있습니다. 


먼저 XML 파일로 패킷을 설계해볼겁니다. 

struct BuffData
{
	uint64 buffId;
	float remainTime;
};

struct S_TEST
{
	uint64 id;
	uint32 hp;
	uint16 attack;
	vector<BuffData> buffs;
};
이런 구조체를 XML로 수정해봅니다. 

비주얼 스튜디오에서 새 항목으로 XML 파일을 만들고 
<?xml version="1.0" encoding="utf-8"?>
<PDL>
	<Packet name="S_TEST" desc="테스트 용도">
		<Field name="id" type="uint64" desc=""/>
		<Field name="hp" type="uint32" desc=""/>
		<Field name="attack" type="uint16" desc=""/>
		<List name="buffs" desc="">
			<Field name="buffId" type="uint64" desc=""/>
			<Field name="remainTime" type="float" desc=""/>
		</List>
	</Packet>
</PDL>
이런 코드를 작성하면 패킷을 표현한것입니다.

이부분이 자동화가 된다고 가정을 하고 다음단계를 고민해보자면 추가적으로 처리할 부분은 서버입장에서는 보안이 중요합니다.

우리가 데이터를 패킷으로 직렬화 해서 보내도 받는 쪽에서는 OnRecv 로 받으면서 바이트 배열을 받고 WSARecv 의 결과물의 크기를 int32로 받게 될 겁니다. 
이 크기를 가지고 패킷을 조립해 사용하게 될건데 이 사이즈 크기를 100% 신용할 수가 없습니다. 
그렇기 때문에 한번 검증을 해줘야 합니다. 

어떻게 걸러야 할지를 고민해봐야하는데 그 방법이 뚜렷하지 않습니다. 
만약 패킷구조가 고정 크기데이터만으로 되어있으면 크기들을 합산해 체크하면 될텐데 만약 wstring, vector 같은 가변길이 데이터를 담은 패킷이라고 하면 
크기가 고정되어 있지 않으니 먼저 미리 데이터의 크기를 건내준다는 가정이 꼬입니다. 
기존 방법인 데이터를 넣어준 순서대로 꺼내는 방법으로 하면 고정 크기 데이터를 다 꺼낸 후가 되어서야 다음 가변 크기 데이터의 데이터 갯수를 알 수 있기에 그 때 데이터를 추출 할 수 있고 
이 데이터의 파싱이 끝나야 다음 가변길이 데이터의 파싱이 진행할 수 있었습니다. 
그래서 지금 방법이 간단하고 직관적인것은 맞지만 뒤에 배치된 데이터를 파싱하기위해서는 앞의 모든 데이터들을 전부 파싱해야 그 데이터의 크기를 유추할수 있습니다. 

유일하게 고려할 수 있는 것은 BufferReader 의 Peek, Read 를 할때 버퍼의 남은 여유 공간을 FreeSize() 로 확인하면서 진행을 하고 있습니다. 
이런것과 마찬가지로 >> 연산자 오버라이딩에서도 버퍼의 남은 공간을 넘지 않았는지 체크하는 식으로 만들 수 있기는 할것입니다. 

하지만 온라인게임에서 패킷에 데이터를 밀어 넣고 꺼내는 작업은 너무나도 빈번하게 일어날것인데 그때마다 항상 데이터의 크기를 체크하는 것은 성능의 낭비가 너무나도 심해질것입니다. 



본격적으로 이런 직렬화 기법에 대해 알아볼것입니다.

다시 기초부터 고정크기 데이터만 패킷으로 만들어 보낸다고 하겠습니다. 
이런 경우 어떤 구조체의 크기를 단번에 알 수 있을겁니다. 각 구성 원소 타입의 크기를 더한만큼이 될것이기 때문인데 
이 패킷을 받았을때도 구조체의 각 원소를 하나씩 꺼내기보다 구조체인 상태로 꺼내도 될것 같습니다. 그런데 이때 조심해야할 부분이 있습니다. 

sturct PKT_S_TEST
{
	uint32 hp;
	uint64 id;
	uint16 attack;
}

이런 구조체가 있다고 하겠습니다. hp = 1, id = 2, attack = 3 이라는 값을 넣고 이 것을 빌드 후 중단점을 걸어 이 구조체의 메모리에 접근해 살펴보면 
메모리가 01 00 00 00 cc cc cc cc 02 00 00 00 00 00 00 00 00 03 00 cc cc ... 
이런식입니다. int32 타입인 hp 의 값이 01 00 00 00 뒤에 cc cc cc cc 라는 쓰레기 값이 들어 있습니다. 이렇게 되면 이 구조체의 크기가 uint64, uint32, uint16 크기를 더한게 아니고 
더 크게 잡힐것입니다. 바이트로 계산하면 4 + 8 + 2 = 14 바이트가 되는데 실제 메모리상에서 크기를 알아보면 24 바이트로 잡힙니다. 각 변수별로 8바이트 씩이 잡히는것 같은데 

왜 이러냐면 바이트 정렬과 관계가 있습니다. 64bit 환경에서 실행할때는 8바이트의 배수로 접근해야 더욱 빠르게 데이터를 꺼내올 수 있게 됩니다. 
그래서 각 변수들을 8 바이트씩으로 크기가 잡힌것입니다. 다시 코드로 표현하자면 아래와 비슷한 상태인것입니다. 

struct PKT_S_TEST
{
	uint32 hp;
	uint32 dummy;
	uint64 id;
	uint16 attack;
	uint32 dummy;
	uint16 dummy;
}

이런 원리 때문에 네트워크상에서 위와 같은 구조체를 보내게 될 때는 4바이트, 8바이트, 2바이트 데이터가 들어가야 하는데 그렇지 않다는것입니다. 
하지만 이 문제가 아주 큰 문제는 아닌것이 명령어로 1바이트씩 단위로 나열할것이라고 컴파일러에 힌트를 줄 수 있습니다. 

#pragma pack(1)
sturct PKT_S_TEST
{
	uint32 hp;
	uint64 id;
	uint16 attack;
}
#pragma pack()

이런 명령어를 사용하면 아까 그 현상이 없어집니다. 그렇기 때문에 앞으로 패킷을 설계할때 위 아래로 #pragma pack() 으로 감싸주게 되면 고정 크기 데이터라도 예상한 크기가 나오지 않는 
문제를 고칠 수 있습니다. 

이후 어떻게 수정할것이냐면 PKT_S_TEST 의 앞에 따로 붙혔던 PakcetHeader 데이터를 PKT_S_TEST 안에 멤버변수로 합쳐 버립니다. 그리고 고정 크기 데이터들을 담고나서 마지막에 가변크기 데이터를 
설명하는 데이터를 넣고 가변길이 데이터 자체는 PKT_S_TEST 뒤로 붙힙니다. 

이렇게 하면 이 패킷 구조를 핸들링하는 ClientPacketHandler::Handle_S_TEST 함수에서 인자로 받은 패킷의 len 과 sizeof(PKT_S_TEST) 를 비교해 일단 고정크기 데이터 부분까지 
적합한 패킷이 왔는지 1차적으로 체크할 수 있을겁니다. 이어서 패킷의 뒤에 있는 가변 크기 데이터의 정보를 가지고 뒤에 실제 가변크기 데이터 만큼의 데이터가 왔는지를 확인 할 수 있습니다. 
그래서 PKT_S_TEST 구조체 안에 가변 크기 데이터에서 사용하는 타입을 선언해놔야 합니다. 

PKT_S_TEST 라는 struct 안에 적합성을 체크하는 멤버 함수도 만들어 줄것입니다. 
버퍼의 크기를 기록할 uint32 타입의 로컬 변수 size를 하나 만들고 여기에 먼저 고정 크기 데이터만큼인 sizeof(PKT_S_TEST) 를 더해주고 이어서 가변길이 데이터 하나의 크기와 그 갯수를 곱해 다시 size에 더해줍니다. 
만약 가변길이 데이터가 한가지 뿐이라면 여기서 끝이 됩니다. 

이 size 라는 정수가 패킷 헤더 위치에 있는 패킷 전체 크기와 비교해 같지 않다면 false 가 될것입니다. 
그리고 가변 크기 데이터의 갯수외에도 패킷의 시작 주소를 기점으로 가변크기 데이터가 언제 등장하는지 일종의 인덱스를 뜻하는 Offset도 알고 있어야합니다. 
이 Offset 이 정상적인 위치를 가리키고 있는지를 또 한번 체크해야합니다. 
Offset 의 값에 가변 크기 데이터의 총 크기를 더한 값이 헤더에 적힌 패킷 사이즈보다 크다면 뭔가 잘못된것이기 때문에 이것도 false가 됩니다. 
모두 통과 했으면 이제 제대로된 크기의 패킷이 도착했다고 할 수 있습니다. 

#pragma pack(1)

// [ PKT_S_TEST ][BuffsListItem BuffsListItem BuffsListItem]
struct PKT_S_TEST
{
	struct BuffsListItem
	{
		uint64 buffId;
		float remainTime;
	};

	uint16 packetSize; // 공용 헤더
	uint16 packetId; // 공용 헤더
	uint64 id; // 8
	uint32 hp; // 4
	uint16 attack; // 2
	uint16 buffsOffset;
	uint16 buffsCount;

	bool Validate()
	{
		uint32 size = 0;
		size += sizeof(PKT_S_TEST);
		size += buffsCount * sizeof(BuffsListItem);
		if (size != packetSize)
			return false;

		if (buffsOffset + buffsCount * sizeof(BuffsListItem) > packetSize)
			return false;

		return true;
	}
	//vector<BuffData> buffs;
	//wstring name;
};
#pragma pack()

이런 코드가 될것입니다. 

ClientPacketHandler::Handle_S_TEST 의 코드는 이렇게 됩니다. 

void ClientPacketHandler::Handle_S_TEST(BYTE* buffer, int32 len)
{
	BufferReader br(buffer, len);

	if (len < sizeof(PKT_S_TEST))
		return;

	PKT_S_TEST pkt;
	br >> pkt;			// 고정 크기 데이터 파싱

	if (pkt.Validate() == false)
		return;

	//cout << "ID: " << id << " HP : " << hp << " ATT : " << attack << endl;

	vector<PKT_S_TEST::BuffsListItem> buffs;

	buffs.resize(pkt.buffsCount);
	for (int32 i = 0; i < pkt.buffsCount; i++)	// 가변 크기 데이터 파싱
		br >> buffs[i];

	cout << "BufCount : " << pkt.buffsCount << endl;
	for (int32 i = 0; i < pkt.buffsCount; i++)
	{
		cout << "BufInfo : " << buffs[i].buffId << " " << buffs[i].remainTime << endl;
	}
}


그리고 이제 패킷을 만드는 쪽인 GameServer 프로젝트의 ServerPacketHandler::Make_S_TEST 코드를 보면 이렇게 됩니다. 

SendBufferRef ServerPacketHandler::Make_S_TEST(uint64 id, uint32 hp, uint16 attack, vector<BuffData> buffs, wstring name)
{
	SendBufferRef sendBuffer = GSendBufferManager->Open(4096);

	BufferWriter bw(sendBuffer->Buffer(), sendBuffer->AllocSize());

	PacketHeader* header = bw.Reserve<PacketHeader>();	// 패킷 헤더를 예약해 공간을 마련
	// id(uint64), 체력(uint32), 공격력(uint16)
	bw << id << hp << attack;							// 고정크기 데이터 밀어 넣기

	struct ListHeader
	{
		uint16 offset;
		uint16 count;
	};

	// 가변 데이터
	ListHeader* buffsHeader = bw.Reserve<ListHeader>();	// 가변 크기 데이터의 헤더를 예약

	buffsHeader->offset = bw.WriteSize();				// 가변 크기 데이터 헤더의 내용을 밀어 넣기 
	buffsHeader->count = buffs.size();

	for (BuffData& buff : buffs)						// 가변 크기 데이터를 밀어 넣기 
		bw << buff.buffId << buff.remainTime;

	header->size = bw.WriteSize();						// 모두 작성한 패킷의 크기를 패킷헤더에 작성
	header->id = S_TEST; // 1 : Test Msg

	sendBuffer->Close(bw.WriteSize());

	return sendBuffer;
}


이번 버전의 직렬화 방법이 사실 구글에서 제공하는 플랫버퍼의 기본원리입니다. 
플랫버퍼 방식은 고정 크기 데이터와 가변 크기 데이터를 섞어서 배치하지않고 가변 크기 데이터를 뒤에 배치해 관리하는 방법이었습니다. 




-------------

다음 직렬화 방법을 알아보겠습니다. 

지금까지는 직렬화 된 패킷을 받아 저장할때 임시 컨테이너를 만들어 패킷에 들어있는 데이터 순서대로 꺼내 정리 하고 있습니다. 
패킷을 만들때도 데이터를 밀어 넣기 위해 임시 컨테이너를 만들어 넣고 있습니다. 

이런 임시 컨테이너는 엄밀히 컨텐츠단에서 필요한게 아니라 패킷을 만들기 위해 만든 임시 객체입니다. 
이것이 딱히 잘못됐다는 것은 아니고 코드가독성이 높아지는 장점이 있고 반면 데이터 복사 비용이 늘어나는 단점도 있습니다. 

그래서 이번 방식은 데이터를 패킷으로 만들때 임시객체를 만드는 과정을 뛰어넘어 바로 꽂아주고 꺼내 사용할때도 바로 꺼내 사용하는 방식입니다. 

패킷을 읽는 쪽 ClientPacketHandler 에서 작업을 해볼건데 이전까지 PKT_S_TEST 의 임시 변수를 만들고 BufferReader 의 >> 연산자로 데이터를 꺼내주고 있었는데 이번에는 
PKT_S_TEST 의 포인터 변수를 만들고 받은 버퍼를 그냥 캐스팅 해볼겁니다. 

	PKT_S_TEST* pkt = reinterpret_cast<PKT_S_TEST*>(buffer);

이러면 그냥 받은 인장의 버퍼의 시작주소부터 PKT_S_TEST 타입으로 인식을 해버리는 겁니다. 이러면 복사 비용이 생기지 않습니다. 
거기에 이전 방식에서는 버퍼의 내용을 가져올 때 한번 버퍼의 크기가 PKT_S_TEST 의 크기 보다 큰지를 확인 하고 나서 데이터를 꺼냈어야하는데 
캐스팅을 하면서 일단 그냥 PKT_S_TEST* 로 인식을 해볼 수 있습니다. 
이때 만약 패킷 조작이 있었다면 캐스팅한 pkt를 사용하면 안될 수 있습니다. 

그래서 바로 이어서 Validation 체크를 해야 합니다. 이미 PakcetSession 의 OnRecv에 의해 적어도 받은 패킷의 PacketHeader의 크기는 들어 왔다는게 확인되기 때문에 
받은 버퍼가 pakcetSize, packetId 는 가지고 있다는걸 알 수 있습니다. 이 정보를 가지고 받은 패킷의 사이즈가 PKT_S_TEST 타입의 크기보다 작은지를 체크할 수 있습니다. 작다면 곧바로 뭔가 이상하다는것을 
알 수 있으니 리턴을 합니다. 통과 했다면 일단 고정크기 데이터까지는 있다는걸 알 수 있고 나머지 buffsCount, buffsOffset 을 통해 가변 크기 데이터도 정확히 들어왔는지를 체크 할 수 있습니다. 

	bool Validate()
	{
		uint32 size = 0;
		size += sizeof(PKT_S_TEST);
		if (packetSize < size)
			return false;

		size += buffsCount * sizeof(BuffsListItem);
		if (size != packetSize)
			return false;

		if (buffsOffset + buffsCount * sizeof(BuffsListItem) > packetSize)
			return false;

		return true;
	}

Validation 체크를 했으면 이제 pkt 뒤에 가변 크기 데이터를 꺼내 사용하면 됩니다. vector<PKT_S_TEST::BuffsListItem> 으로 꺼내 사용해도 되겠습니다. 
하지만 이러면 아이템을 꺼내 사용하는 부분이 BufferReader 의 >> 연산자를 사용하기 때문에 오류가 뜰 수 있지만 개념은 이렇게 됩니다. 

여기까지만 봐서는 WSARecv 로 받은 버퍼를 복사한것이 아니라 받은 버퍼를 PKT_S_TEST* 로 관점을 바꿔 보는 방식입니다. 

이 다음으로 이제 위에서 Vector로 BuffsListItem 를 꺼내 사용하지 않고 사용하는 방법을 생각해보겠습니다. 이 vector 에 들은 타입이 뭔지는 이미 PKT_S_TEST 에 담겨 있으니 알 수 있고 
버퍼에 담긴 BuffsListItem 의 주소와 다음에 올 원소의 시작주소를 알고 있으면 이제 연결리스트처럼 따로 복사를 하지 않아도 연결된 컨테이너를 표현할 수 있을것입니다.

범용적으로 사용하기 위해서 템플릿 타입을 사용해야할것입니다. 템플릿 타입네임을 T 라고 하겠습니다. 
들고 있는 멤버 변수는 T* _data; 와  uint16 _count 라고 갯수를 들고 있을 것입니다. 
기본 생성자는 데이터도 없고 카운트도 없는 버전으로 하나 만들고 두번째 생성자는 데이터와 카운트를 인자로 받아 생성하는 버전을 만듭니다. 
편하게 벡터 처럼 사용하기 위해 T& 를 반환하는 [] 연산자 오버로드로 uiint16 타입 index를 인자로 받아서 _data[index] 를 반환하면 됩니다. 하지만 혹시라도 오버플로우 체크로 
index 가 _count 보다 작은지를 체크해주면 됩니다. 

template<typename T>
class PacketList
{
public:
	PacketList() : _data(nullptr), _count(0) { }
	PacketList(T* data, uint16 count) : _data(data), _count(count) { }

	T& operator[](uint16 index)
	{
		ASSERT_CRASH(index < _count);
		return _data[index];
	}

	uint16 Count() { return _count; }

private:
	T* _data;
	uint16		_count;
};


이렇게 설계를 했으면 이제 PKT_S_TEST 안에서 BuffsList 라는 것을 선언해 사용할 수 있습니다. 

	using BuffsList = PacketList<PKT_S_TEST::BuffsListItem>;

이 BuffsList를 반환하는 멤버 함수도 만들어 줄것입니다. 

	BuffsList GetBuffsList()
	{
		BYTE* data = reinterpret_cast<BYTE*>(this);
		data += buffsOffset;
		return BuffsList(reinterpret_cast<PKT_S_TEST::BuffsListItem*>(data), buffsCount);
	}

this 를 계산하기 쉽게 BYTE* 로 캐스팅하고 buffsOffset 을 더해주는데 이것이 고정크기 데이터 만큼의 크기로 가변 크기 데이터 시작 지점으로 주소를 옮긴것입니다. 
그리고 나서 BuffsListItem* 타입으로 BuffsList를 만들면서 buffsCount 크기 만큼을 만듭니다.

이렇게 버퍼에 데이터가 아주 많다고 해도 모두 복사해 사용하는게 아니라 포인터로 가리키면서 연결리스트처럼 사용할 수 있습니다. 
[] 인덱스 접근하는 방식을 만들었고 


결국 패킷의 데이터를 꺼낼때 꼭 임시객체에 복사해 사용해야하는건 아니고 그냥 그대로 가져다 사용해도 되는것입니다. 