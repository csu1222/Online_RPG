

BufferReader 와 BufferWriter 는 버퍼를 만든 순서 그대로 파싱을 해야하는 문제가 있었습니다. 
그리고 패킷끼리 구분이 잘 안되는 점도 아쉬웠습니다. 

그래서 전문적으로 패킷을 다루는 클래스를 만들어 주는게 좋을것입니다. 그게 PacketHandler 입니다. 
DummyClient, GameServer 두 프로젝트에 각각 ClientPacketHandler, ServerPacketHandler 클래스 추가를 해줬습니다. 

먼저 DummyClient 프로젝트의 ClientPacketHandler 에서 이전 OnRecvPacket 의 코드를 대신 관리할것입니다. 

Dummyclient 에 ClientPacketHandler.h 를 include 해주고 또 ServerCore 프로젝트 CorePch.h 에 Session.h 를 include 해주면 아마 
빨간줄이 없어질것입니다. 

여기서 ClientPacketHandler 에 더 추가할 것은 패킷의 타입들을 enum으로 관리해 어떤 명령의 패킷인지를 구분 해주는것입니다. 
예를들어서 지금까지 계속 테스트 했던 에코서버 코드의 를 S_TEST 패킷이라고 하면 (S_ 가 붙은건 이 패킷이 서버로 가는 패킷이라는 뜻)

if else 문이나 switch case 문으로 패킷의 타입이 S_TEST 라면 이전 에코서버 코드로 들어가 처리를 하도록 하고 
나중에 S_LOGIN, S_ENTER_GAME 같은 패킷은 그에 맞는 코드로 연결해주게 될것입니다. 

그래서 온라인게임이라는게 패킷의 종류가 한두개가 아닐것이라 수십개의 조건문을 사용해 관리를 하게 될 수도 있습니다. 
컨텐츠를 만들면서 패킷 타입과 조건문, 그리고 그 조건문에서 들어가는 패킷 핸들 함수 등을 매번 만들어 주는것입니다. 

이부분은 나중에 보완할 수 있을것인데 일단은 간단하게 switch case 문으로 진행했습니다. 


에코서버 코드를 ClientPacketHandler::Handle_S_TEST 함수로 만들어 관리를 해주겠습니다. 

HandlePacket 함수에서 BufferReader 객체를 가지고 헤더를 추출해 패킷을 구별해주었는데 그 구별후 들어온 Handle_S_TEST 함수에서 다시 
BufferReader 객체를 만들에 본격적으로 데이터를 파싱합니다. 
이번 테스트에서는 일단 가변길이 데이터 ("Hello Wolrd!" 라는 string)은 빼고 header, id, hp, attack 만 가지고 테스트하겠습니다. 

현재까지 임시적인 패킷 설계를 struct로 표현하자면 

struct S_TEST
{
    uint64 id;
    uint32 hp;
    uint16 attack;
}
이렇게 될겁니다 여기서 일단 DummyClient 쪽은 빌드를 하고 GameServer 로 넘어가겠습니다. 


GameServer 는 똑같이 ServerPacketHandler 에 HandlePacket 함수를 만들고 GameServer.cpp 에서 BroadCast 하던 코드를 가져올겁니다. 
BufferReader 객체를 만들고 header를 읽어와 해당 패킷헤더를 조건문으로 거르고 패킷 핸들 함수를 호출합니다. 
이때는 한번 그냥 헤더를 꺼내는것 말고 엿보는 Peek 함수를 써봐도 됩니다. 

아직 Client 쪽에서 보내는 패킷이 없기 때문에 Server 쪽 HandlePacket 에서는 받아줄 필요가 없습니다. 

대신 서버에서 패킷을 만들어 보낼것이니 그 함수는 만들어 볼것입니다. 
Make_S_TEST 라는 함수로 만들건데 이 부분이 GameServer 메인 쓰레드에서 SendBuffer를 만들어 보내는 코드입니다. 
지금은 테스트 코드지만 만약 이 코드를 진짜 여러곳에서 가져다 사용해야 하는 경우라면 함수로 만들어 묶어 사용하는것이 관리에 좋을것입니다. 
Make_S_TEST 함수는 반환 타입을 SendBufferRef 를 반환하도록 하고 필요한 데이터들을 다 인자로 받아 생성해줄 수 있으면 좋겠습니다. 

그런데 이러고 GameServer 를 빌드해보면 에러가 뜰겁니다. 
BufferWriter 코드중에 << 연산자 오버라이드 중에서 아래 두버전 각각 왼값참조 버전과 오른값 참조 버전을 만들었었습니다. 

template<typename T>
BufferWriter& BufferWriter::operator<<(const T& src)
{
	*reinterpret_cast<T*>(&_buffer[_pos]) = src;
	_pos += sizeof(T);
	return *this;
}

template<typename T>
BufferWriter& BufferWriter::operator<<(T&& src)
{
	*reinterpret_cast<T*>(&_buffer[_pos]) = std::move(src);
	_pos += sizeof(T);
	return *this;
}

하지만 오른값 참조 버전에 template 를 같이 사용하면 사실 보편참조 방식이 됩니다. 
보편참조가 굉장히 강력한 것이라 왠만하면 다 여기로 들어오게 됩니다. 그래서 왼값참조 방식이 별로 의미가 없어집니다. 

보편참조에 들어온 왼값과 오른값이 아래처럼 변환이 됩니다. 

왼값변환 : const T&
오른값변환 : T&&

그런데 이 BufferWriter의 이 << 오버라이드를 사용하는 코드가 ServerPacketHandler::Make_S_TEST 함수였는데 이 함수의 인자가 uint64, uint32, uint16 이렇게였습니다.

만약 uint64 타입을 << 연산한다고 하면 uint64 는 왼값이다 보니 

	*reinterpret_cast<const uint64&*>(&_buffer[_pos]) = std::move(src);
	_pos += sizeof(T);
	return *this;
이렇게 치환이 되는데 uint64 의 참조값의 포인터로 캐스팅하려다 보니 에러가 났습니다. 

어떻게 해결해야하냐면 

	*reinterpret_cast<const uint64*>(&_buffer[_pos]) = std::move(src);
이런식으로 치환되도록 만들어 줘야합니다. 

	using DataType = std::remove_reference_t<T>;

이런 템플릿 문법이 있습니다. 
어떤 문법이냐면 T 라는 템플릿 타입에서 참조값(&)을 빼겠다라는 의미입니다. 
그래서 왼값변환 후 const int64 라는 상태가 되는겁니다. 그리고 보편참조이다 보니 소스를 std::move 가 아니라 std::forward 로 변환해야합니다. 

template<typename T>
BufferWriter& BufferWriter::operator<<(T&& src)
{
	using DataType = std::remove_reference_t<T>;
	*reinterpret_cast<DataType*>(&_buffer[_pos]) = std::forward<DataType>(src);
	_pos += sizeof(T);
	return *this;
}
이렇게 되는것입니다. 

문제가 해결되었고 빌드가 통과 됩니다. 

이제 서버 통신하는 과정은 비슷하지만 패킷을 만들고 보내는 부분을 클래스화 해서 관리하는것입니다.
지금사용하는 int, bool, float 같은 것들은 지금처럼 그냥 값을 넣고 패킷에 넣으면 됩니다. 
하지만 가변적인 길이를 가진 데이터를 보내야할때 부터 조금 생각을해야합니다. 

예를들어 string이나 vector 같은 데이터를 보내야할때는 string의 경우 그 문자열의 길이에따라 그리고 vector 도 원소의 갯수에 따라 보낼 버퍼의 크기가 달라질것입니다. 
가장 정석적인 방법은 가변데이터의 size 원소들의 갯수를 보내고 그 다음 가변데이터에 들은 원소를 하나씩 꺼내 버퍼에 밀어 넣습니다. 
그러면 버퍼를 받는쪽에서 이 가변데이터의 원소 타입을 알면 갯수와 데이터타입크기를 가지고 총 버프의 길이를 알 수 있습니다. 

버퍼를 만드는 쪽은 이렇게 만들면 되고 버퍼를 읽는 쪽 입장을 보면 먼저 기존의 고정길이 데이터를 다 꺼내면 다음 들어있는건 가변길이 데이터의 사이즈입니다. 
이것도 따로 꺼낸 후 그 사이즈만큼 for 문을 돌면서 가변데이터를 하나씩 꺼내주면 됩니다. 

그래서 가변길이 데이터라고 해도 들어있는 갯수와 그 타입을 알면 버퍼를 해석할 수 있는겁니다. 