

리더 라이터 락이라는 것을 만들어 사용할것입니다.

왜 굳이 표준 mutex를 두고 새로 락을 만드냐면 

표준 mutex의 문제가 있는데 일단 재귀적으로 락을 잡을 수 없다는 문제가 있습니다. 
어떤 함수에서 mutex로 락을 잡고 그 함수 안에서 호출한 함수에서 다시 락을 잡으면 크래시가 납니다. 

이 문제는 따로 우회할 방법이 있기는 한데 
이것보다 더 심각한 문제는 경우에 따라서 가끔 상호배타적 특성이 필요한 경우가 생깁니다. 

어떤상황에 이런 특성이 필요한지 예를 들어보자면 
주간던전 보상테이블이 거의 고정되어있어서 항상 똑같은 보상만 줘도 된다면 이 데이터는 락을 딱히 걸지 않아도 됩니다. 
하지만 아주 가끔 한 일주일에 한번 드랍률 이벤트로 보상을 수정하게 된다면 아주 낮은 확률로 데이터가 오염이 될 수 있습니다.

이 아주 낮은 확률의 버그때문에 락을 사용하는것은 너무 아까운데 이때 사용할 수 있는것이 리더 라이터 락입니다.
거의 대부분은 락을 걸지 않은것마냥 그냥 사용하다가 Write를 하게 되는경우에 기존 락과 같이 상호배타적으로 동작하는것이 
Reader-Writer 락입니다. 

리더 라이터락도 표준으로 사용하는 클래스가 있는데 굳이 직접 만드는 이유는 연습삼아 만들어 보는것도 있고 
원하는 형태로 최적화도 되고 정책을 골라줄 수 있고 또 데드락을 방지하는 코드를 미리 넣어줄 수 도 있을겁니다. 

만들 락은 Reader-Writer Lock 중에서도 Reader-Writer SpinLock 을 만들것입니다. 
게임에서는 데이터 참조를 잠깐만하고 바로 놔주는 경우가 많기 때문에 스핀락으로 만드는것입니다. 

락을 만들때 32비트의 크기로 만들것이고 또 16비트씩을 나누어 관리할겁니다.

[WWWWWWWW] [WWWWWWWW] [RRRRRRRR] [RRRRRRRR] 

하위 16비트는 Read flag, 상위 16비트는 write flag 를 뜻합니다. 

W : WriteFlag (Excusive Lock Owner ThreadId 현재 이 락을 획득하고 있는 쓰레드의 아이디)
R : ReadFlag (Shared Lock Count 공유해 사용하고 있는 리드 카운트)

----- ServerCore
---- Lock
--- 헤더 
#pragma once
#include "Types.h"

/*
	RW SpinLock
*/

class Lock
{
	enum : uint32
	{
		ACQUIRE_TIMEOUT = 10000,
		MAX_SPIN_COUNT = 5000,
		WRITE_THREAD_MASK = 0xFFFF'0000,
		READ_COUNT_MASK = 0x0000'FFFF,
		EMPTY_FLAG = 0x0000'0000,
	};
public:
	void WriteLock();
	void WriteUnlock();
	void ReadLock();
	void ReadUnlock();

private:
	Atomic<uint32> _lockFlag = EMPTY_FLAG;
	uint16 _writeCount = 0;
};

사용할 이넘들중에 MASK 라는 것들과 EMPTY_FLAG 는 뭐하는 이넘인지 잘 모를 수 있는데 
위에서 상위 하위 16비트씩을 용도를 나눠 사용한다고 했었습니다. 그중에 WRITE_THREAD_MASK 와 and 연산을하면 상위 16비트 WriteFlag 값만 가져올 수 있고 
READ_COUNT_MASK 와 and 연산을 하면 하위 16비트 ReadFlag 를 가져올 수 있습니다.

그리고 멤버 변수중 _writeCount 를 사용하는 이유는 이 변수를 수정할때는 경합에 승리한 쓰레드만 접근하거나 아니면 동일한 쓰레드가 다시 접근하는경우만 있을것이기 때문에 
아토믹으로 만들지 않아도 되었습니다.

--- cpp
#include "pch.h"
#include "Lock.h"
#include "CoreTLS.h"

void Lock::WriteLock()
{
	// 아무도 소유 및 공유하고 있지 않을 대. 경합해서 소유권을 얻는다 
	// 즉 이 락의 _lockFlag 가 EMPTY_FLAG 상태라면 가장 먼저 도착한 쓰레드의 쓰레드 아이디를 상위 16비트에 작성합니다.
	/*
	의사 코드로 만들어 보면 
	if (_lockFlag == EMPTY_FLAG)
	{
		const uint32 desired = ((LThreadId << 16) & WRITE_THREAD_MASK);
		_lockFlag = desired;
	}

	하지만 이 작업을 멀티쓰레드 환경에서 하면 위험하기 때문에 원자적으로 동작해야합니다.
	*/

	// 동일한 쓰레드가 소유하고 있다면 무조건 성공
	const uint32 lockThreadId = (_lockFlag.load() & WRITE_THREAD_MASK) >> 16;
	if (LThreadId == lockThreadId)
	{
		_writeCount++;
		return;
	}

	// 데드락 상황이거나 너무 오래걸리면 의도적으로 크래시를 내겠습니다.
	const int64 beginTick = ::GetTickCount64(); // 시작시간

	const uint32 desired = ((LThreadId << 16) & WRITE_THREAD_MASK);

	while (true)
	{
		for (uint32 spinCount = 0; spinCount < MAX_SPIN_COUNT; spinCount++)
		{
			uint32 expected = EMPTY_FLAG;
			if (_lockFlag.compare_exchange_strong(OUT expected, desired))
			{
				_writeCount++;
				return;
			}
		}

		// 경과한 시간이 너무 길면 크래시
		if (::GetTickCount64() - beginTick >= ACQUIRE_TIMEOUT)
			CRASH("LOCK TIME OUT");

		this_thread::yield();
	}
}

이 WriteLock 함수에서는 헤더의 이넘 MASK 들을 활용해 지금 이 락에 들어온 쓰레드가 처음으로 들어온 소유권을 가진 쓰레드인지를 판별하고 맞다면 그 쓰레드 아이디를 상위 16비트에 저장하고 있습니다.
만약 동일한 쓰레드에서 재귀적으로 호출했을때는 따로 락을 잡지 않고 그냥 _writeCount만 늘려줍니다. 


void Lock::WriteUnlock()
{
	// ReadLock 다 풀기 전에 WriteUnlock 불가능
	if ((_lockFlag.load() & READ_COUNT_MASK) != 0)
		CRASH("INVALID_UNLOCK_ORDER");

	const int32 lockCount = --_writeCount;
	if (lockCount == 0)
		_lockFlag.store(EMPTY_FLAG);
}

WriteUnlock 은 좀 더 내용이 쉽습니다. 락을 풀면서 _writeCount 를 1 감소 시키고 그 값이 0 이라면 락을 해제 하는 코드입니다. 
그런데 그 전에 한가지 체크가 있는데 _lockFlag 가 READ_COUNT_MASK 와 비트플레그가 곂치는지를 확인하고 있습니다. 
왜 이런 체크를 하냐면 Read 락을 다 풀기 전에는 Write 락을 풀지 못하게 하려는겁니다. 
Write 락은 한번에 하나의 쓰레드만 접근할 수 있는 상호배타적인 락인데 Read 락은 한번에 여러 쓰레드의 접근을 허용하는 락입니다. 
이런 상황에서 Read 락을 다 풀지 않은 때에 Write 락을 풀게 되면 메모리 오염이 일어 날 수 있습니다. 


void Lock::ReadLock()
{
	// 동일한 쓰레드가 소유하고 있다면 무조건 성공
	const uint32 lockThreadId = (_lockFlag.load() & WRITE_THREAD_MASK) >> 16;
	if (LThreadId == lockThreadId)
	{
		_lockFlag.fetch_add(1);
		return;
	}

	// 아무도 소유하고 있지 않을 때 경합해서 공유 카운트를 올린다.
	const int64 beginTick = ::GetTickCount64();
	while (true)
	{
		for (uint32 spinCount = 0; spinCount < MAX_SPIN_COUNT; spinCount++)
		{
			// Write 락 플레그 부분을 0으로 밀고 비교를 할것이니 Write락이 잡히지 않은 상황을 말함
			uint32 expected = (_lockFlag.load() & READ_COUNT_MASK);

			// 성공했다면 락을 잡았다는것 실패했다면 write락이 먼저 잡혀있거나 중간에 새치기를 당해 expected 값이 달라졌거나
			if (_lockFlag.compare_exchange_strong(OUT expected, expected + 1))
				return;
		}

		if (::GetTickCount64() - beginTick >= ACQUIRE_TIMEOUT)
			CRASH("LOCK_TIME_OUT");

		this_thread::yield();
	}
}

ReadLock 함수는 WriteLock 함수때와 같이 Write 락을 잡고있는 동일한 쓰레드에서 재귀적으로 Read 락을 잡을때는 성공으로 판정이 됩니다. 
한 쓰레드 내에서는 락을 굳이 잡을 필요가 없기 때문입니다. 대신 WriteLock 에서 재귀적으로 락을 잡을때는 _writeCount 를 증가 시켜주었지만 
ReadLock 에서는 _lockFlag 를 증가시킵니다. 하위 16비트 자체가 쓰레드 아이디를 저장한게 아닌 Read 락을 잡은 카운트를 세고 있기 때문입니다. 

그리고 나서 MAX_SPIN_COUNT 횟수동안 시도하면서 _lockFlag 와 READ_COUNT_MASK 의 & 값인지를 체크하고 있습니다. READ_COUNT_MASK 부분과 비교한다는것은 
다른 쓰레드에서 먼저 Write 락을 잡았다면 일단 상위 16 비트의 값이 있을것이기 때문에 락을 못잡습니다. 
아니면 중간에 다른 쓰레드가 Read 락을 먼저 잡으면서 _lockFlag 의 하위 read Count 값이 달라졌으니 다시 시도를 해야하는 상황입니다. 

여기서도 GetTickCount64 를 통해 너무 오래걸린다면 크래시를 내줍니다.


void Lock::ReadUnlock()
{
	if ((_lockFlag.fetch_sub(1) & READ_COUNT_MASK) == 0)
	{
		// 여기로 들어왔다면 ReadUnlock 하기 전부터 Read Count 가 0이었다
		CRASH("MULTIPLE_UNLOCK");
	}
}

ReadUnlock 은 아주 쉬운데 그냥 _lockFlag 를 1 감소 시키는겁니다. 그런데 한가지 체크를 겸하고 있는데 READ_COUNT_MASK 부분이 0 이었다면 이상한 상황입니다.
fetch_sub 는 감소시키기 전의 값을 반환하기 때문에 이 값이 0이라는것은 락을 해제하기전에 카운트가 0이 되었다는것이니 크래시를 내줍니다.


Reader-Writer Lock 에서 
주의해야할 점은 WriteLock 과 ReadLock 함수의 시작부분처럼 Write 락을 먼저 잡은 쓰레드 내부에서 다시 Write 락을 잡을 수도 있고 Read 락을 다시 잡을 수도 있습니다. 
하지면 WriteUnlock 함수에서는 _lockFlag 의 READ_COUNT_MASK 부분이 0이 아니라면 크래시를 내줍니다. 
즉 Read 락을 먼저 잡은 쓰레드가 재귀적으로 다시 Write 락은 잡지 못합니다. 
왜냐하면 Read 락을 먼저 잡은쓰레드는 상호배타적인 상태라고 확신할 수 없습니다. 

이렇게 직접 Lock을 만들었다고 해도 매번 직접 WriteLock WriteUnlock, ReadLock ReadUnlock 을 사용하는것은 번거롭기 때문에 
락가드를 만들어 주겠습니다.

Lock 헤더에 같이 만들어 줄것입니다.

--- 헤더 
class ReadLockGuard
{
public:
	ReadLockGuard(Lock& lock) : _lock(lock)
	{
		_lock.ReadLock();
	}

	~ReadLockGuard() { _lock.ReadUnlock(); }

private:
	Lock& _lock;
};

class WriteLockGuard
{
public:
	WriteLockGuard(Lock& lock) : _lock(lock)
	{
		_lock.WriteLock();
	}

	~WriteLockGuard() { _lock.WriteUnlock(); }

private:
	Lock& _lock;
};

Read 락 Write 락을 나누어 생성자에서 락을 잡고 소멸자에서 락을 푸는 방식입니다. 


---- CoreMacro
락가드를 더욱 편하게 사용할 수 있는 매크로를 만들어 주겠습니다. 

/*
		Lock
*/
#define USE_MANY_LOCKS(count)	Lock _locks[count];
#define USE_LOCK				USE_MANY_LOCKS(1)
#define READ_LOCK_IDX(idx)		ReadLockGuard readLockGuard_##idx(_locks[idx]);
#define READ_LOCK				READ_LOCK_IDX(0)
#define WRITE_LOCK_IDX(idx)		WriteLockGuard writeLockGuard_##idx(_locks[idx]);
#define WRITE_LOCK				WRITE_LOCK_IDX(0)

이런 매크로를 만들었습니다. 이 매크로가 어떤 의미인지 예시를 들어가면서 확인해보겠습니다.


----- GameServer
---- GameServer
--- cpp

class TestLock
{
	USE_LOCK;
	// 사실상 아래의 코드가 들어간것
	// Lock _locks[1];

public:
	int32 TestRead()
	{
		READ_LOCK;

		if (_queue.empty())
			return -1;

		return _queue.front();
	}

	void TestPush()
	{
		WRITE_LOCK;
		_queue.push(rand() % 100);
	}

	void TestPop()
	{
		WRITE_LOCK;

		if (_queue.empty() == false)
			_queue.pop();
	}
private:
	queue<int32> _queue;
};

TestLock testLock;

TestLock 이라는 테스트용 클래스를 만들었습니다. 별 다른 의미없이 READ_LOCK 을 걸고 데이터 읽는 작업을 하고 WRITE_LOCK 을 걸면 데이터 수정을 하는 멤버 함수를 가지고 있습니다.

void ThreadWrite()
{
	while (true)
	{
		testLock.TestPush();
		this_thread::sleep_for(1ms);
		testLock.TestPop();
	}
}

void ThreadRead()
{
	while (true)
	{
		int32 value = testLock.TestRead();

		cout << value << endl;
		this_thread::sleep_for(1ms);
	}
}

두가지 쓰레드의 일감 함수들입니다. 루프를 돌면서 함수들을 호출해주고 있습니다. 


int main()
{
	for (int32 i = 0; i < 2; i++)
	{
		GThreadManager->Launch(ThreadWrite);
	}

	for (int32 i = 0; i < 5; i++)
	{
		GThreadManager->Launch(ThreadRead);
	}

	GThreadManager->Join();
}
각 역할의 쓰레드들을 만들어 테스트를 해보면 잘 동작합니다. 


그런데 이렇게 테스트를해보면 표준 mutex를 사용하는것보다 직접 만들어 사용할 만큼의 이득이 있는지가 잘 안느껴 질겁니다. 
Read 락을 잡는부분이 대부분인 경우에는 Read에 접근하는 쓰레드들끼리 경합이 발생하지 않으면서 read Count 만 증가시켜주기 때문에 효율이 좋고 
가끔 Write 락을 잡을경우에만 상호배타적으로 경합을 하며 코드를 진행합니다. 

