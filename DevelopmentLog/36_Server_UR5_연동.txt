직접 만든 IOCP 서버와 언리얼엔진을 연동할것입니다. 

그 전에 서버를 정리할건데 직접 만들었던 Allocator와 MemoryPool 등을 다 표준으로 바꿀것입니다. 
최신의 표준 라이브러리도 충분히 성능이 좋기 때문에 굳이 직접 만든 라이브러리를 사용할 필요가 없다고 합니다. 

바뀌는 점은 메모리 풀을 삭제하고 표준 new delete를 사용할 것면서 관련 코드를 뺍니다 


언리얼엔진 프로젝트와 C++ IOCP 서버를 Protobuf 연동할것입니다. 
서버쪽 라이브러리를 가져와야하는데 기본적인 C++ 프로젝트와는 속성창이 다릅니다. 
언리얼엔진 프로젝트 위치에도 Protobuf를 가져와야하는데 이전 서버에서 사용하던 google 폴더와 libprotobuf.lib 같은 파일을 가져옵니다. 
그리고 ProtobufCore.build.cs 파일도 만들어야 합니다. 내용은 어느 디렉토리를 참조할것인지 지정해줍니다. 이 코드가 이전 서버에서 Visual Studio 설정에서 경로를 추가하던 부분입니다. 

프로토버프를 사용하는 큰이유중 하나는 프로토 파일로 패킷구조를 설계하고 protoc.exe 로 컴파일할때 옵션을 주면 C++ 이던지 C# 이던지 알아서 변환을 해주기 때문에 
C++ 서버와 유니티를 같이 사용하는게 더 용이해집니다. 

서버에서 언리얼엔진으로 가져올것은 proto 파일자체가아니라 서버에서 proto파일을 컴파일한 결과물들을 가져오면 됩니다. 

서버에서 가져온 파일들은 일단 Libraries 의 Include 폴더와 Libs 폴더에있는 Protobuf 폴더를 가져왔고 
또 DummyClient 폴더에 있는 protocol.pb.cc, protocol.pb.h, enum.pb.cc, enum.pb.h, struct.pb.cc, struct.pb.h 와 ClientPacketHandler.h, ClientPacketHandler.cpp 
여기에 또 ServerCore 폴더에 있는 BufferReader.h, BufferReader.cpp, BufferWriter.h, BufferWriter.cpp 를 가져왔습니다. 

몇가지 오류가 있는데 컴파일과정에 경고가 생기는 부분이지만 무시해도 되기 때문에 pb.cc 파일에 include 되는 라이브러리 파일인 port_def.inc 맨마지막에 
뜬 경고코드를 무시하도록 명령어를 적습니다. 

그리고 OnlineRPG.build.cs 와 ProtobufCore.build.cs 에 추가한 파일들의 경로를 추가해줍니다. 

여기까지 하면 아직 ClientPacketHandler 가 제대로 동작을 안할것인데 이부분은 일단 주석처리로 막아두고 빌드를 해서 통과 시킵니다.


------------------------

다음은 언리얼엔진 클라이언트에서 패킷세션을 만듭니다. 

네트워크통신을 시작하면서 소켓이 필요한데 기존 서버에서 사용하던 WinSock은 이름대로 윈도우에서만 동작하는 소켓입니다. 그래서 혹시 모를 확장성을 위해 언리얼엔진에서는 기본적으로
FSocket을 사용합니다. 

그리고 소켓연결같은 네트워크 연결을 어느 시점에서 시도하게 될거냐면 게임을 시작하고 로그인 버튼을 누를때 시작할겁니다. 이 시점에서 네트워크 연결 요청을 해주는 주체가 필요한데 
일단 가장 범용적으로 사용 할 수 있는 게임 인스턴스 클래스를 사용하겠습니다. 

네트워크 연결에 세션이라는 개념을 사용했었는데 세션이 무엇인지 다시 집어보자면 
세션은 일종의 대사관으로 네트워크 연결에 필요한 여러 정보들을 세션이라는 대사관에서 관리합니다. 소켓, 네트워크 주소 객체, 리시브 버퍼, 샌드버퍼 등을 가지고 한번에 관리합니다. 

그런데 지금 작업은 클라이언트를 만들고 있는데 그러면 서버와의 연결만 신경쓰면 되는데 굳이 세션클래스를 만들어 관리해야하는지 그냥 게임인스턴스에서 전역으로 세션이 가지고 있어야할
데이터를 다 관리하면 되지 않는가 생각이 듭니다. 
맞는말입니다. 포트폴리오 수준에서는 게임 인스턴스에 다 관리하는 방법도 괜찮은데 실무에서는 경우에 따라 클라이언트도 연결을 다중으로 해야할 경우도 생깁니다. 
예를 들어 로비서버와 인게임서버가 분리되는 경우도 있고, 진짜로 물리적으로 서버가 다른경우도 있습니다. 이런경우에는 세션클래스를 따로 두는것도 괜찮을겁니다. 

일단은 간단하게 만들기 위해 따로 게임 인스턴스 자체에서 관리하는 방식으로 했습니다. 

소켓은 FSocket으로 들고 있을것이고 주소도 FString 타입으로 들고 있고. 포트 번호도 int16으로 들고 있을겁니다. 

게임인스턴스의 멤버함수로는 연결할때와 연결을 끊을때 함수가 필요할텐데 먼저 
연결할때 언리얼엔진의 블루프린트로도 사용할 수 있는 명령어인 
	UFUNCTION(BlueprintCallable)
을 붙히고 ConnectToGameServer, DisconnectFromGameServer 두가지 함수를 만듭니다. 
ConnectToGameServer 에서 FSocket의 사용법으로 소켓을 만들고 주소객체를 만들고 Connect를 시도한후 그 결과에 따라 코드를 진행하게 됩니다. 

여기까지 하고 테스트를 해볼 수 있는데 게임서버를 실행해 두고 OnlineRPG 언리얼엔진으로 엽니다. 
직접 만든 OnlineRPGGameInstance 를 기본 게임 인스턴스로 설정하고 레벨 블루프린트에서 OnlineRPGGameInstance 를 가져와 ConnectToGameServer 를 비긴플레이 노드에 연결해 줍니다.
그러고 나서 실행해보면 이제 서버측에서도 연결되면 로그가 찍힐것이고 클라이언트에서도 로그가 찍힐겁니다. 

이제 한번 세션개념을 추가해볼겁니다. 클래스 이름은 PacketSession 입니다. 이 패킷세션은 대사관의 역할을 할건데 여기서 FSocket을 사용할때 이 소켓이 기본적으로 
블로킹 소켓입니다. 그러다 보니 Socket 일을 할 쓰레드를 만들어 할당해줘야합니다. 그 역할을 NetworkWorker 라는 이름의 클래스로 만듭니다.

NetworkWorker 에서는 RecvWorker, SendWorker 두가지 클래스와 FPacketHeader 스트럭트를 사용합니다. 
FPacketHeader는 이름대로 이 NetworkWorker 안에서 사용하는 패킷의 헤더입니다. 
RecvWorker, SendWorker 도 이름대로 각 Recv, Send 를 담당하는 일꾼입니다. 각 객체의 생성자에서 쓰레드를 하나씩 새로 만들어 동작합니다. 

ClientPacketHandler 를 복원하기 위해서 SendBuffer 클래스도 필요한데 이 클래스를 어디서 관리할지는 개인의 선택이긴합니다. 
프로젝트에서는 OnlineRPG.h, OnlineRPG.cpp 를 만들어 여기서 관리합니다. 

ClientPacketHandler 를 복원해보면 OnlineRPG.h를 include 해줘야 하는데 이 코드는 어짜피 PacketGenerator 에서 자동화 처리를 하고 있던 부분이라 직접 수정한다고 해도 다시 돌아가게 됩니다. 
그래서 PacketGenerator 의 샘플인 PacketHandler 템플릿에 언리얼에서는 OnlineRPG.h 를 추가하도록 명령어를 사용하면 됩니다. 이때 ClientPacketHandler 안에서 make_shared도 
언리얼에서 사용하는 TSharedPtr을 사용하도록 매크로를 작성합니다. 

---------------------------------------

버그가 있는데 GameServer 의 Session 코드중에 RegisterSend와 Send, ProcessSend 함수를 봐야합니다. 
Send의 경우는 워낙 패킷을 많이 보내기 때문에 멀티쓰레드를 사용해야하는데 Send나 ProcessSend를 할때 처음으로 들어온 쓰레드는 RegisterSend로 들어가게됩니다. 
