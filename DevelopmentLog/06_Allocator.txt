

    할당자

C++ 에서는 메모리 할당 해제를 직접관리해줘야합니다. 

기본적으로는 new, delete 명령어로 메모리 할당 해제를 하는데 
이것을 직접 다시 만들어 사용할겁니다. 왜 그래야 하는지를 알아야합니다. 

메모리를 할당하다는것은 유저레벨의 코드로 메모리 할당을 실행하면 컨텍스트 스위칭이 일어나면서 커널레벨에서 메모리를 할당받아와서 그 메모리에 
원하는 데이터를 저장하는식이 될겁니다. 무조건 이 과정을 거친다기보다는 이럴 확률이 있다는것입니다. 
하지만 이 컨텐스트 스위칭이라는 행위가 부담이 간다는 것입니다. 
그래서 한번 컨텍스트 스위칭을 할때 아예 큰 메모리를 할당받아서 조금 씩 나누어 사용하면 컨텍스트 스위칭의 횟수를 줄일 수 있을겁니다.

또 다른 이유는 컨테이너들을 사용하게되면 자잘자잘하게 메모리를 할당받을 때가 있습니다. vector 같은것은 배열이 꽉차게되면 조금씩 늘려가면서 다시 메모리를 할당받게 됩니다. 
이런 할당과 커다란 메모리를 할당하는것들이 뒤섞여 있다고 했을때 자잘한 메모리들은 메모리 해제를 하게 되었다면 큰 메모리 사이에 작게 비어있는 메모리 들이 남는데 
이부분은 마침 그 안에 들어가는 메모리 말고는 사실상 사용하지 못하는 메모리가 되어버립니다. 

이러한 부분들을 관리해주기위해서 직접 할당자를 만들어 사용하는것입니다. 

하지만 이제는 마이크로소프트에서 기본적으로 메모리를 효율적으로 관리해주기 때문에 굳이 필요하지 않게 되었다고는합니다. 
그래도 한번 이해는 하고 넘어가는게 좋을겁니다. 

이부분은 프로젝트에 적용은하지 않고 개념만 다시 집고 넘어가겠습니다.


일단 먼저 기본적으로 사용하던 new, delete 는 사실 오버로딩 대상입니다. 

void* operator new (size_t size)
{
    cout << "New! << size << endl;
    void* ptr = ::malloc(size);
    return ptr;
}

void operator delete (void* ptr)
{
    cout << "Delete!" << endl;
    ::free(ptr);
}

void* operator new[] (size_t size)
{
    cout << "New[]! << size << endl;
    void* ptr = ::malloc(size);
    return ptr;
}

void operator delete[] (void* ptr)
{
    cout << "Delete[]!" << endl;
    ::free(ptr);
}

이렇게 오버로딩을 하고 실제로 사용해보면 

int main()
{
    class Knight
    {
        public:

        private:

    }

    Knight* knight = new Knight();
    delete knight;
}
이 메인 함수를 실행하면 재밌게도 기존 new delete 에는 없던 로그를 찍는 부분이 같이 실행됩니다. 

그러니깐 충분히 우리가 new delete 커스터마이징해 사용할 수 있을겁니다. 
하지만 모든 new, delete 상황에서 커스터마이징한 버전을 사용하는건 어렵습니다. 
외부라이브러리는 표준의 new delete를 사용할것이기 때문인데 

그래서 좀 다른 방법으로 사용할것입니다. 위처럼 new delete를 전역으로 오버로딩하는게 아니라 일정 클래스 내부에서 정의를 해주는겁니다. 
정의를 할때 앞에 static 키워드만 붙여주면 마치 전역처럼 사용을 할 수 있습니다. 

멤버 static 함수로 new delete를 사용하는것에 아쉬운점은 매 클래스마다 정의를 해줘야 하는 귀찬음입니다. 

그래서 다음 방법은 다른이름으로 new delete를 하도록 만들어 주는것입니다. 

따로 클래스를 만들어 중간에 가로채서 커스텀 할당자로 사용할 수 있습니다. 


-------------------------

Stomp Allocator

또 다른 방식의 스톰프 얼로케이터입니다. 

성능상으로 더 좋은 방법은 아니고 버그를 잡을때 유용한 방법입니다. 

메모리쪽에서 버그를 잡는게 중요한것이 제대로 관리되지 않은 메모리를 접근하게 되면 아무도예상할 수 없는 부분에서 심각한 문제가 발생하기 때문입니다. 

어떤 객체를 할당한 후 그 안의 멤버 변수를 참조하다가 객체를 삭제한다고 해도 그 메모리 주소에 접근, 수정이 될 수도 있습니다. 
보통은 객체가 해제된 후에는 쓰레기 값을 주게 되는데 어쩌다가 메모리가 해제되자마자 다른 객체가 그 근처의 메모리에 할당이 된다고 하면 
의도하지 않은 데이터수정이 일어날 수 있습니다. 이것을 Use After Free 라고 합니다. 
그래도 Use After Free 문제는 스마트 포인터로 참조 카운트만 추적해줘도 됩니다. 

하지만 스톰프 얼로케이터를 사용해야할 다른 이유도 있습니다. 

만약 vector<int32> v { 1, 2, 3, 4, 5 }; 
이런 벡터가 있다고 하겠습니다. 이 벡터를 루프돌면서 원소값을 사용한다고 하겠습니다. 

for (int32 i = 0; i < 5; i++)
{
    int32 value = v[i];
    // TODO
    if (value == 3)
    {
        v.clear();
    }
}

원소의 값이 3이면 벡터를 날려준다고 되어있습니다. 하지만 for 루프는 3 이후로도 돌게 되기 때문에 유효하지않은 4, 5 값의 위치에 접근하게 됩니다. 
이 문제가 컴파일러에서 잡혀서 크래시가 나면 다행이지만 못잡을 수도 있는것이 문제입니다. 

그리고 마지막으로 발생하는 문제는 캐스팅문제이니다. 
상속관계의 클래스를 캐스팅하다 일어나는 일인데 

class Player
{
    public:
    private:
}

class Knight : public Player
{
    public: 
    Knight (int32 hp) : _hp(hp)
    {
    }
    ~Knight() { } 

    int32 _hp = 0;
}

Player* p = new Player();

Knight* k = static_cast<Knight*>(p);

이런 상황입니다. 부모클래스에서 자식클래스로 캐스팅을 하면서 처음 할당받을때 _hp 의 메모리는 할당 받지도 않았으면서 캐스팅후에 접근을 하게되는 상황입니다. 


이런 문제들을 잡기 위해 스톰프 얼로케이터를 사용한다는것입니다. 

먼저 스톰프 얼로케이터의 개념을 알기 전에 기본적인 가상 메모리에 대해 알아야합니다. 

- 가상 메모리 
가상메모리가 무슨 말이냐면 지금까지 포인터와 객체를 만들면서 객체의 주소를 포인터가 가지고 있다고 했는데 
이 주소가 사실은 실제 물리적인 메모리의 주소가 아니라는 말입니다. 

무슨말이냐면 

int* num = new int;     // 이런 int 객체를 만들고 
*num = 100;             // 그 주소에 *로 접근해 100이라는 값을 넣었습니다. 

int64 address = reinterpret_cast<int64>(num);   // num의 주소를 int64로 캐스팅해서 address 라는 변수에 저장을했습니다. 

그러면 num이 위치한 실제 메모리의 주소와 address 의 값이 서로 같지 않다는것입니다.

다른 프로그램을 실행해 address 의 값을 직접 포인터의 값으로 줘보겠습니다.

int* num2 = reinterpret_cast<int*>(12345678);   // 12345678 이 address 의 값이었다고 치겠습니다. 
*num2 = 200;           

이러면 num 객체의 값은 100 일지 200일지 생각을 해봐야합니다. 
다른 프로그램에서는 서로의 객체를 건드릴 수 없습니다. 

생각해보면 다른 프로그램이라도 같은 주소를 건드리면 간섭이 되야할것 같습니다. 왜냐하면 한 프로그램에서 사용하는 포인터의 주소가 실제 주소가 아니라 가상주소입니다. 
운영체제에서 RAM에 한 프로그램마다 사용하는 메모리가 있을텐데 이 RAM의 주소를 그대로 쓰는게 아니라 가상의 주소로 치환해 사용하게됩니다. 

왜 이렇게 하냐면 예시처럼 한 컴퓨터에서 여러가지 프로그램을 같이 실행할것입니다. 그냥 인터넷 브라우저 하나만 사용한다고 해도 운영체제 자체에서 백그라운드에 실행하는 함수들이 많습니다. 
이런 여러 프로그램에서 실수로라도 서로의 데이터를 건드리게 되면 아주 위험해질겁니다. 해킹에도 위험해지고 크래시도 많이 날겁니다. 
그래서 아예 프로그램끼리는 침범하지 못하도록 주소를 나누어 둔겁니다. 

이런 가상메모리에 대한 내용도 알아야 하고 다음은 메모리의 사용법입니다. 

- 메모리를 관리할때의 기법
임의로 2GB 라는 메모리를 사용하겠다고 하겠습니다. 이 메모리에 옵션을 줄 수 있습니다. 옵션이라면 2GB의 어떤 부분은 접근해 수정할 수 있고 어떤 부분은 접근해 읽을 수만 있고 어떤 부분은 아예 외부에서 접근을 못한다는것입니다. 
이런 정책들을 2GB에서 1byte 씩 세세하게 관리를 해야한다고 하면 이 관리를 할때 그 정보를 위해 최소한 또 2GB의 메모리가 필요할겁니다. 1byte는 어떻게 사용할것이라는 정보가 또 1byte 씩 
필요할것이니 말입니다. 
당연히 이런것은 말이 안되는 소리입니다. 

그래서 실질적으로 메모리를 관리할때는 page 단위로 관리를 한다고 합니다. 1KB, 4KB 같은 크기의 page 가 있는데 보통을 4KB 라고 합니다. 
페이지라는것은 예를 들자면 모델하우스 같은겁니다. 메모리의 견본을 page 라고 하는것입니다. 이런것을 paging 페이징이라고 합니다. 

윈도우에서는 기본적으로 페이지 사이즈가 4KB 라고 되어있을겁니다. 
직접 알아보려면 

SYSTEM_INFO info;
::GetSystemInfo(&info);

info.dwPageSize; // 4KB (0x1000)   기본 페이지 단위
info.dwAllocationGranularity    // 64KB(0x10000)  메모리를 할당할때 이 값의 배수로 반환

지금까지 메모리 할당 해제를 하는 new delete 는 엄밀히 말하면 C++의 표준의 문법입니다. 
이 것은 C++의 표준이라는것이지 운영체제에서 통하는 명령어는 아닙니다. new 는 C++ 의 컴파일러가 다시 해석에 운영체제에 메모리를 요구하는 함수가 따로 있다라는 것입니다. 

::VirtualAlloc();
::VirtualFree();

이 두가지 함수가 운영체제에 직접 메모리 할당 해제를 요청하는 함수입니다.

시그니처를 좀 더 자세히 알아보자면 

LPVOID VirtualAlloc(
  [in, optional] LPVOID lpAddress,
  [in]           SIZE_T dwSize,
  [in]           DWORD  flAllocationType,
  [in]           DWORD  flProtect
);

첫번째 인자 lpAddress는 메모리를 할당할 주소입니다. 이 옵션을 주면 해당 주소부터 메모리를 할당을 하는것이고 NULL로 주게되면 알아서 할당을 한 후 그 위치를 반환합니다. 
두번째 인자 dwSize는 할당할 메모리의 크기입니다. 할당할 클래스의 크기를 주면 됩니ㅏㄷ. 
세번째 인자 flAllocationType 는 할당할 메모리의 유형입니다. 할당할 메모리를 예약만 할것인지 아니면 예약도 하고 바로 실제 할당도 받을것인지를 고릅니다. 
네번째 인자 flProtect 은 할당할 메모리의 보안 정책을 정합니다.
예를 들어보겠습니다. 

int* test = (int*)::VirtualAlloc(NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE); 
이렇게 사용하면 아무 주소에 4바이트크기로 예약과 할당을 동시에 해주고 읽기와 쓰기가 다 되도록 할당을 받습니다. 

VirtualFree 는 이렇습니다. 
BOOL VirtualFree(
  [in] LPVOID lpAddress,
  [in] SIZE_T dwSize,
  [in] DWORD  dwFreeType
);

첫번째 인자는 메모리 해제할 주소의 포인터입니다. 메모리 해제할 객체를 주면됩니다. 
두번째 인자는 메모리 해제할 영역의 크기입니다. 만약 아에 해제를하는 경우는 0을 주면됩니다. 
세번째 인자는 Free 작업의 유형입니다. 깔끔하게 해제를 하려면 MEM_RELEASE 를 사용하면됩니다.
예시는 이렇습니다. 

::VirtualFree(test, 0, MEM_RELEASE);


그러면 지금까지 사용하던 new delete 와 뭐가 다른가 하면 
지금 VirtualFree 를 해줬다면 그 위치의 메모리가 완벽히 날라갔다는 이야기입니다. 그러니 VirtualFree 를 한 후 그 주소에 접근하게 되면 무조건 크래시가 납니다. 
이부분이 다른데 new delete 를 하게 되었을때는 delete 를 한 후에 그 주소에 접근해도 크래시가 나지 않는 경우도 있었는데 
여기에서 delete 는 삭제를 한다고 했어도 말 그대로 운영체제에서 그 위치의 메모리를 바로 해제하지 않는다는걸 유추할 수 있습니다. 

결국 new delete 는 생각보다 알아서 메모리를 유동적으로 관리한다는 것입니다. 

VirtualAlloc, VirtualFree 이라는 직접적인 할당 해제 함수를 사용하게되면 실행 속도는 떨어지고 디버깅환경에서만 사용해야겠지만 
메모리 침범이슈를 100프로 확률로 잡아 줄 수 있다는것입니다. 


스톰프 얼로케이터를 만들어 보겠습니다. 
----- ServerCore
---- Allocator
--- 헤더 

/*-------------------
	StompAllocator
-------------------*/

class StompAllocator
{
	enum { PAGE_SIZE = 0x1000 };

public:
	static void* Alloc(int32 size);
	static void		Release(void* ptr);
};

PAGE_SIZE 라는 4byte 를 enum으로 관리하는것은 이 사이즈의 배수로 할당을 할것이기 때문인데 VirtualAlloc을 할때 원하는 메모리의 크기를 그대로 할당해주는게 아니라 페이지의 크기 단위로 
할당을 해주게 되니깐 그단위를 PAGE_SIZE 라고 관리하는것입니다. 

--- cpp

/*-------------------
	StompAllocator
-------------------*/

void* StompAllocator::Alloc(int32 size)
{
	const int64 pageCount = (size + PAGE_SIZE - 1) / PAGE_SIZE;
	const int64 dataOffset = pageCount * PAGE_SIZE - size;
	void* baseAddress = ::VirtualAlloc(NULL, pageCount * PAGE_SIZE, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	return static_cast<void*>(static_cast<int8*>(baseAddress) + dataOffset);
}
pageCount 를 계산할때 할당받을 size 에 PAGE_SIZE 를 더하고 또 1을 뺀후 그값을 PAGE_SIZE 로 나누는데 그 이유는 
size가 PAGE_SIZE 단위가 아니라도 단위를 맞추기 위함인데 예를 들어서
size 가 4 였다고 하면 ( 4 + 4096 - 1) / 4096 = 4099 / 4096 = 1  이라는 값이 나옵니다. 1 페이지를 할당하면되는것인데 
1을 빼주는것은 size가 마침 페이지 단위에 맞다게 4096 이었다고 하면 ( 4096 + 4096 - 1) / 4096 = 8191 / 4096 으로 2 페이지가 아니라 1페이지가 할당됩니다. 

dataOffset 이라는 것은 메모리 오버플로우를 잡아주기 위한 것입니다. StompAllocator 를 사용하면 아무리 작은 객체라도 페이지 단위로 할당이 되기때문에 
다른 클래스로 캐스팅해 객체의 데이터가 담긴 메모리 넘어를 접근해도 기기에서는 허용이 됩니다. 이 문제를 해결하기위해 할당된 메모리 시작지점에 객체를 만드는게 아니라 
메모리의 끝부분에 객체를 위치하는것입니다. 그러면 메모리 오버플로우를 일으키면 바로 크래시가 나게 됩니다. 
dataOffset 는 그래서 할당한 메모리의 끝에서 객체의 사이즈인 size 만큼을뺀 주소를 반환합니다. 

void StompAllocator::Release(void* ptr)
{
	const int64 address = reinterpret_cast<int64>(ptr);
	const int64 baseAddress = address - (address % PAGE_SIZE);
	::VirtualFree(reinterpret_cast<void*>(baseAddress), 0, MEM_RELEASE);
}
여기서도 Alloc 할때 dataOffset 때문에 오차가 생긴 주소를 보정하기 위해 baseAddress 를 구해줍니다. address 에서 address % PAGE_SIZE 를 빼주는데 
address % PAGE_SIZE 의 값은 전체 주소를 PAGE_SIZE 단위로 할당하기 때문에 그 나머지 값이 Alloc 에서의 dataOffset 값입니다. 이만큼을 빼주면 기본할당된 시작주소가 나옵니다. 


---- CoreMacro
그리고 이 StompAllocator 를 디버그를 할때 기본으로 사용하도록 CoreMacro에 수정을 합니다. 

#ifdef _DEBUG
#define x_alloc(size)		StompAllocator::Alloc(size)
#define x_release(ptr)		StompAllocator::Release(ptr)
#else
#define x_alloc(size)		BaseAllocator::Alloc(size)
#define x_release(ptr)		BaseAllocator::Release(ptr)
#endif
