


이전시간 소켓을 만들때 일단 TCP를 골라서 실습을 했는데 TCP와 UDP 라는 대표적인 통신 프로토콜에 대해 알아보겠습니다. 

네트워크 통신을 다른 비유로 설명하자면 택배를 보내는것과 유사합니다.

택배를 발송하는 A아파트 201호주민이 있고 택배의 목적지인 B 아파트 301호가 있다고 하겠습니다. 
그러면 A아파트 201호에서 상품을 포장하고 A아파트 경비실에 맡기고 경비실에서 우체국에 건내준 후 B아파트 경비실에 맡기면 
B아파트 301호가 경비실에서 택배를 찾아가게 됩니다. 

이런 과정과 비슷하게 네트워크 통신도 비슷한 과정을 거치는데 
5가지 계층을 거친다고 합니다. 

어플리케이션 계층   : 사용자가 접근할 수있는 유저레벨의 프로그램 계층 
트랜스포트 계층     : 보낼 데이터를 신뢰성 있게 보장해주고 흐름 제어 및 오류복구를 담당
네트워크 계층       : 데이터를 목적지 가지 라우팅(경로 설정)하는 계층, 이 계층에서 IP 주소를 사용해 데이터의 목적지로 전송합니다. 
데이터링크 계층     : 연결된 네트워크 장치간의 데이터 전송을 관리, 오류 검출 및 수정, 프레임 재전송을 담당
피지컬 계층         : 데이터를 전기신호나 광신호 등의 형태로 수신하는 물리적인 매체(케이블, 무선) 통해 전송

이 계층중에 이번에 알아볼 TCP, UDP 를 골라주는 계층은 트랜스포트 단계입니다. 

패킷이 전송이 될때 어떤 방식으로 보낼것인지 패킷이 유실이 되었을때 어떻게 처리를 할것인지를 골라줍니다. 

TCP     : 느리긴 하지만 안전한 방식 
        연결형 서비스 
        1) 연결을 위해 할당되는 논리적인 경로가 있다. 우체국 등기나 전화처럼 상호간에 연결이 되고 나서 데이터를 전송
        2) 전송 순서가 보장된다. 전화에서 내가 말한 순서대로 데이터가 도달하는것과 같다 
        신뢰성 좋고 속도가 느리다 
        1) 데이터 분실이 일어나면 책임지고 다시 전송한다
        2) 수신측에서 데이터를 받을 상황이 아니면 일부만 보낸다
        3) 고려할 것이 많으니 속도가 느리다

UDP     : 빠르지만 위험한 방식 
        비연결형 서비스
        1) 연결이라는 개념이 없다. 문자메세지나 문앞에 두는 택배처럼 연결보다는 일단 적힌 목적지로 데이터를 보내고 수신은 알아서 
        2) 전송 순서가 보장되지 않는다. 한번에 수십개의 이메일을 보내도 보낸 순서대로 도착한다는 보장이 없다 
        3) 경계의 개념이 있다. 
        신뢰성 나쁘고 속도는 빠르다
        1) 한번 보낸 데이터의 분실은 책임지지않는다
        2) 일단 목적지로 보내고 생각합니다.
        3) 단순하기 때문에 속도가 좋다 

데이터 경계라는 것에 대해 좀 더 알아보겠습니다. 
TCP 의 경우는 데이터의 순서는 보장이 되지만 경계가 없습니다. "Hello" "World" 라는 두 문자열을 보냈다면 이 순서는 보장이 되기는 하는데 
경계가 없어서 "HelloWor" "ld" 이런식으로 받을수도 있습니다. 
UDP 는 순서보장이 안되고 경계가 있으므로 "World" "Hello" 이렇게 들어올 수도 있는겁니다. 

흐름 혼잡 제어는 어떤 말인지를 또 알아보면 
이전에 네트워크 통신을 하면서 송신측 SendBuffer 에서 패킷을 보낼때 수신측의 RecvBuffer의 상황을 살펴 패킷을 온전히 받지 못할것 같으면 굳이 보내지 않는것입니다. 

서로 장단점이 있기 때문에 사용할 서비스에 적절한 것을 골라 사용하면 될것입니다. 