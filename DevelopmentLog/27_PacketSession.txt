

시작하기에 앞서 조금 수정하면 좋을 부분이 있습니다. 

ServerCore 프로젝트에서 Session 코드인데 
Session::Send 에서 지금까지 함수시작하자마자 전체적으로 WRITE_LOCK 을 걸고 _sendQueue.Push(), RegisterSend 들을 호출했습니다. 
두 함수모두 한번에 한 쓰레드만 동작할 수 있는것이었는데 사실 이렇게 하면 성능적으로 좀 아쉽습니다. 
그래서 수정한 버전이 이렇습니다. 

void Session::Send(SendBufferRef sendBuffer)
{
	if (IsConnected() == false)
		return;

	bool registerSend = false;

	// 현재 RegisterSend가 걸리지 않은 상태라면, 걸어준다
	{
		WRITE_LOCK;

		_sendQueue.push(sendBuffer);

		if (_sendRegistered.exchange(true) == false)
			registerSend = true;
	}
	
	if (registerSend)
		RegisterSend();
}

_sendQueue.push 부분만 범위를 잡아 락을 걸어주는데 RegisterSend 는 내부에서 필요한 부분에 알아서 락을 잡고 있기 때문입니다. 



본내용인 PacketSession 으로 들어가보겠습니다. 

ServerCore 프로젝트 Session 파일 안에 새 클래스를 추가해줄겁니다. 

이 PacketSession 이란것이 왜 필요하냐면 패킷을 받는 쪽과 관련이 있는데 
Session::ProcessRecv 를 할때 받은 RecvBuffer 의 readPos 와 버퍼의 크기 len 을 OnRecv에 인자로 넘겨주면서 컨텐츠단에서 오버라이드를 하고 있습니다. 
OnRecv 의 반환값은 이번틱에 처리한 데이터의 크기를 반환하고 있습니다. 지금은 그냥 받은 RecvBuffer를 다 처리했다는 가정으로 바로 len을 반환하고 있습니다.
하지만 TCP 프로토콜 특성상 많은 입출력이 몰리면 항상 모든 패킷을 다 처리할 수 있다는 보장이 없기때문에 어디까지 처리했는지를 체크해야하긴 합니다. 

이런 상황에서 어떤식으로든 보낸 패킷이 모두 처리되었는지 확인 할 수 있는 수단이 필요한것이고 
그것을 우리만의 프로토콜을 정의 해줘야합니다. 

쉽게 생각해서 패킷의 앞뒤로 어떤 특수 문자를 줘서 이 특수문자를 기점으로 하나의 패킷이라고 표시하면 되지 않을까 생각할 수 있지만 
당연히 이런 방법은 사용할 수 없습니다. 만약 운이 나쁘게 패킷의 경계로 사용할 특수문자가 패킷 중간에 사용되어버리면 오동작을 일으킬 수 밖에 없습니다. 

그래서 MMO 게임에서 사용하는 가장 정석적인 방법은 패킷의 맨앞에 이 패킷에 대한정보를 패킷헤더로 들고 있게끔 해줍니다. 


struct PacketHeader
{
	uint16 size;
	uint16 id; // 프로토콜ID (ex. 1=로그인, 2=이동요청)
};

가장 간단하게 이 패킷이 어떤용도의 패킷인지 id 를 사용하고 이 패킷의 크기를 size로 들고 있게 해줍니다. 

size, id 순으로 사용하는 이유가 궁금해질 수 도 있습니다 이 패킷을 어떤 용도로 사용할지 id로 다 알려준다고 했는데 굳이 따로 size를 기입해야할지가 의아 할 수 있는데 
하지만 보내는 패킷들이 가변적인 것들도 있을 수 있기 때문에 size 를 먼저 보내주는 것입니다. 
가변적인 크기의 패킷이란 채팅같은걸 string 타입으로 보내면 작은 메세지 한 5바이트 크기의 패킷을 보낼 수 도 있지만 장문의 메세지를 보내면 100바이트가 될수도 있는것이고 
또 근처의 플레이어 목록이나 몬스터 목록을 보낼때도 주변에 1명의 플레이어나 몬스터가 있을 수도 있지만 50명의 플레이어나 몬스터가 있을 수도 있는등 
가변적으로 변합니다. 

패킷 정책을 이런식으로 만들어 줄겁니다. 
[size(2byte)][id(2byte)][pakcet data ...][size(2byte)][id(2byte)][pakcet data ...][size(2byte)][id(2byte)][pakcet data ...] ...

그래서 이번에 받은 패킷이 온전한지를 확인하기 위해서는 패킷 헤더의 size를 파싱해 이번에 들어온 패킷이 size 보다는 큰지를 확인하구 
size 만큼만 들어왔다면 한 패킷이 딱 들어온것이고 더 많이 들어왔다면 size 만큼만 따로 때서 패킷을 사용하면 됩니다. 



이 패킷 프로토콜을 활용한 세션을 Session을 상속받은 PacketSession 으로 만들어 줍니다. 

class PacketSession : public Session
{
public:
	PacketSession();
	virtual ~PacketSession();

	PacketSessionRef	GetPacketSessionRef() { return static_pointer_cast<PacketSession>(shared_from_this()); }

protected:
	virtual int32		OnRecv(BYTE* buffer, int32 len) sealed;
	virtual int32		OnRecvPacket(BYTE* buffer, int32 len) abstract;
};

OnRecv 는 컨텐츠 단에서 사용하던 건데 이번에 PacketSession 을 추가하면서 여기서 가로채 사용하고 sealed 를 해 컨텐츠 단에서는 사용못하게 합니다. 
대신 OnRecvPacket 을 사용하도록 할것입니다. 


// [size(2)][id(2)][data....][size(2)][id(2)][data....]
int32 PacketSession::OnRecv(BYTE* buffer, int32 len)
{
	int32 processLen = 0;

	while (true)
	{
		int32 dataSize = len - processLen;
		// 최소한 헤더는 파싱할 수 있어야 한다
		if (dataSize < sizeof(PacketHeader))
			break;

		PacketHeader header = *(reinterpret_cast<PacketHeader*>(&buffer[processLen]));
		// 헤더에 기록된 패킷 크기를 파싱할 수 있어야 한다
		if (dataSize < header.size)
			break;

		// 패킷 조립 성공
		OnRecvPacket(&buffer[processLen], header.size);

		processLen += header.size;
	}

	return processLen;
}
가로채기한 OnRecv 가 뭘 할것이냐면 
일단 인자로 받은 RecvBuffer 의 시작 주소와 받은 데이터의 길이를 받을건데 TCP의 특성상 받은 버퍼가 패킷이 온전히 들어왔는지는 알 수 없는 상태입니다. 
이 상황에서 먼저 스택 영역에 로컬 변수 processLen 를 하나 만들고 시작합니다. 
무한루프를 돌면서 들어온 데이터 dataSize 를 len - processLen 으로 계산을 해주는데 dataSize 가 일단 패킷헤더크기 보다 작다면 더 진행하지 않고 break를 합니다. 
뭘 진행하기전에 이미 최소한으로 필요한 데이터도 안들어온것입니다. 

그게 아니라면 일단 패킷헤더는 들어온 상태일것이니 맨앞부터 PacketHeader로 캐스팅해 header로 가져옵니다. 
한번더 dataSize 가 header.size 보다 작다면 break 를 하는데 header.size는 패킷헤더와 함께 뒤에 붙은 실질적 패킷의 크기를 포함합니다. 이 조건문에 걸렸다는것은 
아직 패킷 하나분이 충분히 Recv 되지 않았다는것이니 다음 Recv를 기다립니다. 

이 조건문을 통과했다면 헤더도 들어왔고 헤더에 적힌 패킷보다 큰 사이즈의 데이터를 수신했다는것입니다. 
이제 패킷 하나를 조립성공했으면 컨텐츠단에 이 버퍼의 시작점, 헤더에 적힌 size 를 OnRecvPacket 에 인자로 줍니다. 
그 후 이제 processLen 은 방금 보낸 header.size 만큼을 더하게 되면 보낸 패킷 다음 위치부터 다시 패킷을 파싱하게 됩니다. 
만약 한번에 받은 데이터가 패킷 둘 이상이면 이어서 패킷하나를 더 파싱하게 될것이고 받은 데이터가 둘 이하라면 다음 루프때 알아서 break 로 들어가 OnRecv가 끝날것입니다. 

반환은 processLen 을 반환하게 되는데 Session::ProcessRecv 에서 이후 이 값을 _recvBuffer.OnRead(processLen) 로 넘겨줍니다. 
파싱성공한 패킷들의 사이즈를 넘겨주면서 _recvBuffer의 _readPos 를 뒤로 밀어주게 된것입니다. 


여기까지 하고 ServerCore 를 빌드합니다. 만약 버그가 있다면 버그를 잡아주고 
다음은 사용하는 컨텐츠 쪽 코드를 수정할 차례입니다. 

GameServer, DummyClient 에서 이전에는 세션을 Session 을 상속받아 사용하고 있었는데 이제는 PacketSession 을 상속받은 후 OnRecv 대신 OnRecvPacket 을 사용하면 됩니다. 
테스트는 이전에 DummyClient 에서 OnConnect 부터 보낸 "Hello World!" 메세지를 GameServer 에서 에코서버로 다시 보내는게 아니라 
GameServer 의 메인 스레드에서 접속한 클라이언트에 broadCast 를 하는 방식으로 바꿔 보겠습니다. 
이런 방식이 실제 MMO에서 많이 일어납니다. 서버에서 몬스터를 리스폰했다던지 전체 시스템 메세지를 보낸다던지 할때 입니다. 
GameServer.cpp 에서 워커쓰레드를 만든 후에 

	char sendData[1000] = "Hello World";

	while (true)
	{
		SendBufferRef sendBuffer = GSendBufferManager->Open(4096);

		BYTE* buffer = sendBuffer->Buffer();
		((PacketHeader*)buffer)->size = (sizeof(sendData) + sizeof(PacketHeader));
		((PacketHeader*)buffer)->id = 1; // 1 : Hello Msg
		::memcpy(&buffer[4], sendData, sizeof(sendData));
		sendBuffer->Close((sizeof(sendData) + sizeof(PacketHeader)));

		GSessionManager.Broadcast(sendBuffer);

		this_thread::sleep_for(250ms);
	}
이런 코드를 추가했습니다. 
보기와 같이 Send를 하기 위해 많이 번거롭습니다. 이 부분은 차후 정리를 할 예정입니다. 

DummyClient 에서는 PacketSession 을 상속받도록하고 
OnConnect, OnSend 부분 코드들은 날려줍니다. OnRecvPacket 에서는 

	virtual int32 OnRecvPacket(BYTE* buffer, int32 len) override
	{
		PacketHeader header = *((PacketHeader*)buffer);
		//cout << "Packet ID : " << header.id << "Size : " << header.size << endl;

		char recvBuffer[4096];
		::memcpy(recvBuffer, &buffer[4], header.size - sizeof(PacketHeader));
		cout << recvBuffer << endl;

		return len;
	}

이렇게 해줍니다. 


이 상태가 앞으로 게임서버의 기본적인 프로토콜이라고 할 수 있습니다. 
항상 패킷을 보낼때는 가장 앞에 패킷헤더를 붙혀서 사이즈와 아이디를 보내고 뒤이어 실제 데이터를 보내는 것입니다. 

여기서 조금 심화로 보안적인 이슈를 보자면 
GameServer.cpp 에서 Broadcast 를 하기위한 SendBuffer를 만들때 PacketHeader 에 size와 id를 기입하고 있습니다. 
이 것들을 잘못 기입하게 되면 어떻게 될까요 

온라인게임 해커들은 항상 이 패킷헤더의 size 와 id를 계속 바꿔보면서 보내보려는 시도를 하게 됩니다. 
해킹이 성공해서 size, id 가 잘못기입되었다고 한다면 들어온 패킷을 엉뚱하게 파싱할 수 있습니다. 
이런 부분을 서버에서 인지하게 되면 이 접속을 차단해줘야합니다. 

그러면 해커들이 항상 접근 시도하는 패킷헤더를 어떻게 신용할 수 있나 할 수 있지만 
그래서 게임 서버는 들어오는 패킷들을 항상 의심해봐야 합니다. 



또 한가지 버그가 있습니다. 
GameSessionManager 쪽인데 어떤 버그인지 한가지 테스트를 해보면 
일단 DummyClient 에서 접속하는 클라이언트의 숫자를 1000명까지 늘린후 게임을 실행해 본 후 DummyClient 프롬프트를 종료해보면 
GameServer 에서 BroadCast를 하던 도중 크래시가 납니다. 

이런 부분에서 크래시가 나면 처음 포트폴리오를 만드는 단계에서 어디가 문제인지 알기 쉽지 않습니다. 

왜 이 버그가 생겼는지 알아볼것입니다. 
의심할 수 있는 부분은 아마 직접 만든 Read-Write Lock 이 문제가 있었다던지 아니면 GameServer 에서 들고 있는 GameSessionRef 의 참조 카운트가 어쩌다 0이 되어 
이미 해제된 메모리에 접근을 하려 했다던지 아니면 GameSessionManager 에서 GameSession 들을 Set<GameSessionRef> 로 들고 있을때 shared_ptr 로 들고 있으면 안되는것이었는지 
이런 의심들을 할 수 있습니다. 

하지만 직접 만든 락이 문제라면 표준 mutex를 사용해보면서 체크할수 있지만 이것이 문제는 아니라는걸 알 수 있고 
참조 카운트도 수동으로 관리하는게 아니라 표준 share_ptr 을 사용하고 있기 때문에 문제가 아닐것이고 
Set<GameSessionRef> 도 그냥 GameSessionRef 를 사용하더라도 그 주소를 Key로 사용하기 때문에 문제가 아닙니다. 

서버와 클라이언트를 같이 실행한 상태에서 서버를 먼저 닫으면 이번에는 클라이언트에서는 크래시가 안뜬다는것을 알 수 있습니다. 
즉, GameSessionManager 이 코드가 무언가 이상한 것입니다. 

그 이유는 GameSessionManager::BroadCast 함수에서 락을 걸고서 세션들을 _sessions 라고 가지고 있는데 이것을 for each 문을 돌면서 Send 하고 있습니다. 
그런데 이 for 문을 돌고 있는 중 그 안에서 _sessions 라는 컨테이너에 clear 나 pop 같은 변화를 주게 되면 메모리가 오염이 일어 날 수 있습니다.

하지만 지금 까지 코드를 만들면서 이러면 안된다는 체크를 하지 않았었습니다. 
그러면 GameSessionManager::BroadCast 안의 Send 코드를 확인해보겠습니다. 

Session::Send 함수의 내용을 보면 
1. 연결여부를 확인
2. registerSend 불리언 변수 생성(기본값 false)
3. 범위를 잡고 락을 겁니다. 
4. _sendQueue 에 SendBuffer 인자를 푸시 
5. 현재 SendRegister 중이라면 여기서 끝
6. SendRegister 중이 아니라면 이 쓰레드가 RegisterSend 를 호출 

이런 코드인데 그러면 문제가 될만한 부분은 아마 RegisterSend 같습니다. 

다시 Session::RegisterSend 코드를 보면 
1. 연결여부를 확인
2. _sendEvent 를 초기화 하고 자신을 오너로 등록
3. 락 걸고 
4. _sendQueue 안에 쌓인 SendBuffer 들을 꺼내 _sendEvent 에 등록합니다. (SendBuffer 의 참조카운트를 유지해 삭제되지 않게 하기 위함)
5. 락 풀기 
6. WSABUF 의 Vector wsaBufs를 만듭니다. 
7. _sendEvent.sendBuffers 의 원소들마다 WSABUF에 담아 wsaBufs에 등록
8. wsaBufs 를 한번에 WSASend 합니다. 
9. 비동기 입출력이다 보니 바로 완료가 되지 않을 수 있고 에러코드가 Pending 이라면 그냥 통과
10. 에러코드가 Pending 이 아니라면 에러코드를 출력하고 _sendEvent의 오너, sendBuffers 들을 밀고 _sendRegisterd 를 false로 수정합니다. 

이 코드 중에서 에러코드를 출력하는 함수가 Session::HandleError 함수입니다. 
HandleError 함수에서는 Disconnect 함수 호출과 에러코드 로그 출력 두가지 동작을 합니다. 

Disconnect 에서 문제가 되는것은 이 안에서 컨텐츠 에서 오버라이드 해서 사용하는 OnDisconnect 를 호출하는데 
GameSession 에서 오버라이드한 OnDisconnect 의 코드가 GSessionManager.Remove 를 호출하고 있습니다. 

결국 SessionManager::BroadCast 를 호출해 Session들을 순회하며 Send 를 하다보면 클라이언트쪽에서 연결을 끊게 되면 타고타고 들어가
SessionManager::Remove 로 들어옵니다. Remove 에서는 _sessions.erase(session) 를 하고 있기 때문에 
순회중 _sessions 에 변화를 주게 됩니다. 

이부분을 고쳐줘야합니다. 
RegisterSend 안에서 호출되는 Disconnect 가 OnDisconnect 를 호출하는것이 문제이기 때문에 이것은 
나중에 SessionMananger에서 호출하는 Send가 완료된 이후에 동작하도록 하면 될것입니다. 
그러려면 Disconnect 이벤트가 완료된 ProcessDisconnect 안에 OnDisconnect 를 넣어두면 될것 같습니다. 	

이제 다시 테스트를 해보면 정상적으로 동작을 하게 됩니다. 


마무리로 메모리 풀링을 하는 방식이 새로 생성하는 비용도 줄고 다 좋은데 한가지 주의해야할점이 풀링으로 사용한 메모리의 참조 카운트가 0이되지 않게 되면 
메모리가 계속 해제되지 않는다는 문제가 있습니다. 