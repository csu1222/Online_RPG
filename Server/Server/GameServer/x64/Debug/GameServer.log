Protocol.proto(4,1): warning G1A4DC0EC: Import Enum.proto is unused.
  #pragma once
  #include "Protocol.pb.h"
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  #include "A1.h"
  #endif
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_C_LOGIN = 1000,
  	PKT_S_LOGIN = 1001,
  	PKT_C_LOGOUT = 1002,
  	PKT_S_LOGOUT = 1003,
  	PKT_C_ENTER_GAME = 1004,
  	PKT_S_ENTER_GAME = 1005,
  	PKT_C_LEAVE_GAME = 1006,
  	PKT_S_LEAVE_GAME = 1007,
  	PKT_S_SPAWN = 1008,
  	PKT_S_DESPAWN = 1009,
  	PKT_C_MOVE = 1010,
  	PKT_S_MOVE = 1011,
  	PKT_C_CHAT = 1012,
  	PKT_S_CHAT = 1013,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_C_LOGIN(PacketSessionRef& session, Protocol::C_LOGIN& pkt);
  bool Handle_C_LOGOUT(PacketSessionRef& session, Protocol::C_LOGOUT& pkt);
  bool Handle_C_ENTER_GAME(PacketSessionRef& session, Protocol::C_ENTER_GAME& pkt);
  bool Handle_C_LEAVE_GAME(PacketSessionRef& session, Protocol::C_LEAVE_GAME& pkt);
  bool Handle_C_MOVE(PacketSessionRef& session, Protocol::C_MOVE& pkt);
  bool Handle_C_CHAT(PacketSessionRef& session, Protocol::C_CHAT& pkt);
  
  class ServerPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_C_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LOGIN>(Handle_C_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_C_LOGOUT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LOGOUT>(Handle_C_LOGOUT, session, buffer, len); };
  		GPacketHandler[PKT_C_ENTER_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ENTER_GAME>(Handle_C_ENTER_GAME, session, buffer, len); };
  		GPacketHandler[PKT_C_LEAVE_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LEAVE_GAME>(Handle_C_LEAVE_GAME, session, buffer, len); };
  		GPacketHandler[PKT_C_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_MOVE>(Handle_C_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_C_CHAT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_CHAT>(Handle_C_CHAT, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef & session, BYTE * buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::S_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_S_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LOGOUT& pkt) { return MakeSendBuffer(pkt, PKT_S_LOGOUT); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ENTER_GAME& pkt) { return MakeSendBuffer(pkt, PKT_S_ENTER_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LEAVE_GAME& pkt) { return MakeSendBuffer(pkt, PKT_S_LEAVE_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_SPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_SPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_DESPAWN& pkt) { return MakeSendBuffer(pkt, PKT_S_DESPAWN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_S_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_CHAT& pkt) { return MakeSendBuffer(pkt, PKT_S_CHAT); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  	
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  		SendBufferRef sendBuffer = MakeShared<SendBuffer>(packetSize);
  #else
  		SendBufferRef sendBuffer = make_shared<SendBuffer>(packetSize);
  #endif
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		pkt.SerializeToArray(&header[1], dataSize);
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  #pragma once
  #include "Protocol.pb.h"
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  #include "A1.h"
  #endif
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_C_LOGIN = 1000,
  	PKT_S_LOGIN = 1001,
  	PKT_C_LOGOUT = 1002,
  	PKT_S_LOGOUT = 1003,
  	PKT_C_ENTER_GAME = 1004,
  	PKT_S_ENTER_GAME = 1005,
  	PKT_C_LEAVE_GAME = 1006,
  	PKT_S_LEAVE_GAME = 1007,
  	PKT_S_SPAWN = 1008,
  	PKT_S_DESPAWN = 1009,
  	PKT_C_MOVE = 1010,
  	PKT_S_MOVE = 1011,
  	PKT_C_CHAT = 1012,
  	PKT_S_CHAT = 1013,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_S_LOGIN(PacketSessionRef& session, Protocol::S_LOGIN& pkt);
  bool Handle_S_LOGOUT(PacketSessionRef& session, Protocol::S_LOGOUT& pkt);
  bool Handle_S_ENTER_GAME(PacketSessionRef& session, Protocol::S_ENTER_GAME& pkt);
  bool Handle_S_LEAVE_GAME(PacketSessionRef& session, Protocol::S_LEAVE_GAME& pkt);
  bool Handle_S_SPAWN(PacketSessionRef& session, Protocol::S_SPAWN& pkt);
  bool Handle_S_DESPAWN(PacketSessionRef& session, Protocol::S_DESPAWN& pkt);
  bool Handle_S_MOVE(PacketSessionRef& session, Protocol::S_MOVE& pkt);
  bool Handle_S_CHAT(PacketSessionRef& session, Protocol::S_CHAT& pkt);
  
  class ClientPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_S_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LOGIN>(Handle_S_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_S_LOGOUT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LOGOUT>(Handle_S_LOGOUT, session, buffer, len); };
  		GPacketHandler[PKT_S_ENTER_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ENTER_GAME>(Handle_S_ENTER_GAME, session, buffer, len); };
  		GPacketHandler[PKT_S_LEAVE_GAME] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LEAVE_GAME>(Handle_S_LEAVE_GAME, session, buffer, len); };
  		GPacketHandler[PKT_S_SPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_SPAWN>(Handle_S_SPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_DESPAWN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_DESPAWN>(Handle_S_DESPAWN, session, buffer, len); };
  		GPacketHandler[PKT_S_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_MOVE>(Handle_S_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_S_CHAT] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_CHAT>(Handle_S_CHAT, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef & session, BYTE * buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::C_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_C_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_LOGOUT& pkt) { return MakeSendBuffer(pkt, PKT_C_LOGOUT); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_ENTER_GAME& pkt) { return MakeSendBuffer(pkt, PKT_C_ENTER_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_LEAVE_GAME& pkt) { return MakeSendBuffer(pkt, PKT_C_LEAVE_GAME); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_C_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_CHAT& pkt) { return MakeSendBuffer(pkt, PKT_C_CHAT); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  	
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  #if UE_BUILD_DEBUG + UE_BUILD_DEVELOPMENT + UE_BUILD_TEST + UE_BUILD_SHIPPING >= 1
  		SendBufferRef sendBuffer = MakeShared<SendBuffer>(packetSize);
  #else
  		SendBufferRef sendBuffer = make_shared<SendBuffer>(packetSize);
  #endif
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		pkt.SerializeToArray(&header[1], dataSize);
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  D:Enum.pb.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.cc
  1개 파일이 복사되었습니다.
  D:Struct.pb.h
  1개 파일이 복사되었습니다.
  D:Struct.pb.cc
  1개 파일이 복사되었습니다.
  D:Protocol.pb.h
  1개 파일이 복사되었습니다.
  D:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  D:ServerPacketHandler.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.cc
  1개 파일이 복사되었습니다.
  D:Struct.pb.h
  1개 파일이 복사되었습니다.
  D:Struct.pb.cc
  1개 파일이 복사되었습니다.
  D:Protocol.pb.h
  1개 파일이 복사되었습니다.
  D:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  D:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.h
  1개 파일이 복사되었습니다.
  D:Enum.pb.cc
  1개 파일이 복사되었습니다.
  D:Struct.pb.h
  1개 파일이 복사되었습니다.
  D:Struct.pb.cc
  1개 파일이 복사되었습니다.
  D:Protocol.pb.h
  1개 파일이 복사되었습니다.
  D:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  D:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  #pragma once
  #include "Types.h"
  #include <windows.h>
  #include "DBBind.h"
  
  namespace SP
  {
  	
      class InsertGold : public DBBind<3,0>
      {
      public:
      	InsertGold(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertGold(?,?,?)}") { }
      	void In_Gold(int32& v) { BindParam(0, v); };
      	void In_Gold(int32&& v) { _gold = std::move(v); BindParam(0, _gold); };
      	template<int32 N> void In_Name(WCHAR(&v)[N]) { BindParam(1, v); };
      	template<int32 N> void In_Name(const WCHAR(&v)[N]) { BindParam(1, v); };
      	void In_Name(WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_Name(const WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_CreateDate(TIMESTAMP_STRUCT& v) { BindParam(2, v); };
      	void In_CreateDate(TIMESTAMP_STRUCT&& v) { _createDate = std::move(v); BindParam(2, _createDate); };
  
      private:
      	int32 _gold = {};
      	TIMESTAMP_STRUCT _createDate = {};
      };
  
      class GetGold : public DBBind<1,4>
      {
      public:
      	GetGold(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spGetGold(?)}") { }
      	void In_Gold(int32& v) { BindParam(0, v); };
      	void In_Gold(int32&& v) { _gold = std::move(v); BindParam(0, _gold); };
      	void Out_Id(OUT int32& v) { BindCol(0, v); };
      	void Out_Gold(OUT int32& v) { BindCol(1, v); };
      	template<int32 N> void Out_Name(OUT WCHAR(&v)[N]) { BindCol(2, v); };
      	void Out_CreateDate(OUT TIMESTAMP_STRUCT& v) { BindCol(3, v); };
  
      private:
      	int32 _gold = {};
      };
  
  
       
  };
  D:GenProcedures.h
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  pch.cpp
  Creature.cpp
  CreatureData.cpp
  GameServer.cpp
  GameSession.cpp
  GameSessionManager.cpp
  Monster.cpp
  Object.cpp
  ObjectUtils.cpp
  Player.cpp
  ServerPacketHandler.cpp
  Room.cpp
  Utils.cpp
  코드를 생성하고 있습니다...
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665: 'std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert': 모든 인수 형식을 변환할 수 있는 오버로드된 함수가 없습니다.
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:         with
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:         [
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:             _Kty=uint64,
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:             _Hasher=std::hash<uint64>,
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:             _Keyeq=std::equal_to<uint64>,
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:             _Alloc=std::allocator<uint64>
D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38): error C2665:         ]
  (소스 파일 '/Room.cpp'을(를) 컴파일하는 중)
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xhash(1541,88):
      'std::_Insert_return_type<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty>> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty> &&)'일 수 있습니다.
          with
          [
              _Ty=unsigned __int64,
              _Alloc=std::allocator<uint64>,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>
          ]
          D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
          'std::_Insert_return_type<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty>> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty> &&)': 인수 1을(를) 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty> &&'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=unsigned __int64,
              _Alloc=std::allocator<uint64>,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>
          ]
          and
          [
              _Alloc=std::allocator<uint64>,
              _Kty=uint64
          ]
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              원인: 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'std::_Node_handle<std::_List_node<unsigned __int64,std::_Default_allocator_traits<_Alloc>::void_pointer>,_Alloc,std::_Node_handle_set_base,_Kty>'(으)로 변환할 수 없습니다.
          with
          [
              _Alloc=std::allocator<uint64>,
              _Kty=uint64
          ]
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              이 변환을 수행할 수 있는 사용 가능한 사용자 정의 변환 연산자가 없거나 연산자를 호출할 수 없습니다.
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xhash(976,10):
      또는       'void std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(std::initializer_list<_Ty>)'
          with
          [
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>,
              _Ty=unsigned __int64
          ]
          D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
          'void std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(std::initializer_list<_Ty>)': 인수 1을(를) 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'std::initializer_list<_Ty>'(으)로 변환할 수 없습니다.
          with
          [
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>,
              _Ty=unsigned __int64
          ]
          and
          [
              _Ty=unsigned __int64
          ]
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              이 변환을 수행할 수 있는 사용 가능한 사용자 정의 변환 연산자가 없거나 연산자를 호출할 수 없습니다.
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xhash(942,59):
      또는       'std::pair<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(unsigned __int64 &&)'
          with
          [
              _Ty=unsigned __int64,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
          D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
          'std::pair<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(unsigned __int64 &&)': 인수 1을(를) 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'unsigned __int64 &&'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=unsigned __int64,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              원인: 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'unsigned __int64'(으)로 변환할 수 없습니다.
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              이 변환을 수행할 수 있는 사용 가능한 사용자 정의 변환 연산자가 없거나 연산자를 호출할 수 없습니다.
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xhash(938,59):
      또는       'std::pair<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(const unsigned __int64 &)'
          with
          [
              _Ty=unsigned __int64,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
          D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
          'std::pair<std::_List_const_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(const unsigned __int64 &)': 인수 1을(를) 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'const unsigned __int64 &'(으)로 변환할 수 없습니다.
          with
          [
              _Ty=unsigned __int64,
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              원인: 'std::pair<unsigned __int64,std::shared_ptr<Monster>>'에서 'const unsigned __int64'(으)로 변환할 수 없습니다.
              D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,54):
              이 변환을 수행할 수 있는 사용 가능한 사용자 정의 변환 연산자가 없거나 연산자를 호출할 수 없습니다.
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xhash(964,10):
      또는       'void std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(_Iter,_Iter)'
          with
          [
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
          D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
          'void std::_Hash<std::_Uset_traits<_Kty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::insert(_Iter,_Iter)': 2개의 인수가 필요합니다. 1개가 제공되었습니다.
          with
          [
              _Kty=uint64,
              _Hasher=std::hash<uint64>,
              _Keyeq=std::equal_to<uint64>,
              _Alloc=std::allocator<uint64>
          ]
      D:\CPP_Game\Portfolio\Server\Server\GameServer\Room.cpp(267,38):
      인수 목록 '(std::pair<unsigned __int64,std::shared_ptr<Monster>>)'을(를) 일치시키는 동안
  
